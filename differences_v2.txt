Only in wcp-uboone-bdt_older/apps: convert_checkout_hist_xs_from_github.txt
diff -r wcp-uboone-bdt/apps/det_cov_matrix.cxx wcp-uboone-bdt_older/apps/det_cov_matrix.cxx
47,48c47,54
<   cov.add_disabled_ch_name("BG_nueCC_FC_overlay");
<   cov.add_disabled_ch_name("BG_nueCC_PC_overlay");
---
>   
>   // appling the detvar background approximation to the signal channels:
>   cov.add_disabled_ch_name("nc_delta_Np_01_overlay");
>   cov.add_disabled_ch_name("nc_delta_0p_01_overlay");
> 
>   
>   //cov.add_disabled_ch_name("BG_nueCC_FC_overlay");
>   //cov.add_disabled_ch_name("BG_nueCC_PC_overlay");
54,59c60,67
<   cov.add_disabled_ch_name("BG_nueCC2_FC_overlay");
<   cov.add_disabled_ch_name("BG_nueCC2_PC_overlay");
<   cov.add_disabled_ch_name("BG_nueCC3_FC_overlay");
<   cov.add_disabled_ch_name("BG_nueCC3_PC_overlay");
<   cov.add_disabled_ch_name("BG_nueCC_extra_FC_overlay");
<   cov.add_disabled_ch_name("BG_nueCC_extra_PC_overlay");
---
>   //cov.add_disabled_ch_name("BG_nueCC2_FC_overlay");
>   //cov.add_disabled_ch_name("BG_nueCC2_PC_overlay");
>   //cov.add_disabled_ch_name("BG_nueCC3_FC_overlay");
>   //cov.add_disabled_ch_name("BG_nueCC3_PC_overlay");
>   //cov.add_disabled_ch_name("BG_nueCC_extra_FC_overlay");
>   //cov.add_disabled_ch_name("BG_nueCC_extra_PC_overlay");
>   
>   
diff -r wcp-uboone-bdt/apps/numi_filter.cxx wcp-uboone-bdt_older/apps/numi_filter.cxx
132,370c132
<       7764, 7765, 7766, 7767, 7768, 7769, 7770, // run1
<       13697, 13698, 13699, 13700, 13701, 13702, 13705, 13707, 13708, 13709, 13712, 13713, 13714, 13715, 13717, 13719, 13720, 13721, 13723, 13724,
< 13725, 13728, 13729, 13730, 13731, 13732, 13733, 13736, 13737, 13738, 13739, 13740, 13741, 13742, 13743, 13744, 13745, 13746, 13755, 13756, 13757,
< 13762, 13763, 13764, 13765, 13766, 13767, 13769, 13770, 13771, 13772, 13773, 13774, 13775, 13776, 13777, 13779, 13780, 13782, 13787, 13789, 13790,
< 13791, 13792, 13793, 13794, 13797, 13799, 13800, 13801, 13802, 13803, 13805, 13806, 13807, 13809, 13810, 13811, 13812, 13860, 13861, 13862, 13864,
< 13865, 13867, 13868, 13869, 13871, 13872, 13873, 13874, 13875, 13876, 13877, 13878, 13879, 13883, 13884, 13888, 13889, 13894, 13895, 13896, 13897,
< 13898, 13899, 13900, 13902, 13904, 13905, 13906, 13907, 13908, 13909, 13910, 13911, 13912, 13913, 13917, 13918, 13919, 13921, 13922, 13923, 13926,
< 13928, 13929, 13930, 13935, 13936, 13937, 13938, 13939, 13940, 13942, 13943, 13944, 13945, 13947, 13948, 13950, 13951, 13954, 13955, 13956, 13957,
< 13959, 13960, 13962, 13963, 13964, 13965, 13969, 13970, 13971, 13972, 13977, 13978, 13979, 13982, 13984, 13985, 13986, 13988, 13989, 13990, 13991,
< 13992, 13993, 13996, 13997, 13998, 14000, 14001, 14002, 14004, 14006, 14007, 14008, 14009, 14010, 14011, 14012, 14014, 14015, 14016, 14017, 14020,
< 14021, 14022, 14023, 14024, 14025, 14026, 14028, 14030, 14031, 14032, 14034, 14035, 14036, 14038, 14039, 14040, 14042, 14043, 14044, 14045, 14046,
< 14047, 14049, 14053, 14055, 14056, 14058, 14059, 14060, 14062, 14063, 14064, 14065, 14066, 14067, 14068, 14069, 14073, 14074, 14075, 14076, 14077,
< 14079, 14080, 14082, 14083, 14084, 14087, 14088, 14089, 14090, 14091, 14093, 14095, 14096, 14097, 14098, 14099, 14101, 14102, 14103, 14104, 14105,
< 14107, 14108, 14109, 14110, 14111, 14112, 14114, 14115, 14116, 14117, 14121, 14122, 14123, 14124, 14125, 14127, 14128, 14129, 14131, 14132, 14133,
< 14134, 14135, 14136, 14138, 14139, 14140, 14141, 14142, 14143, 14146, 14147, 14148, 14149, 14150, 14151, 14152, 14153, 14154, 14156, 14157, 14158,
< 14159, 14161, 14162, 14163, 14164, 14165, 14171, 14172, 14173, 14174, 14175, 14177, 14181, 14182, 14183, 14184, 14185, 14186, 14187, 14188, 14189,
< 14190, 14191, 14192, 14193, 14194, 14195, 14196, 14201, 14202, 14203, 14205, 14206, 14207, 14209, 14211, 14212, 14213, 14214, 14216, 14217, 14218,
< 14219, 14220, 14222, 14223, 14224, 14225, 14226, 14227, 14228, 14229, 14231, 14232, 14233, 14234, 14235, 14238, 14239, 14240, 14241, 14242, 14243,
< 14244, 14245, 14246, 14248, 14250, 14251, 14253, 14256, 14257, 14259, 14260, 14261, 14262, 14263, 14264, 14265, 14266, 14268, 14269, 14270, 14271,
< 14272, 14274, 14275, 14276, 14277, 14278, 14279, 14280, 14281, 14282, 14283, 14284, 14285, 14286, 14287, 14290, 14291, 14292, 14293, 14294, 14295,
< 14297, 14298, 14299, 14300, 14301, 14302, 14306, 14307, 14308, 14310, 14313, 14314, 14315, 14316, 14317, 14319, 14320, 14321, 14323, 14324, 14325,
< 14327, 14328, 14329, 14332, 14333, 14334, 14335, 14336, 14337, 14338, 14340, 14341, 14342, 14343, 14344, 14347, 14349, 14350, 14351, 14355, 14356,
< 14357, 14358, 14359, 14360, 14361, 14362, 14363, 14366, 14367, 14368, 14369, 14370, 14372, 14375, 14376, 14377, 14379, 14381, 14382, 14383, 14384,
< 14385, 14388, 14390, 14391, 14392, 14393, 14394, 14396, 14399, 14401, 14403, 14404, 14406, 14407, 14408, 14409, 14410, 14411, 14412, 14413, 14414,
< 14417, 14418, 14420, 14421, 14423, 14425, 14427, 14428, 14430, 14431, 14432, 14436, 14438, 14439, 14441, 14443, 14445, 14446, 14450, 14451, 14452,
< 14453, 14454, 14455, 14456, 14458, 14459, 14460, 14461, 14463, 14464, 14467, 14468, 14469, 14470, 14473, 14475, 14478, 14480, 14481, 14488, 14490,
< 14497, 14500, 14505, 14509, 14510, 14512, 14516, 14517, 14521, 14524, 14526, 14527, 14529, 14530, 14531, 14534, 14535, 14536, 14537, 14538, 14539,
< 14541, 14542, 14543, 14544, 14545, 14546, 14548, 14549, 14550, 14551, 14552, 14553, 14554, 14555, 14556, 14557, 14558, 14559, 14560, 14561, 14562,
< 14563, 14564, 14568, 14569, 14571, 14572, 14573, 14575, 14576, 14577, 14578, 14580, 14582, 14583, 14584, 14585, 14586, 14587, 14590, 14592, 14596,
< 14597, 14598, 14600, 14601, 14603, 14607, 14609, 14610, 14611, 14613, 14614, 14615, 14617, 14618, 14619, 14621, 14622, 14623, 14625, 14626, 14630,
< 14631, 14632, 14633, 14634, 14635, 14636, 14637, 14639, 14640, 14641, 14642, 14643, 14644, 14645, 14647, 14664, 14667, 14669, 14671, 14672, 14673,
< 14675, 14676, 14677, 14681, 14682, 14684, 14685, 14686, 14687, 14688, 14689, 14690, 14692, 14693, 14694, 14695, 14697, 14698, 14699, 14700, 14701,
< 14702, 14704, 14706, 14707, 14708, 14709, 14710, 14712, 14713, 14715, 14716, 14717, 14719, 14720, 14721, 14722, 14724, 14725, 14726, 14727, 14729,
< 14730, 14731, 14733, 14734, 14736, 14737, 14738, 14739, 14740, 14741, 14742, 14743, 14745, 14746, 14747, 14748, 14749, 14750, 14751, 14754, 14755,
< 14756, 14758, 14759, 14760, 14761, 14763, 14764, 14766, 14767, 14768, 14770, 14771, 14772, 14773, 14774, 14775, 14779, 14780, 14782, 14783, 14784,
< 14785, 14787, 14788, 14789, 14790, 14793, 14794, 14795, 14796, 14797, 14798, 14799, 14801, 14802, 14805, 14806, 14807, 14808, 14810, 14811, 14812,
< 14813, 14814, 14816, 14817, 14818, 14819, 14820, 14822, 14824, 14825, 14826, 14828, 14829, 14830, 14831, 14852, 14857, 14860, 14866, 14870, 14871,
< 14872, 14873, 14874, 14875, 14876, 14877, 14878, 14880, 14881, 14882, 14883, 14884, 14885, 14886, 14887, 14888, 14890, 14891, 14893, 14897, 14899,
< 14900, 14901, 14902, 14903, 14904, 14905, 14907, 14908, 14909, 14911, 14912, 14913, 14914, 14915, 14916, 14917, 14918, 14919, 14920, 14921, 14922,
< 14923, 14924, 14925, 14926, 14927, 14929, 14930, 14931, 14932, 14934, 14935, 14936, 14937, 14938, 14939, 14940, 14942, 14944, 14945, 14947, 14948,
< 14949, 14954, 14955, 14956, 14957, 14958, 14959, 14965, 14967, 14968, 14970, 14971, 14972, 14973, 14974, 14975, 14976, 14977, 14978, 14979, 14980,
< 14981, 14983, 14985, 14986, 14987, 14989, 14990, 14991, 14993, 14994, 14995, 14997, 14998, 15000, 15001, 15002, 15003, 15004, 15006, 15010, 15011,
< 15012, 15013, 15014, 15016, 15017, 15018, 15019, 15021, 15025, 15027, 15031, 15035, 15042, 15043, 15045, 15047, 15051, 15052, 15053, 15054, 15055,
< 15057, 15060, 15061, 15062, 15064, 15065, 15073, 15074, 15077, 15078, 15079, 15080, 15081, 15082, 15083, 15086, 15090, 15092, 15093, 15097, 15098,
< 15099, 15100, 15101, 15102, 15103, 15104, 15106, 15111, 15113, 15114, 15115, 15116, 15117, 15118, 15120, 15121, 15122, 15123, 15124, 15125, 15127,
< 15128, 15129, 15130, 15133, 15135, 15136, 15138, 15140, 15141, 15144, 15145, 15146, 15147, 15148, 15149, 15150, 15151, 15152, 15153, 15154, 15155,
< 15156, 15160, 15161, 15162, 15163, 15165, 15166, 15167, 15170, 15172, 15174, 15176, 15177, 15179, 15181, 15182, 15183, 15206, 15222, 15223, 15225,
< 15227, 15228, 15231, 15234, 15236, 15238, 15242, 15243, 15244, 15246, 15247, 15249, 15250, 15251, 15252, 15254, 15256, 15257, 15259, 15261, 15262,
< 15264, 15265, 15266, 15267, 15270, 15271, 15273, 15274, 15275, 15276, 15277, 15279, 15281, 15282, 15283, 15286, 15287, 15288, 15289, 15290, 15291,
< 15292, 15293, 15294, 15295, 15296, 15297, 15299, 15301, 15303, 15305, 15306, 15308, 15309, 15311, 15312, 15314, 15315, 15316, 15318, 15319, 15320,
< 15322, 15323, 15324, 15326, 15327, 15328, 15330, 15334, 15335, 15336, 15337, 15339, 15341, 15342, 15343, 15345, 15346, 15348, 15350, 15351, 15353,
< 15354, 15355, 15356, 15358, 15360, 15361, 15362, 15364, 15366, 15367, 15368, 15369, 15370, 15376, 15377, 15378, 15382, 15383, 15386, 15387, 15388,
< 15389, 15391, 15392, 15393, 15394, 15395, 15396, 15397, 15398, 15399, 15402, 15403, 15407, 15409, 15410, 15411, 15412, 15413, 15415, 15416, 15417,
< 15419, 15420, 15421, 15422, 15423, 15425, 15426, 15427, 15428, 15429, 15430, 15431, 15432, 15433, 15434, 15436, 15437, 15438, 15439, 15440, 15442,
< 15443, 15445, 15446, 15447, 15448, 15449, 15450, 15451, 15456, 15457, 15458, 15460, 15461, 15462, 15463, 15464, 15465, 15466, 15467, 15469, 15470,
< 15471, 15473, 15474, 15477, 15478, 15479, 15481, 15482, 15483, 15484, 15485, 15486, 15488, 15489, 15491, 15492, 15494, 15495, 15496, 15497, 15498,
< 15499, 15500, 15501, 15502, 15503, 15504, 15505, 15507, 15509, 15510, 15511, 15514, 15516, 15517, 15519, 15520, 15521, 15527, 15528, 15529, 15530,
< 15550, 15554, 15580, 15587, 15588, 15589, 15590, 15591, 15592, 15593, 15595, 15596, 15597, 15599, 15601, 15603, 15632, 15633, 15634, 15636, 15637,
< 15638, 15639, 15640, 15641, 15643, 15644, 15647, 15652, 15655, 15656, 15657, 15662, 15667, 15668, 15669, 15670, 15673, 15676, 15677, 15678, 15680,
< 15681, 15682, 15683, 15687, 15688, 15689, 15692, 15696, 15697, 15698, 15700, 15701, 15702, 15703, 15704, 15706, 15708, 15709, 15710, 15713, 15714,
< 15715, 15718, 15719, 15720, 15721, 15722, 15724, 15727, 15728, 15729, 15730, 15731, 15733, 15734, 15737, 15738, 15741, 15742, 15748, 15751, 15753,
< 15757, 15762, 15764, 15766, 15767, 15771, 15773, 15774, 15775, 15776, 15777, 15778, 15779, 15780, 15782, 15783, 15784, 15785, 15789, 15790, 15792,
< 15794, 15797, 15799, 15800, 15801, 15803, 15805, 15806, 15807, 15808, 15822, 15824, 15825, 15827, 15828, 15829, 15832, 15834, 15836, 15838, 15840,
< 15843, 15844, 15846, 15851, 15857, 15858, 15859, 15861, 15862, 15863, 15865, 15867, 15870, 15871, 15872, 15873, 15875, 15876, 15877, 15878, 15880,
< 15882, 15883, 15885, 15886, 15888, 15890, 15892, 15893, 15894, 15895, 15897, 15898, 15900, 15901, 15902, 15903, 15904, 15907, 15909, 15910, 15913,
< 15915, 15916, 15917, 15918, 15919, 15920, 15921, 15922, 15923, 15924, 15926, 15927, 15928, 15930, 15931, 15932, 15933, 15935, 15939, 15940, 15941,
< 15943, 15946, 15948, 15949, 15952, 15954, 15955, 15957, 15959, 15960, 15961, 15963, 15965, 15966, 15967, 15969, 15970, 15973, 15975, 15976, 15978,
< 15979, 15980, 15981, 15983, 15986, 15987, 15988, 15989, 15990, 15993, 15997, 15998, 15999, 16002, 16004, 16006, 16008, 16011, 16013, 16017, 16018,
< 16021, 16022, 16023, 16024, 16026, 16028, 16031, 16034, 16036, 16038, 16039, 16040, 16041, 16042, 16043, 16047, 16048, 16051, 16052, 16057, 16058,
< 16059, 16060, 16061, 16063, 16064, 16065, 16066, 16067, 16069, 16071, 16072, 16073, 16075, 16076, 16078, 16079, 16080, 16081, 16088, 16089, 16090,
< 16091, 16092, 16094, 16095, 16096, 16099, 16101, 16102, 16104, 16105, 16106, 16107, 16108, 16109, 16110, 16112, 16113, 16114, 16115, 16116, 16117,
< 16118, 16119, 16121, 16122, 16125, 16126, 16134, 16137, 16138, 16140, 16141, 16142, 16144, 16145, 16147, 16148, 16150, 16151, 16152, 16155, 16158,
< 16159, 16160, 16161, 16162, 16166, 16167, 16168, 16169, 16171, 16172, 16173, 16175, 16176, 16178, 16179, 16180, 16184, 16185, 16186, 16187, 16188,
< 16191, 16196, 16197, 16198, 16199, 16200, 16203, 16204, 16205, 16206, 16207, 16208, 16209, 16210, 16211, 16212, 16214, 16215, 16216, 16218, 16219,
< 16220, 16221, 16222, 16225, 16226, 16227, 16228, 16230, 16231, 16232, 16239, 16242, 16243, 16247, 16250, 16252, 16253, 16254, 16256, 16257, 16258,
< 16260, 16262, 16263, 16265, 16266, 16267, 16270, 16271, 16272, 16274, 16275, 16276, 16277, 16278, 16279, 16280, 16281, 16283, 16285, 16286, 16288,
< 16289, 16290, 16292, 16293, 16295, 16298, 16299, 16301, 16303, 16304, 16305, 16307, 16310, 16312, 16313, 16314, 16315, 16317, 16319, 16320, 16322,
< 16323, 16325, 16326, 16329, 16330, 16331, 16332, 16333, 16335, 16336, 16337, 16338, 16339, 16340, 16341, 16344, 16346, 16347, 16348, 16350, 16352,
< 16355, 16356, 16357, 16358, 16363, 16364, 16370, 16374, 16376, 16378, 16379, 16381, 16382, 16384, 16385, 16386, 16387, 16389, 16391, 16392, 16394,
< 16396, 16403, 16404, 16405, 16406, 16408, 16410, 16411, 16414, 16415, 16416, 16420, 16422, 16424, 16425, 16426, 16431, 16432, 16433, 16434, 16437,
< 16438, 16439, 16440, 16442, 16444, 16445, 16446, 16448, 16451, 16453, 16457, 16458, 16459, 16462, 16464, 16466, 16467, 16468, 16469, 16470, 16471,
< 16472, 16473, 16476, 16477, 16479, 16480, 16481, 16483, 16485, 16486, 16489, 16491, 16492, 16493, 16494, 16495, 16497, 16498, 16499, 16504, 16506,
< 16507, 16508, 16509, 16510, 16511, 16513, 16514, 16515, 16517, 16518, 16519, 16520, 16521, 16522, 16524, 16525, 16526, 16527, 16529, 16530, 16532,
< 16536, 16540, 16542, 16544, 16545, 16546, 16547, 16548, 16549, 16551, 16552, 16553, 16554, 16555, 16557, 16558, 16562, 16563, 16565, 16568, 16569,
< 16570, 16571, 16573, 16576, 16578, 16579, 16581, 16583, 16584, 16585, 16586, 16587, 16588, 16593, 16594, 16645, 16650, 16659, 16664, 16666, 16668,
< 16670, 16672, 16676, 16679, 16680, 16683, 16684, 16685, 16687, 16689, 16690, 16692, 16693, 16694, 16696, 16697, 16724, 16726, 16730, 16731, 16733,
< 16734, 16735, 16736, 16738, 16739, 16741, 16742, 16743, 16744, 16746, 16747, 16749, 16750, 16751, 16752, 16753, 16757, 16759, 16760, 16761, 16762,
< 16763, 16764, 16765, 16769, 16770, 16772, 16776, 16778, 16782, 16783, 16785, 16786, 16787, 16788, 16789, 16793, 16794, 16795, 16797, 16798, 16801,
< 16802, 16803, 16804, 16805, 16807, 16808, 16809, 16813, 16814, 16815, 16816, 16817, 16818, 16819, 16820, 16821, 16823, 16824, 16825, 16826, 16828,
< 16830, 16831, 16832, 16834, 16835, 16836, 16839, 16840, 16841, 16842, 16843, 16845, 16846, 16847, 16848, 16849, 16850, 16851, 16852, 16853, 16854,
< 16855, 16856, 16858, 16864, 16867, 16869, 16872, 16873, 16874, 16875, 16877, 16878, 16879, 16880, 16882, 16883, 16884, 16885, 16886, 16888, 16889,
< 16890, 16891, 16893, 16894, 16895, 16896, 16898, 16901, 16903, 16904, 16906, 16907, 16909, 16910, 16912, 16913, 16916, 16919, 16920, 16921, 16923,
< 16925, 16926, 16927, 16929, 16931, 16932, 16934, 16935, 16937, 16939, 16941, 16942, 16944, 16945, 16946, 16947, 16948, 16949, 16950, 16951, 16952,
< 16955, 16956, 16960, 16962, 16963, 16964, 16965, 16966, 16970, 16973, 16975, 16976, 16978, 16979, 16985, 16986, 16990, 16992, 16993, 16994, 16996,
< 17001, 17002, 17004, 17005, 17009, 17010, 17011, 17013, 17019, 17021, 17022, 17023, 17024, 17027, 17028, 17029, 17030, 17031, 17032, 17033, 17034,
< 17035, 17036, 17037, 17039, 17041, 17043, 17044, 17045, 17046, 17047, 17048, 17052, 17053, 17055, 17056, 17057, 17060, 17065, 17067, 17068, 17070,
< 17072, 17073, 17075, 17076, 17077, 17078, 17079, 17080, 17082, 17083, 17084, 17087, 17088, 17089, 17090, 17091, 17092, 17093, 17095, 17096, 17097,
< 17098, 17099, 17100, 17101, 17102, 17103, 17106, 17108, 17109, 17110, 17111, 17112, 17114, 17116, 17118, 17119, 17120, 17121, 17122, 17123, 17124,
< 17125, 17126, 17128, 17129, 17131, 17132, 17133, 17134, 17135, 17136, 17137, 17138, 17139, 17140, 17141, 17142, 17143, 17144, 17146, 17147, 17149,
< 17150, 17152, 17155, 17156, 17157, 17158, 17159, 17160, 17161, 17162, 17164, 17165, 17166, 17168, 17169, 17170, 17171, 17172, 17173, 17174, 17175,
< 17177, 17178, 17179, 17181, 17182, 17183, 17184, 17185, 17186, 17188, 17190, 17191, 17193, 17194, 17195, 17196, 17197, 17198, 17199, 17201, 17203,
< 17204, 17205, 17206, 17208, 17209, 17210, 17212, 17213, 17214, 17215, 17217, 17218, 17219, 17220, 17222, 17223, 17224, 17226, 17227, 17228, 17229,
< 17231, 17232, 17235, 17237, 17238, 17239, 17240, 17242, 17243, 17244, 17245, 17246, 17249, 17250, 17251, 17252, 17254, 17255, 17256, 17257, 17258,
< 17259, 17260, 17264, 17265, 17266, 17267, 17268, 17269, 17270, 17271, 17274, 17275, 17276, 17279, 17280, 17281, 17282, 17283, 17287, 17295, 17300,
< 17301, 17302, 17303, 17304, 17305, 17306, 17307, 17308, 17309, 17310, 17311, 17312, 17313, 17314, 17316, 17317, 17318, 17320, 17322, 17323, 17324,
< 17325, 17326, 17327, 17328, 17331, 17332, 17333, 17334, 17335, 17336, 17337, 17338, 17339, 17341, 17343, 17344, 17345, 17348, 17349, 17351, 17352,
< 17353, 17354, 17355, 17356, 17357, 17358, 17360, 17361, 17363, 17364, 17365, 17366, 17367, 17368, 17369, 17370, 17371, 17372, 17373, 17379, 17380,
< 17382, 17383, 17386, 17387, 17388, 17389, 17390, 17391, 17393, 17394, 17395, 17396, 17397, 17398, 17400, 17401, 17402, 17404, 17406, 17407, 17408,
< 17409, 17410, 17413, 17414, 17415, 17417, 17418, 17419, 17420, 17421, 17422, 17423, 17426, 17427, 17428, 17429, 17430, 17431, 17432, 17433, 17434,
< 17435, 17438, 17439, 17440, 17441, 17443, 17444, 17447, 17448, 17449, 17451, 17452, 17453, 17455, 17456, 17457, 17458, 17459, 17460, 17461, 17462,
< 17463, 17466, 17467, 17468, 17469, 17471, 17472, 17474, 17475, 17476, 17478, 17479, 17480, 17481, 17482, 17484, 17486, 17487, 17488, 17489, 17491,
< 17492, 17493, 17494, 17495, 17496, 17497, 17498, 17499, 17500, 17501, 17502, 17503, 17504, 17505, 17506, 17508, 17509, 17510, 17511, 17513, 17514,
< 17517, 17518, 17520, 17521, 17522, 17523, 17524, 17525, 17526, 17528, 17529, 17530, 17531, 17532, 17534, 17535, 17536, 17537, 17540, 17541, 17543,
< 17544, 17545, 17547, 17549, 17550, 17552, 17555, 17556, 17557, 17559, 17560, 17561, 17563, 17564, 17566, 17567, 17568, 17569, 17571, 17572, 17573,
< 17575, 17577, 17578, 17579, 17580, 17581, 17582, 17584, 17585, 17586, 17587, 17589, 17590, 17591, 17592, 17594, 17596, 17597, 17598, 17599, 17600,
< 17601, 17602, 17603, 17604, 17605, 17606, 17607, 17608, 17609, 17611, 17612, 17614, 17615, 17616, 17618, 17619, 17620, 17621, 17622, 17623, 17626,
< 17630, 17631, 17633, 17634, 17636, 17637, 17638, 17641, 17644, 17645, 17646, 17647, 17648, 17650, 17651, 17652, 17653, 17655, 17657, 17658, 17660,
< 17661, 17662, 17663, 17664, 17665, 17666, 17667, 17668, 17669, 17670, 17671, 17674, 17675, 17678, 17679, 17680, 17681, 17683, 17684, 17686, 17687,
< 17688, 17689, 17691, 17692, 17693, 17694, 17695, 17696, 17697, 17698, 17699, 17700, 17701, 17702, 17703, 17719, 17720, 17721, 17722, 17723, 17724,
< 17725, 17726, 17727, 17729, 17730, 17731, 17732, 17734, 17736, 17738, 17739, 17742, 17743, 17744, 17745, 17746, 17749, 17751, 17753, 17754, 17755,
< 17756, 17757, 17758, 17759, 17760, 17761, 17762, 17763, 17765, 17766, 17768, 17769, 17771, 17774, 17776, 17779, 17780, 17781, 17783, 17784, 17787,
< 17788, 17789, 17790, 17791, 17792, 17793, 17795, 17797, 17798, 17799, 17800, 17801, 17802, 17805, 17818, 17822, 17823, 17824, 17825, 17827, 17829,
< 17830, 17831, 17833, 17834, 17835, 17840, 17841, 17846, 17847, 17849, 17850, 17851, 17853, 17855, 17856, 17857, 17858, 17860, 17861, 17862, 17865,
< 17866, 17869, 17870, 17871, 17872, 17874, 17875, 17876, 17877, 17955, 17956, 17958, 17960, 17961, 17963, 17965, 17966, 17972, 17973, 17974, 17975,
< 17978, 17983, 17984, 17985, 17986, 17987, 17989, 17990, 17992, 17994, 17996, 17998, 18001, 18005, 18007, 18008, 18009, 18010, 18011, 18014, 18018,
< 18021, 18024, 18026, 18027, 18028, 18030, 18031, 18032, 18034, 18035, 18037, 18039, 18040, 18041, 18044, 18045, 18048, 18049, 18050, 18052, 18054,
< 18057, 18059, 18062, 18202, 18208, 18210, 18212, 18213, 18215, 18218, 18219, 18220, 18224, 18225, 18226, 18228, 18229, 18232, 18233, 18234, 18235,
< 18237, 18238, 18240, 18241, 18242, 18244, 18245, 18246, 18248, 18249, 18250, 18251, 18253, 18257, 18258, 18261, 18263, 18265, 18266, 18267, 18268,
< 18269, 18270, 18272, 18282, 18283, 18285, 18286, 18463, 18465, 18466, 18467, 18468, 18469, 18470, 18472, 18474, 18476, 18479, 18480, 18481, 18482,
< 18484, 18488, 18489, 18490, 18491, 18492, 18495, 18496, 18497, 18499, 18502, 18505, 18506, 18508, 18509, 18510, 18511, 18512, 18514, 18515, 18516,
< 18519, 18520, 18523, 18525, 18526, 18527, 18574, 18575, 18577, 18595, 18603, 18604, 18605, 18607, 18609, 18610, 18612, 18615, 18617, 18619, 18621,
< 18622, 18623, 18625, 18628, 18630, 18631, 18632, 18634, 18636, 18637, 18639, 18643, 18644, 18645, 18646, 18647, 18650, 18651, 18653, 18654, 18657,
< 18658, 18659, 18662, 18663, 18665, 18666, 18668, 18673, 18674, 18676, 18677, 18678, 18679, 18685, 18686, 18687, 18689, 18690, 18692, 18694, 18696,
< 18697, 18699, 18701, 18703, 18704, 18708, 18709, 18710, 18711, 18712, 18713, 18714, 18717, 18719, 18723, 18724, 18731, 18732, 18733, 18737, 18740,
< 18741, 18743, 18746, 18747, 18748, 18750, 18752, 18753, 18754, 18756, 18758, 18760, 18761, 18762, 18763, 18764, 18765, 18766, 18767, 18768, 18769,
< 18770, 18771, 18773, 18777, 18779, 18780, 18781, 18782, 18784, 18786, 18788, 18790, 18792, 18793, 18794, 18795, 18796, 18841, 18845, 18846, 18852,
< 18856, 18860, 18861, 18862, 18863, 18864, 18865, 18867, 18868, 18872, 18873, 18874, 18876, 18882, 18883, 18885, 18900, 18901, 18903, 18907, 18910,
< 18911, 18913, 18915, 18918, 18919, 18920, 18921, 18922, 18923, 18924, 18926, 18927, 18928, 18929, 18930, 18931, 18933, 18935, 18937, 18938, 18941,
<        18944, 18947, 18948, 18949, 18950, 18951, 18952, 18953, 18954, 18955, 18957, 18958, 18959, 18960, // run 3
<        8321, 8334, 8335, 8336, 8341, 8343, 8344, 8348, 8354, 8360, 8361, 8362, 8363, 8364, 8365, 8366, 8368, 8371, 8372, 8373, 8374, 8375, 8377,
< 8378, 8379, 8380, 8382, 8390, 8391, 8404, 8406, 8407, 8408, 8409, 8410, 8411, 8412, 8413, 8414, 8415, 8416, 8418, 8419, 8420, 8421, 8423, 8424, 8427,
< 8430, 8431, 8433, 8434, 8435, 8436, 8438, 8439, 8440, 8441, 8443, 8444, 8445, 8446, 8447, 8448, 8454, 8455, 8458, 8459, 8460, 8461, 8462, 8464, 8465,
< 8467, 8468, 8469, 8470, 8471, 8472, 8473, 8475, 8476, 8487, 8489, 8490, 8492, 8493, 8495, 8498, 8504, 8506, 8507, 8508, 8510, 8513, 8514, 8518, 8520,
< 8522, 8526, 8528, 8529, 8531, 8534, 8536, 8537, 8538, 8539, 8540, 8541, 8543, 8546, 8547, 8548, 8549, 8550, 8553, 8554, 8555, 8556, 8562, 8565, 8566,
< 8567, 8571, 8572, 8573, 8578, 8579, 8580, 8581, 8584, 8585, 8586, 8587, 8588, 8589, 8590, 8601, 8613, 8614, 8615, 8616, 8617, 8618, 8619, 8620, 8621,
< 8622, 8624, 8626, 8627, 8635, 8638, 8644, 8646, 8647, 8648, 8649, 8650, 8652, 8653, 8654, 8655, 8656, 8658, 8659, 8660, 8661, 8663, 8664, 8666, 8668,
< 8669, 8670, 8671, 8672, 8673, 8675, 8677, 8680, 8681, 8682, 8683, 8686, 8687, 8688, 8689, 8690, 8691, 8693, 8695, 8697, 8698, 8699, 8700, 8701, 8702,
< 8703, 8704, 8705, 8706, 8707, 8708, 8709, 8711, 8712, 8714, 8715, 8716, 8718, 8719, 8720, 8721, 8724, 8735, 8736, 8738, 8739, 8740, 8742, 8743, 8744,
< 8745, 8746, 8747, 8748, 8749, 8750, 8751, 8752, 8754, 8755, 8756, 8757, 8758, 8759, 8762, 8763, 8764, 8766, 8767, 8768, 8769, 8770, 8771, 8772, 8773,
< 8774, 8776, 8777, 8778, 8780, 8782, 8783, 8784, 8786, 8787, 8789, 8790, 8791, 8792, 8793, 8794, 8795, 8796, 8797, 8798, 8799, 8800, 8801, 8802, 8804,
< 8806, 8807, 8809, 8810, 8811, 8813, 8814, 8817, 8825, 8830, 8832, 8836, 8841, 8852, 8853, 8855, 8856, 8857, 8859, 8860, 8861, 8862, 8863, 8866, 8867,
< 8868, 8873, 8874, 8876, 8877, 8878, 8879, 8882, 8883, 8885, 8886, 8888, 8889, 8890, 8891, 8893, 8894, 8897, 8899, 8900, 8902, 8903, 8904, 8905, 8906,
< 8907, 8908, 8909, 8911, 8912, 8914, 8915, 8917, 8918, 8919, 8920, 8921, 8922, 8923, 8925, 8926, 8927, 8928, 8931, 8934, 8935, 8936, 8937, 8938, 8939,
< 8940, 8941, 8943, 8954, 8955, 8957, 8958, 8959, 8960, 8962, 8963, 8964, 8966, 8968, 8971, 8972, 8974, 8975, 8976, 8977, 8979, 8981, 8982, 8987, 8989,
< 8990, 8991, 8993, 8994, 8995, 8996, 8997, 8998, 8999, 9001, 9002, 9004, 9005, 9007, 9008, 9009, 9014, 9018, 9022, 9023, 9024, 9025, 9026, 9028, 9030,
< 9033, 9034, 9035, 9037, 9038, 9039, 9040, 9041, 9044, 9049, 9050, 9052, 9053, 9055, 9056, 9057, 9059, 9060, 9061, 9062, 9063, 9064, 9065, 9066, 9067,
< 9068, 9069, 9072, 9073, 9074, 9075, 9076, 9079, 9080, 9081, 9083, 9084, 9085, 9087, 9088, 9089, 9090, 9092, 9093, 9094, 9095, 9096, 9108, 9109, 9113,
< 9114, 9116, 9134, 9136, 9138, 9142, 9144, 9146, 9148, 9149, 9158, 9169, 9175, 9186, 9188, 9191, 9192, 9194, 9195, 9196, 9199, 9201, 9202, 9203, 9205,
< 9206, 9207, 9208, 9209, 9210, 9212, 9214, 9215, 9216, 9217, 9218, 9223, 9225, 9226, 9228, 9230, 9231, 9232, 9233, 9236, 9237, 9238, 9239, 9240, 9241,
< 9242, 9243, 9245, 9246, 9247, 9249, 9250, 9252, 9254, 9255, 9262, 9265, 9266, 9267, 9268, 9269, 9272, 9273, 9275, 9277, 9278, 9279, 9280, 9281, 9282,
< 9284, 9285, 9286, 9287, 9288, 9289, 9290, 9291, 9292, 9293, 9295, 9297, 9298, 9299, 9300, 9301, 9302, 9303, 9304, 9305, 9307, 9308, 9310, 9311, 9313,
< 9316, 9317, 9319, 9320, 9321, 9324, 9325, 9326, 9327, 9328, 9329, 9331, 9332, 9333, 9336, 9337, 9338, 9340, 9341, 9343, 9344, 9345, 9346, 9347, 9348,
< 9349, 9350, 9351, 9354, 9356, 9358, 9360, 9361, 9362, 9363, 9364, 9366, 9367, 9369, 9370, 9372, 9373, 9374, 9375, 9377, 9378, 9379, 9383, 9384, 9385,
< 9386, 9390, 9391, 9392, 9394, 9395, 9396, 9397, 9398, 9401, 9403, 9404, 9405, 9406, 9407, 9408, 9410, 9411, 9412, 9414, 9415, 9416, 9417, 9421, 9422,
< 9423, 9425, 9427, 9428, 9429, 9431, 9432, 9433, 9434, 9435, 9436, 9437, 9438, 9439, 9440, 9442, 9444, 9445, 9446, 9447, 9448, 9449, 9452, 9453, 9454,
< 9456, 9457, 9458, 9459, 9460, 9461, 9463, 9464, 9465, 9466, 9467, 9468, 9470, 9471, 9472, 9473, 9474, 9477, 9479, 9480, 9481, 9482, 9483, 9485, 9486,
< 9488, 9489, 9491, 9492, 9494, 9497, 9498, 9499, 9500, 9501, 9503, 9504, 9505, 9506, 9507, 9508, 9509, 9510, 9511, 9512, 9513, 9515, 9516, 9517, 9518,
< 9519, 9521, 9523, 9524, 9525, 9526, 9527, 9529, 9530, 9531, 9532, 9533, 9534, 9535, 9536, 9538, 9539, 9542, 9543, 9545, 9546, 9548, 9550, 9551, 9553,
< 9554, 9556, 9557, 9558, 9559, 9560, 9561, 9562, 9563, 9564, 9565, 9567, 9569, 9570, 9571, 9572, 9573, 9574, 9575, 9576, 9577, 9578, 9579, 9580, 9581,
< 9582, 9583, 9584, 9585, 9586, 9587, 9589, 9590, 9591, 9592, 9593, 9594, 9595, 9597, 9598, 9599, 9601, 9602, 9603, 9604, 9605, 9607, 9608, 9609, 9610,
< 9612, 9613, 9614, 9615, 9617, 9618, 9619, 9620, 9621, 9627, 9628, 9629, 9630, 9631, 9632, 9633, 9634, 9636, 9637, 9639, 9640, 9644, 9645, 9649, 9650,
< 9651, 9653, 9654, 9655, 9656, 9657, 9658, 9660, 9661, 9662, 9665, 9667, 9668, 9669, 9670, 9672, 9674, 9675, 9677, 9678, 9679, 9681, 9682, 9683, 9684,
< 9685, 9689, 9690, 9694, 9695, 9696, 9698, 9699, 9700, 9702, 9703, 9704, 9706, 9708, 9709, 9710, 9712, 9713, 9716, 9717, 9718, 9719, 9720, 9721, 9722,
< 9724, 9725, 9726, 9727, 9729, 9730, 9741, 9742, 9744, 9749, 9750, 9751, 9757, 9758, 9760, 9761, 9762, 9765, 9767, 10307, 10308, 10353, 10354, 10355,
< 10356, 10357, 10359, 10362, 10363, 10366, 10371, 10374, 10375, 10379, 10380, 10381, 10382, 10383, 10385, 10386, 10389, 10390, 10394, 10396, 10432,
< 10433, 10434, 10436, 10437, 10438, 10439, 10441, 10442, 10444, 10445, 10446, 10447, 10448, 10449, 10450, 10452, 10453, 10471, 10472, 10473, 10475,
< 10478, 10479, 10480, 10481, 10482, 10483, 10484, 10485, 10486, 10487, 10488, 10489, 10490, 10491, 10492, 10493, 10500, 10501, 10502, 10504, 10505,
< 10508, 10512, 10516, 10517, 10518, 10519, 10520, 10521, 10522, 10523, 10525, 10529, 10530, 10532, 10533, 10534, 10535, 10537, 10538, 10540, 10544,
< 10545, 10546, 10547, 10551, 10553, 10555, 10556, 10558, 10560, 10561, 10562, 10563, 10565, 10567, 10568, 10569, 10570, 10571, 10573, 10574, 10575,
< 10577, 10578, 10579, 10580, 10581, 10583, 10584, 10585, 10586, 10590, 10591, 10592, 10593, 10594, 10595, 10597, 10598, 10599, 10600, 10601, 10602,
< 10603, 10605, 10606, 10608, 10609, 10610, 10611, 10612, 10613, 10616, 10618, 10622, 10623, 10624, 10625, 10626, 10627, 10629, 10630, 10631, 10633,
< 10634, 10635, 10639, 10640, 10641, 10643, 10644, 10645, 10646, 10647, 10648, 10649, 10652, 10654, 10655, 10656, 10657, 10658, 10660, 10662, 10663,
< 10665, 10666, 10667, 10668, 10669, 10670, 10672, 10673, 10674, 10675, 10678, 10680, 10681, 10682, 10683, 10685, 10687, 10688, 10689, 10690, 10692,
< 10693, 10694, 10695, 10696, 10697, 10698, 10700, 10701, 10702, 10704, 10705, 10706, 10707, 10708, 10710, 10711, 10712, 10713, 10714, 10716, 10719,
< 10720, 10721, 10724, 10725, 10726, 10727, 10728, 10729, 10730, 10732, 10733, 10734, 10735, 10736, 10737, 10741, 10743, 10744, 10745, 10746, 10747,
< 10748, 10750, 10752, 10755, 10756, 10757, 10758, 10760, 10761, 10762, 10763, 10764, 10765, 10766, 10767, 10768, 10769, 10771, 10772, 10773, 10774,
< 10778, 10781, 10782, 10784, 10786, 10787, 10788, 10789, 10790, 10791, 10792, 10793, 10794, 10795, 10796, 10797, 10798, 10799, 10800, 10801, 10803,
< 10804, 10805, 10807, 10809, 10810, 10811, 10813, 10815, 10816, 10818, 10819, 10820, 10821, 10822, 10823, 10824, 10827, 10828, 10829, 10830, 10831,
< 10832, 10833, 10834, 10836, 10837, 10838, 10839, 10840, 10841, 10842, 10843, 10844, 10845, 10846, 10847, 10848, 10849, 10850, 10855, 10856, 10857,
< 10858, 10861, 10862, 10863, 10864, 10865, 10867, 10868, 10869, 10870, 10873, 10874, 10877, 10878, 10881, 10882, 10883, 10884, 10885, 10886, 10887,
< 10888, 10890, 10892, 10893, 10894, 10897, 10898, 10900, 10901, 10902, 10903, 10905, 10906, 10908, 10910, 10911, 10913, 10918, 10920, 10921, 10922,
< 10923, 10924, 10925, 10926, 10927, 10928, 10929, 10931, 10933, 10936, 10937, 10938, 10939, 10940, 10942, 10946, 10947, 10948, 10949, 10950, 10951,
< 10952, 10953, 10954, 10955, 10956, 10958, 10959, 10960, 10961, 10963, 10965, 10966, 10967, 10968, 10969, 10970, 10971, 10972, 10973, 10974, 10975,
< 10976, 10979, 10983, 10984, 10987, 10988, 10989, 10990, 10991, 10992, 10993, 10994, 10995, 10997, 10998, 11000, 11001, 11002, 11005, 11024, 11025,
< 11026, 11027, 11029, 11030, 11031, 11032, 11036, 11039, 11041, 11042, 11044, 11045, 11046, 11047, 11048, 11049, 11050, 11059, 11064, 11065, 11066,
< 11067, 11068, 11069, 11070, 11071, 11072, 11073, 11074, 11075, 11076, 11077, 11078, 11080, 11081, 11083, 11085, 11086, 11087, 11088, 11090, 11091,
< 11093, 11094, 11095, 11096, 11103, 11108, 11110, 11111, 11112, 11115, 11116, 11118, 11119, 11120, 11127, 11128, 11129, 11131, 11132, 11133, 11134,
< 11135, 11137, 11138, 11139, 11141, 11142, 11143, 11144, 11145, 11146, 11147, 11149, 11150, 11153, 11154, 11157, 11162, 11164, 11166, 11168, 11169,
< 11170, 11171, 11172, 11173, 11174, 11176, 11177, 11179, 11182, 11184, 11186, 11187, 11188, 11189, 11190, 11192, 11193, 11194, 11196, 11197, 11198,
< 11201, 11202, 11203, 11204, 11205, 11206, 11208, 11210, 11211, 11212, 11213, 11214, 11215, 11217, 11218, 11219, 11224, 11225, 11226, 11227, 11228,
< 11229, 11230, 11232, 11233, 11234, 11235, 11236, 11237, 11238, 11239, 11240, 11242, 11243, 11244, 11247, 11249, 11253, 11255, 11256, 11259, 11260,
< 11263, 11264, 11265, 11269, 11270, 11271, 11274, 11275, 11278, 11279, 11281, 11282, 11283, 11284, 11285, 11286, 11288, 11290, 11291, 11292, 11293,
< 11294, 11296, 11297, 11492, 11493, 11494, 11495, 11500, 11501, 11502, 11503, 11504, 11505, 11506, 11507, 11508, 11509, 11510, 11512, 11514, 11515,
< 11518, 11519, 11520, 11521, 11524, 11526, 11527, 11528, 11529, 11531, 11532, 11535, 11537, 11538, 11539, 11540, 11543, 11544, 11545, 11546, 11550,
< 11551, 11553, 11554, 11557, 11558, 11559, 11561, 11564, 11565, 11568, 11570, 11571, 11572, 11574, 11575, 11576, 11577, 11578, 11579, 11581, 11582,
< 11583, 11584, 11586, 11587, 11589, 11591, 11593, 11598, 11599, 11601, 11603, 11604, 11605, 11606, 11608, 11609, 11610, 11611, 11613, 11614, 11617,
< 11618, 11619, 11621, 11622, 11623, 11624, 11625, 11626, 11628, 11629, 11630, 11631, 11632, 11634, 11636, 11637, 11638, 11639, 11640, 11644, 11646,
< 11647, 11648, 11649, 11650, 11652, 11653, 11655, 11656, 11657, 11658, 11659, 11660, 11664, 11665, 11666, 11667, 11668, 11672, 11673, 11674, 11675,
< 11677, 11678, 11679, 11680, 11681, 11682, 11684, 11685, 11686, 11687, 11691, 11692, 11693, 11695, 11696, 11698, 11700, 11702, 11707, 11709, 11710,
< 11712, 11713, 11714, 11715, 11716, 11719, 11720, 11721, 11723, 11724, 11726, 11727, 11728, 11729, 11730, 11733, 11737, 11738, 11739, 11740, 11741,
< 11742, 11744, 11745, 11746, 11747, 11749, 11751, 11753, 11754, 11755, 11756, 11758, 11759, 11761, 11762, 11763, 11765, 11766, 11767, 11769, 11771,
< 11772, 11774, 11775, 11776, 11777, 11778, 11779, 11780, 11781, 11782, 11783, 11784, 11785, 11786, 11787, 11791, 11792, 11793, 11794, 11795, 11796,
< 11797, 11799, 11800, 11801, 11802, 11803, 11804, 11807, 11809, 11811, 11813, 11814, 11815, 11816, 11817, 11818, 11819, 11820, 11821, 11822, 11824,
< 11828, 11829, 11830, 11831, 11832, 11833, 11836, 11840, 11841, 11842, 11844, 11845, 11846, 11847, 11848, 11849, 11851, 11852, 11853, 11854, 11857,
< 11858, 11861, 11865, 11866, 11867, 11868, 11869, 11870, 11872, 11873, 11874, 11875, 11876, 11878, 11879, 11880, 11881, 11882, 11884, 11885, 11886,
< 11887, 11888, 11889, 11891, 11892, 11893, 11894, 11895, 11896, 11897, 11898, 11900, 11901, 11904, 11905, 11906, 11907, 11909, 11910, 11911, 11912,
< 11913, 11914, 11915, 11917, 11919, 11920, 11921, 11922, 11923, 11924, 11925, 11926, 11927, 11928, 11929, 11930, 11931, 11933, 11934, 11935, 11936,
< 11937, 11938, 11939, 11940, 11943, 11945, 11946, 11947, 11952, 11953, 11956, 11957, 11958, 11959, 11960, 11961, 11963, 11964, 11965, 11969, 11970,
< 11971, 11972, 11973, 11974, 11976, 11977, 11979, 11981, 11984, 11988, 11989, 11990, 11991, 11993, 11994, 11995, 11996, 11998, 12000, 12001, 12002,
< 12004, 12005, 12006, 12008, 12009, 12010, 12011, 12012, 12013, 12015, 12016, 12017, 12020, 12021, 12023, 12024, 12025, 12026, 12027, 12028, 12029,
< 12030, 12031, 12032, 12034, 12036, 12039, 12040, 12041, 12042, 12043, 12044, 12045, 12046, 12048, 12052, 12053, 12054, 12056, 12057, 12060, 12061,
< 12062, 12063, 12066, 12067, 12068, 12069, 12070, 12071, 12072, 12073, 12075, 12076, 12077, 12079, 12080, 12083, 12084, 12086, 12089, 12090, 12091,
< 12093, 12094, 12095, 12097, 12098, 12100, 12102, 12103, 12104, 12106, 12107, 12108, 12109, 12110, 12111, 12116, 12117, 12118, 12120, 12121, 12122,
< 12125, 12127, 12130, 12131, 12132, 12133, 12135, 12136, 12137, 12139, 12140, 12142, 12143, 12145, 12146, 12331, 12364, 12365, 12366, 12367, 12368,
< 12369, 12374, 12377, 12378, 12379, 12380, 12381, 12382, 12383, 12384, 12389, 12392, 12401, 12402, 12403, 12404, 12406, 12418, 12419, 12420, 12422,
< 12425, 12426, 12429, 12430, 12431, 12432, 12433, 12434, 12436, 12438, 12441, 12442, 12444, 12446, 12447, 12448, 12449, 12450, 12451, 12453, 12454,
< 12456, 12459, 12460, 12461, 12462, 12464, 12466, 12469, 12479, 12480, 12481, 12482, 12485, 12486, 12492, 12493, 12495, 12496, 12497, 12498, 12499,
< 12502, 12503, 12504, 12505, 12506, 12507, 12508, 12513, 12514, 12515, 12516, 12517, 12518, 12520, 12521, 12522, 12526, 12527, 12528, 12529, 12530,
< 12533, 12534, 12535, 12537, 12538, 12539, 12540, 12541, 12542, 12543, 12544, 12545, 12549, 12550, 12551, 12552, 12553, 12554, 12555, 12556, 12557,
< 12558, 12560, 12561, 12565, 12566, 13452, 13453, 13454, 13455, 13457, 13460, 13461, 13462, 13463, 13464, 13465, 13466, 13467, 13468, 13469, 13470,
< 13471, 13472, 13473, 13474, 13475, 13476, 13477, 13478, 13479, 13480, 13481, 13483, 13484, 13487, 13488, 13491, 13492, 13503, 13504, 13505, 13506,
< 13507, 13509, 13510, 13511, 13517, 13518, 13519, 13520, 13521, 13522, 13523, 13524, 13525, 13526, 13527, 13528, 13529, 13530, 13531, 13532, 13533,
< 13535, 13536, 13537, 13538, 13539, 13540, 13542, 13543, 13544, 13545, 13546, 13547, 13548, 13549, 13550, 13552, 13553, 13554, 13555, 13557, 13558,
< 13559, 13561, 13562, 13563, 13564, 13565, 13567, 13568, 13569, 13570, 13571, 13572, 13573, 13574, 13579, 13580, 13582, 13583, 13584, 13586, 13587,
< 13588, 13591, 13592, 13593, 13612, 13614, 13616, 13617, 13618, 13619, 13620, 13621, 13623, 13624, 13625, 13626, 13627, 13629, 13630, 13631, 13632,
< 13633, 13634, 13635, 13636, 13637, 13638, 13639, 13641, 13642, 13643, 13644, 13645, 13647, 13648, 13649, 13650, 13651, 13652, 13653, 13654, 13655,
< 13656, 13658, 13659, 13660, 13661, 13662, 13664, 13665, 13667, 13668, 13669, 13670, 13671, 13672, 13674, 13675, 13676, 13678, 13680, 13681, 13683,
<        13684, 13685, 13687, 13688, 13689, 13690, 13691, 13692, 13693, 13695, 13696 // run 2
<       };
---
> 7764, 7765, 7766, 7767, 7768, 7769, 7770};
373,381d134
< 
<    std::vector<int> low_lifetime_runs{5262, 5263, 5264, 5265, 5266, 5267, 5269, 5270, 5271, 5272, 5273, 5274, 5275, 5277, 5278, 5279, 5280, 5281,
< 5315, 5320, 5321, 5632, 5634, 5635, 5636, 5637, 5638, 5639, 5643, 5646, 5647, 5650, 5652, 5653, 5654, 5656, 5657, 5659, 5661, 5680, 5684, 5685, 5686,
< 5691, 5693, 5694, 5695, 5697, 5698, 5699, 5702, 5703, 5704, 5705, 5706, 5707, 5708, 5709, 5710, 5712, 5713, 5715, 5718, 5719, 5720, 5721, 5722, 5723,
< 5724, 5725, 5726, 5727, 5728, 5729, 5730, 5731, 5733, 5735, 5739, 5740, 5741, 5743, 5745, 5746, 5748, 5749, 5752, 5753, 5754, 5755, 5756, 5758, 5760,
<       5761, 5762, 5765, 5766, 5767, // run 1 low electron lifetime runs
<       14643, 14644, 14645, 14646, 14647, 14648, 14649, 14650, 14651, 14652, 14653, 14654, 14655, 14656, 14657, 14658, 14659, 14660, 14661, 14662, 14663, 14664, 14665, 14666, 14667, 14668, 14669, 14670, 14671, 14672, 14673, 14674, 14675, 14676, 14677, 14678, 14679, 14680, 14681, 14682, 14683, 14684, 14685, 14686, 14687, 14688, 14689, 14690, 14691, 14692, 14693, 14694, 14695, 14696, 14697, 14698, 14699, 14700, 14701, 14702, 14703, 14704, 14705, 14706, 14707, 14708, 14709, 14710, 14711, 14712, 14713, 14714, 14715, 14716, 14717, 14718, 14719, 14720, 14721, 14722, 14723, 14724, 14725, 14726, 14727, 14728, 14729, 14730, 14731, 14732, 14733, 14734, 14735, 14736, 16724, 16725, 16726, 16727, 16728, 16729, 16730, 16731, 16732, 16733, 16734, 16735, 16736, 16737, 16738, 16739, 16740, 16741, 16742, 16743, 16744, 16745, 16746, 16747, 16748, 16749, 16750, 16751, 16752, 16753, 16754, 16755, 16756, 16757, 16758, 16759, 16760, 16761, 16762, 16763, 16764, 16765, 16766, 16767, 16768, 16769, 16770, 16771, 16772, 16773, 16774, 16775, 16776, 16777, 16778, 16779, 16780, 16781, 16782, 16783 // run 3 low electron lifetime runs
<       };
<   std::set<int> low_lifetime_set(low_lifetime_runs.begin(), low_lifetime_runs.end());
732d484
<     if (low_lifetime_set.find(eval.run) != low_lifetime_set.end()) continue;
734,743c486,487
<     if (filter_level==1 && (pot.runNo > 6748 && pot.runNo <=7001 || // RHC
< 			    pot.runNo >=10140 && pot.runNo <= 11949 ||
< 			    pot.runNo >= 13697 && pot.runNo <=17566 ||
< 			    pot.runNo >= 19668 && pot.runNo <=21410 
< 			    ) ) continue;
<     if (filter_level!=1 && (pot.runNo <=6748 || // FHC
< 			    pot.runNo >=8784 && pot.runNo <=10139 ||
< 			    pot.runNo >= 21411 && pot.runNo <= 23259 ||
< 			    pot.runNo >= 24256 && pot.runNo <= 25763
< 			    )) continue;
---
>     if (filter_level==1 && pot.runNo > 6748 && pot.runNo <=7001) continue;
>     if (filter_level!=1 && pot.runNo <=6748) continue;
diff -r wcp-uboone-bdt/apps/plot_hist.cxx wcp-uboone-bdt_older/apps/plot_hist.cxx
133d132
<   
268a268
>     //std::cout << "lhagaman debug 101\n";
269a270
>     //std::cout << "lhagaman debug 102\n";
270a272
>     //std::cout << "lhagaman debug 1001\n";
276a279
>     //std::cout << "lhagaman debug 1002\n";
278c281
< 
---
>     //std::cout << "lhagaman debug 103\n";
358d360
< 
925,927c927,929
<         TPad *pad1 = new TPad("pad1", "", 0.01,0.3,0.99,0.99,0,0,0);
<         TPad *pad2 = new TPad("pad2", "", 0.01,0.01,0.99,0.3,0,0,0);
<         pad1->SetBottomMargin(0);
---
>         TPad *pad1 = new TPad("pad1", "", 0.01,0.3,0.99,0.99,0,0,0); // lhagaman 2022_03_21, changing first num from 0.01 to 0.02 in this and the next line
>         TPad *pad2 = new TPad("pad2", "", 0.01,0.01,0.99,0.29,0,0,0);
>         pad1->SetBottomMargin(0.03); // changed from 0, lhagaman 08/17/21
930c932
<         pad2->SetTopMargin(0.05);
---
>         pad2->SetTopMargin(0.06); // changed from 0.05, lhagaman 08/17/21
933c935
<         pad2->SetBottomMargin(0.20);
---
>         pad2->SetBottomMargin(0.3); //  changing from 0.2, lhagaman 2022_03_21
937,938c939,949
<         legend[obschannel-1] = new TLegend(0.3, 0.65, 0.85, 0.92);
<         TH1F* hdata = (TH1F*)map_obsch_histos[obschannel].at(0)->Clone("hdata");
---
>         //legend[obschannel-1] = new TLegend(0.25, 0.55, 0.88, 0.9); // changed x1 from 0.3, x2 from 0.85, changed y1 from 0.65, lhagaman 08/17/21
>         //legend[obschannel-1] = new TLegend(0.35, 0.55, 0.88, 0.93); // changed x1 from 0.3, x2 from 0.85, changed y1 from 0.65, lhagaman 08/17/21
> 	//legend[obschannel-1]->SetBorderSize(1);
> 	//legend[obschannel-1]->SetFillColor(3);
> 	
> 	legend[obschannel-1] = new TLegend(0.2, 0.55, 0.9, 0.92); // lhagaman 2022_04_20
> 	//legend[obschannel-1] = new TLegend(0.3, 0.55, 0.9, 0.92); // lhagaman 2022_03_21
> 	legend[obschannel-1]->SetFillStyle(0);
> 	//legend[obschannel-1]->SetTextSize(0.035);
> 	legend[obschannel-1]->SetTextSize(0.042); // lhagaman 2022_03_21   // lhagaman 2022_05_20 changed from 0.042, then back from 0.05
> 	TH1F* hdata = (TH1F*)map_obsch_histos[obschannel].at(0)->Clone("hdata");
963a975,981
> 	
> 	TH1F* hNCDeltainFV = (TH1F*)hdata->Clone("hNCDeltainFV");
>         TH1F* hNC1Pi0inFV = (TH1F*)hdata->Clone("hNC1Pi0inFV");
>         TH1F* hnumuCC1Pi0inFV = (TH1F*)hdata->Clone("hnumuCC1Pi0inFV");
>         TH1F* hnumuCCotherinFV = (TH1F*)hdata->Clone("hnumuCCotherinFV");
>         TH1F* hNCotherinFV = (TH1F*)hdata->Clone("hNCotherinFV");		
> 
988a1007,1013
> 
> 	hNCDeltainFV->Reset();
> 	hNC1Pi0inFV->Reset();
> 	hnumuCC1Pi0inFV->Reset();
> 	hnumuCCotherinFV->Reset();
> 	hNCotherinFV->Reset();
> 
1130a1156,1181
> 
> 		if(line == "NCDeltainFV") {
>                     std::cout<<"NCDeltainFV"<<" "<<histname<<std::endl;
>                     hNCDeltainFV->Add(htemp);
>                     break;
>                 }
> 		if(line == "NC1Pi0inFV") {
>                     std::cout<<"NC1Pi0inFV"<<" "<<histname<<std::endl;
>                     hNC1Pi0inFV->Add(htemp);
>                     break;
>                 }
> 		if(line == "numuCC1Pi0inFV") {
>                     std::cout<<"numuCC1Pi0inFV"<<" "<<histname<<std::endl;
>                     hnumuCC1Pi0inFV->Add(htemp);
>                     break;
>                 }
> 		if(line == "numuCCotherinFV") {
>                     std::cout<<"numuCCotherinFV"<<" "<<histname<<std::endl;
>                     hnumuCCotherinFV->Add(htemp);
>                     break;
>                 }
> 		if(line == "NCotherinFV") {
>                     std::cout<<"NCotherinFV"<<" "<<histname<<std::endl;
>                     hNCotherinFV->Add(htemp);
>                     break;
>                 }
1143a1195,1199
> 	
> 	TH1F* hmc = (TH1F*)map_obsch_histos[obschannel].at(1)->Clone("hmc");
>         TH1F* hmc2 = (TH1F*)map_obsch_histos[obschannel].at(2)->Clone("hmc2");
>         TH1F* hmcerror = (TH1F*)hmc->Clone("hmcerror");
> 
1147,1149c1203,1225
<         // numi channels
<         if(obschannel==999) legend[obschannel-1]->AddEntry((TObject*)0, Form("NuMI POT: %.3e", datapot_numi*scalePOT), "");
<         else legend[obschannel-1]->AddEntry((TObject*)0, Form("Data POT: %.3e", datapot*scalePOT), "");
---
>         
> 	bool fakedata5 = 0;
> 	bool fakedata7 = 0;
> 	bool fakedata8 = 0;
> 	bool numidata = 0;
> 	bool nodata = 0;
>         if (nodata) {
> 		
> 	} else if (fakedata5) {
> 		legend[obschannel-1]->AddEntry((TObject*)0, Form("%.3e POT Fake Data Set 5, %.1f", datapot*scalePOT, hdata->Integral()*scalePOT), "");
>         } else if (fakedata7) {
> 		legend[obschannel-1]->AddEntry((TObject*)0, Form("%.3e POT Fake Data Set 7, %.1f", datapot*scalePOT, hdata->Integral()*scalePOT), "");
>         } else if (fakedata8) {
>                 legend[obschannel-1]->AddEntry((TObject*)0, Form("%.3e POT Fake Data Set 8, %.1f", datapot*scalePOT, hdata->Integral()*scalePOT), "");
>         } else if (numidata) {
>                 legend[obschannel-1]->AddEntry((TObject*)0, Form("%.3e POT NuMI run1 FHC Data, %.1f", datapot*scalePOT, hdata->Integral()*scalePOT), "");
> 	} else {
> 		if(obschannel==999) legend[obschannel-1]->AddEntry((TObject*)0, Form("%.3e POT NuMI Data, %.1f", datapot_numi*scalePOT, hdata->Integral()*scalePOT),"");
> 	        else legend[obschannel-1]->AddEntry((TObject*)0, Form("%.3e POT BNB Data, %.1f", datapot*scalePOT, hdata->Integral()*scalePOT), "");
> 	}
>  
> 
> 	// numi channels
1151,1152c1227,1233
<         legend[obschannel-1]->AddEntry((TObject*)0, Form("#chi^{2}/ndf=%.2f/%d", GOF[obschannel-1].first, GOF[obschannel-1].second), "");
<         legend[obschannel-1]->AddEntry(gr[obschannel-1], Form("BNB data, %.1f", hdata->Integral()*scalePOT), "lp");
---
>         if (!nodata) {
> 		legend[obschannel-1]->AddEntry((TObject*)0, Form("#chi^{2}/ndf=%.2f/%d, p=%.3f", GOF[obschannel-1].first, GOF[obschannel-1].second, TMath::Prob(GOF[obschannel-1].first, GOF[obschannel-1].second)), "");
> 	}
> 	//legend[obschannel-1]->AddEntry((TObject*)0, Form("#chi^{2}/ndf=%.2f/%d", GOF[obschannel-1].first, GOF[obschannel-1].second), "");
>         // added by lhagaman 2021_08_04
>         legend[obschannel-1]->AddEntry((TObject*)0, Form("Total Pred, %.1f", hmc->Integral()), "");
>         //legend[obschannel-1]->AddEntry(gr[obschannel-1], Form("%.3e POT BNB DATA, %.1f", datapot*scalePOT, hdata->Integral()*scalePOT)), "lp");
1154a1236
> 	
1156,1159c1238
<         TH1F* hmc = (TH1F*)map_obsch_histos[obschannel].at(1)->Clone("hmc");
<         TH1F* hmc2 = (TH1F*)map_obsch_histos[obschannel].at(2)->Clone("hmc2");
<         TH1F* hmcerror = (TH1F*)hmc->Clone("hmcerror");
<         legend[obschannel-1]->AddEntry(hmcerror, "Pred. uncertainty", "lf");
---
>         legend[obschannel-1]->AddEntry(hmcerror, "Pred. Uncertainty", "lf");
1388a1468,1542
> 	if (flag_truthlabel==3) {
> 
> 
> 	hstack[obschannel-1]->Add(hNCDeltainFV);
>         legend[obschannel-1]->AddEntry(hNCDeltainFV, Form("NC #Delta#rightarrowN#gamma, %.1f", hNCDeltainFV->Integral()), "F");
>         hNCDeltainFV->SetFillStyle(1001);
>         hNCDeltainFV->SetFillColorAlpha(kYellow-7, 0.5);
>         hNCDeltainFV->SetLineColor(kBlack);
>         hNCDeltainFV->SetLineWidth(1);
> 
> 	hstack[obschannel-1]->Add(hNC1Pi0inFV);
>         legend[obschannel-1]->AddEntry(hNC1Pi0inFV, Form("NC 1#pi^{0}, %.1f", hNC1Pi0inFV->Integral()), "F");
>         hNC1Pi0inFV->SetFillStyle(1001);
>         hNC1Pi0inFV->SetFillColorAlpha(kRed-4, 0.5);
>         hNC1Pi0inFV->SetLineColor(kBlack);
>         hNC1Pi0inFV->SetLineWidth(1);
> 
> 	hstack[obschannel-1]->Add(hnumuCC1Pi0inFV);
>         legend[obschannel-1]->AddEntry(hnumuCC1Pi0inFV, Form("#nu_{#mu}CC 1#pi^{0}, %.1f", hnumuCC1Pi0inFV->Integral()), "F");
>         hnumuCC1Pi0inFV->SetFillStyle(1001);
>         hnumuCC1Pi0inFV->SetFillColorAlpha(kBlue-4, 0.5);
>         hnumuCC1Pi0inFV->SetLineColor(kBlack);
>         hnumuCC1Pi0inFV->SetLineWidth(1);
>         
> 	hstack[obschannel-1]->Add(hnueCCinFV);
>         legend[obschannel-1]->AddEntry(hnueCCinFV, Form("#nu_{e}CC, %.1f", hnueCCinFV->Integral()), "F");
>         hnueCCinFV->SetFillStyle(1001);
>         hnueCCinFV->SetFillColorAlpha(kMagenta-3, 0.5);
>         hnueCCinFV->SetLineColor(kBlack);
>         hnueCCinFV->SetLineWidth(1);
> 
> 	hstack[obschannel-1]->Add(hnumuCCotherinFV);
>         legend[obschannel-1]->AddEntry(hnumuCCotherinFV, Form("#nu_{#mu}CC Other, %.1f", hnumuCCotherinFV->Integral()), "F");
>         hnumuCCotherinFV->SetFillStyle(1001);
>         hnumuCCotherinFV->SetFillColorAlpha(kOrange+1, 0.5);
>         hnumuCCotherinFV->SetLineColor(kBlack);
>         hnumuCCotherinFV->SetLineWidth(1);
> 
> 	hstack[obschannel-1]->Add(hNCotherinFV);
>         legend[obschannel-1]->AddEntry(hNCotherinFV, Form("NC Other, %.1f", hNCotherinFV->Integral()), "F");
>         hNCotherinFV->SetFillStyle(1001);
>         hNCotherinFV->SetFillColorAlpha(kRed-9, 0.5);
>         hNCotherinFV->SetLineColor(kBlack);
>         hNCotherinFV->SetLineWidth(1);
> 
> 	hstack[obschannel-1]->Add(houtFV);
>         legend[obschannel-1]->AddEntry(houtFV, Form("out FV, %.1f", houtFV->Integral()), "F");
>         houtFV->SetFillStyle(1001);
>         houtFV->SetFillColorAlpha(kCyan-7, 0.5);
>         houtFV->SetLineColor(kBlack);
>         houtFV->SetLineWidth(1);
> 
> 	hstack[obschannel-1]->Add(hbadmatch);
>         legend[obschannel-1]->AddEntry(hbadmatch, Form("Cosmic, %.1f", hbadmatch->Integral()), "F");
>         hbadmatch->SetFillStyle(1001);
>         hbadmatch->SetFillColorAlpha(kCyan+2, 0.5);
>         hbadmatch->SetLineColor(kBlack);
>         hbadmatch->SetLineWidth(1);
> 
>         hstack[obschannel-1]->Add(hext);
>         legend[obschannel-1]->AddEntry(hext, Form("EXT, %.1f", hext->Integral()), "F");
>         hext->SetFillStyle(1001);
>         hext->SetFillColorAlpha(kGreen-3, 0.5);
>         hext->SetLineColor(kBlack);
>         hext->SetLineWidth(1);
> 
>         hstack[obschannel-1]->Add(hdirt);
>         legend[obschannel-1]->AddEntry(hdirt, Form("Dirt, %.1f", hdirt->Integral()), "F");
>         hdirt->SetFillStyle(1001);
>         hdirt->SetFillColorAlpha(kOrange+4, 0.5);
>         hdirt->SetLineColor(kBlack);
>         hdirt->SetLineWidth(1);
> 
> 
> 	}
1394c1548,1549
<         hmc->GetYaxis()->SetTitleSize(0.05);
---
> 	hmc->SetTitle(""); // lhagaman 2022_03_21
> 	hmc->GetYaxis()->SetTitleSize(0.06); // lhagaman 2022_03_21, used to be 0.05
1396c1551
<         hmc->GetYaxis()->SetTitleOffset(0.73);
---
>         hmc->GetYaxis()->SetTitleOffset(1.0); // 2022_05_26, increased from 0.73
1404c1559,1560
<         hmc->GetYaxis()->SetRangeUser(-0.02*mcymax, 1.6*mcymax);
---
> 	if (mcymax > 4) hmc->GetYaxis()->SetRangeUser(-0.0*mcymax, 2.0*mcymax); // lhagaman 2022_03_21, changed from 2.0 to 3.0
> 	else hmc->GetYaxis()->SetRangeUser(-0.0*mcymax, 3.0*mcymax); // changed min from -0.02, changed max factor from 1.6 to 2, lhagaman 08/17/21
1406c1562,1566
<         hmc->SetLineWidth(5);
---
>         hmc->SetLineWidth(2); // changed from 5, lhagaman 08/17/21
> 	
> 	// added by lhagaman 08/17/21
> 	hmc->GetXaxis()->SetTickLength(0);
>    	hmc->GetXaxis()->SetLabelOffset(999);
1414c1574
<         hmcerror->SetFillStyle(3002);
---
>         hmcerror->SetFillStyle(3254);
1419a1580
> 
1468,1469c1629,1634
<         gr[obschannel-1]->Draw("P same"); 
<         gr[obschannel-1]->SetLineWidth(2);
---
> 
> 	// lhagaman 2022_03_21
>         if (!nodata) {
>             gr[obschannel-1]->Draw("P same"); 
>         }
> 	gr[obschannel-1]->SetLineWidth(2);
1473a1639,1640
> 
> 
1490,1491c1657,1660
<         legend[obschannel-1]->SetHeader(Form("#SigmaDATA/#Sigma(MC+EXT)=%.2f#pm%.2f(data err)#pm%.2f(pred err)", data_pred_ratio, relerr_data*data_pred_ratio, relerr_pred*data_pred_ratio), "C");
<         legend[obschannel-1]->Draw();
---
> 	if (!nodata) {
>         	legend[obschannel-1]->SetHeader(Form("#SigmaDATA/#Sigma(MC+EXT)=%.2f#pm%.2f(data err)#pm%.2f(pred err)", data_pred_ratio, relerr_data*data_pred_ratio, relerr_pred*data_pred_ratio), "C");
>         }
> 	legend[obschannel-1]->Draw();
1497c1666,1669
<         gratio_mc[obschannel-1]->GetYaxis()->SetRangeUser(0,int(1.5*maxratio)<2?int(1.5*maxratio):2);
---
>         // lhagaman, 2022_03_05, modifying next line
>         //cout << "maxratio:" << maxratio << "\n";
>         gratio_mc[obschannel-1]->GetYaxis()->SetRangeUser(0,maxratio>2&&maxratio<3?3:2);
>         //gratio_mc[obschannel-1]->GetYaxis()->SetRangeUser(0,int(1.5*maxratio)<2?int(1.5*maxratio):2);
1499c1671,1673
<         gratio_mc[obschannel-1]->GetYaxis()->SetNdivisions(210);
---
>         
> 	//gratio_mc[obschannel-1]->GetYaxis()->SetTickLength(0.0);
> 	gratio_mc[obschannel-1]->GetYaxis()->SetNdivisions(2); //lhagaman changed from 210, 08/17/21
1509,1513c1683,1849
<         if(obschannel>=5) //hard coded at this moment
<         {
<             gratio_mc[obschannel-1]->GetXaxis()->SetTitle("Reco #pi^{0} energy [MeV]");
<         }
<         else gratio_mc[obschannel-1]->GetXaxis()->SetTitle("Reco neutrino energy [MeV]");
---
> 	
> 	// lhagaman setting plot names 2021_07_19
> 	
> 	/*
> 	if (obschannel==1){
>                 gratio_mc[obschannel-1]->GetXaxis()->SetTitle("Reconstructed Proton Multiplicity");
>         }else if(obschannel<=3){
>                 gratio_mc[obschannel-1]->GetXaxis()->SetTitle("Reconstructed Non-proton Track Multiplicity");
>         }else gratio_mc[obschannel-1]->GetXaxis()->SetTitle("No X axis label given");
> 	*/
> 
> 	/*		
> 	if (obschannel<=2){
> 		gratio_mc[obschannel-1]->GetXaxis()->SetTitle("One Bin Reconstructed Shower Energy (MeV)");
> 	}else if(obschannel<=4){
>                 gratio_mc[obschannel-1]->GetXaxis()->SetTitle("Reconstructed Shower Energy (MeV)");
> 	} else if(obschannel<=6){
>         	hmc->GetYaxis()->SetRangeUser(0.001, 1e9);
> 		pad1->SetLogy();
> 		gratio_mc[obschannel-1]->GetXaxis()->SetTitle("NC Delta Radiative BDT Score");	
> 	}else gratio_mc[obschannel-1]->GetXaxis()->SetTitle("No X axis label given"); 
> 	*/
> 
> 	
> 	/*
> 	if(obschannel<=2){
> 		hmc->GetYaxis()->SetRangeUser(0.001, 1e9);
>                 pad1->SetLogy();
>                 gratio_mc[obschannel-1]->GetXaxis()->SetTitle("NC Delta Radiative BDT Score");
> 
>                 pad1->cd();
>                 TLine *ll1 = new TLine(2.61, 0.001, 2.61, 1e9);
>                 ll1->SetLineStyle(7);
>                 ll1->Draw("same");
> 
>                 pad2->cd();
>                 TLine *ll2 = new TLine(2.61, 0., 2.61, 3.);
>                 ll2->SetLineStyle(7);
>                 ll2->Draw("same");
> 	}else if (obschannel<=4){
>                 gratio_mc[obschannel-1]->GetXaxis()->SetTitle("Reconstructed Neutrino Energy (MeV)");
>         }else if(obschannel<=6){
>                 gratio_mc[obschannel-1]->GetXaxis()->SetTitle("Reconstructed Shower Energy (MeV)");
>         } else if(obschannel<=8){
>                 gratio_mc[obschannel-1]->GetXaxis()->SetTitle("Reconstructed Shower Cos(theta)");
>         }else if (obschannel<=10){
>                 gratio_mc[obschannel-1]->GetXaxis()->SetTitle("Reconstructed Neutrino Energy (MeV)");
> 	}else gratio_mc[obschannel-1]->GetXaxis()->SetTitle("No X axis label given");
> 	*/
> 
> 	gratio_mc[obschannel-1]->GetXaxis()->SetTitle("Reconstructed Neutrino Energy (MeV)");
> 	
> 	/*
> 	if (obschannel<=8){
>                 gratio_mc[obschannel-1]->GetXaxis()->SetTitle("Reconstructed Neutrino Energy (MeV)");
>         }else if(obschannel<=10){
>                 gratio_mc[obschannel-1]->GetXaxis()->SetTitle("Reconstructed Shower Energy (MeV)");
>         }else if(obschannel<=12){
>                 gratio_mc[obschannel-1]->GetXaxis()->SetTitle("Reconstructed Shower Cos(theta)");
>         } else if(obschannel<=14){
>                 hmc->GetYaxis()->SetRangeUser(0.001, 1e9);
>                 pad1->SetLogy();
>                 gratio_mc[obschannel-1]->GetXaxis()->SetTitle("NC Delta Radiative BDT Score");
> 
>                 pad1->cd();
>                 TLine *ll1 = new TLine(2.61, 0.001, 2.61, 1e9);
>                 ll1->SetLineStyle(7);
>                 ll1->Draw("same");
> 
>                 pad2->cd();
>                 TLine *ll2 = new TLine(2.61, 0., 2.61, 3.);
>                 ll2->SetLineStyle(7);
>                 ll2->Draw("same");
> 	}else if (obschannel==15){
>                 gratio_mc[obschannel-1]->GetXaxis()->SetTitle("Reconstructed Proton Multiplicity");
>         }else if(obschannel<=17){
>                 gratio_mc[obschannel-1]->GetXaxis()->SetTitle("Reconstructed Non-proton Track Multiplicity");
>         }else if(obschannel<=19){
>                 gratio_mc[obschannel-1]->GetXaxis()->SetTitle("E_nu_QE (MeV)");
>         }else gratio_mc[obschannel-1]->GetXaxis()->SetTitle("No X axis label given");
> 	*/
> 	
> 	/*	
>         if (obschannel<=4){
>                 gratio_mc[obschannel-1]->GetXaxis()->SetTitle("Reconstructed Neutrino Energy (MeV)");
>         }else if(obschannel<=6){
>                 gratio_mc[obschannel-1]->GetXaxis()->SetTitle("Reconstructed Shower Energy (MeV)");
>         }else if(obschannel<=8){
>                 gratio_mc[obschannel-1]->GetXaxis()->SetTitle("Reconstructed Shower Cos(theta)");
>         } else if(obschannel<=10){
>                 hmc->GetYaxis()->SetRangeUser(0.001, 1e9);
>                 pad1->SetLogy();
>                 gratio_mc[obschannel-1]->GetXaxis()->SetTitle("NC Delta Radiative BDT Score");
> 
>                 pad1->cd();
>                 TLine *ll1 = new TLine(2.61, 0.001, 2.61, 1e9);
>                 ll1->SetLineStyle(7);
>                 ll1->Draw("same");
> 
>                 pad2->cd();
>                 TLine *ll2 = new TLine(2.61, 0., 2.61, 3.);
>                 ll2->SetLineStyle(7);
>                 ll2->Draw("same");
> 
>         }else gratio_mc[obschannel-1]->GetXaxis()->SetTitle("Reconstructed Neutrino Energy (MeV)");
> 	*/        
> 
> 
> 	/*	
> 	if (obschannel<=2){
>                 gratio_mc[obschannel-1]->GetXaxis()->SetTitle("Reconstructed Neutrino Energy (MeV)");
>         }else if(obschannel<=4){
>                 gratio_mc[obschannel-1]->GetXaxis()->SetTitle("Reconstructed Shower Energy (MeV)");
>         }else if(obschannel<=6){
>                 gratio_mc[obschannel-1]->GetXaxis()->SetTitle("Reconstructed Shower Cos(theta)");
> 	} else if(obschannel<=8){
>                 hmc->GetYaxis()->SetRangeUser(0.001, 1e9);
>                 pad1->SetLogy();
>                 gratio_mc[obschannel-1]->GetXaxis()->SetTitle("NC Delta Radiative BDT Score");
>         	
> 		pad1->cd();
> 		TLine *ll1 = new TLine(2.61, 0.001, 2.61, 1e9);
> 		ll1->SetLineStyle(7);
> 		ll1->Draw("same");
> 
> 		pad2->cd();
>                 TLine *ll2 = new TLine(2.61, 0., 2.61, 3.);
>                 ll2->SetLineStyle(7);
>                 ll2->Draw("same");
> 		
> 	}else gratio_mc[obschannel-1]->GetXaxis()->SetTitle("Reconstructed Neutrino Energy (MeV)");
> 	*/	
> 
> 	
> 	/*	
>    	if (obschannel<=2){
>                 gratio_mc[obschannel-1]->GetXaxis()->SetTitle("Reconstructed Neutrino Vtx X (cm)");
>         }else if(obschannel<=4){
>                 gratio_mc[obschannel-1]->GetXaxis()->SetTitle("Reconstructed Neutrino Vtx Y (cm)");
>         }else if(obschannel<=6){
>                 gratio_mc[obschannel-1]->GetXaxis()->SetTitle("Reconstructed Neutrino Vtx Z (cm)");
>         }else gratio_mc[obschannel-1]->GetXaxis()->SetTitle("No X axis label given");	
> 	*/
> 
> 
> 	/*	
> 	if (obschannel==1) gratio_mc[obschannel-1]->GetXaxis()->SetTitle("Reconstructed Neutrino Energy (MeV)");
>         if (obschannel==2) gratio_mc[obschannel-1]->GetXaxis()->SetTitle("NC Pi0 Score");
>         if (obschannel==3) gratio_mc[obschannel-1]->GetXaxis()->SetTitle("Reconstructed Neutrino Energy (MeV)");
>         if (obschannel==4) gratio_mc[obschannel-1]->GetXaxis()->SetTitle("NC Delta Score");
>         if (obschannel==5) gratio_mc[obschannel-1]->GetXaxis()->SetTitle("Reconstructed Neutrino Energy (MeV)");
>         if (obschannel==6) gratio_mc[obschannel-1]->GetXaxis()->SetTitle("NC Delta Score");
> 	*/
> 
> 	/*		
> 	if (obschannel<=2){
>                 gratio_mc[obschannel-1]->GetXaxis()->SetTitle("Reconstructed Neutrino Energy (MeV)");
>         }else if(obschannel<=4){
>                 gratio_mc[obschannel-1]->GetXaxis()->SetTitle("E_nu_QE (MeV)");
>         }else gratio_mc[obschannel-1]->GetXaxis()->SetTitle("No X axis label given");	
> 	*/
> 
>         //if(obschannel>=5) //hard coded at this moment
>         //{
>         //    gratio_mc[obschannel-1]->GetXaxis()->SetTitle("Reco #pi^{0} energy [MeV]");
>         //}
>         //else gratio_mc[obschannel-1]->GetXaxis()->SetTitle("Reco neutrino energy [MeV]");
1599a1936,1951
> 	
> 	// lhagaman 2022_03_21, changing 0.1 to 0.12
> 	// lhagaman 2022_05_19, changing to 0.15
>         gratio_mc[obschannel-1]->GetXaxis()->SetTitleSize(0.15);
>         gratio_mc[obschannel-1]->GetXaxis()->SetLabelSize(0.15);
>         gratio_mc[obschannel-1]->GetYaxis()->SetTitleSize(0.15);
>         gratio_mc[obschannel-1]->GetYaxis()->SetTitleOffset(0.35); // 2022_05_26, changed from 0.35
>         gratio_mc[obschannel-1]->GetYaxis()->SetLabelSize(0.15);
>        
> 	gr[obschannel-1]->GetXaxis()->SetTitleSize(0.15);
>         gr[obschannel-1]->GetXaxis()->SetLabelSize(0.15);
>         gr[obschannel-1]->GetYaxis()->SetTitleSize(0.15);
>         gr[obschannel-1]->GetYaxis()->SetLabelSize(0.15);
> 	
>         hmc->GetYaxis()->SetTitleSize(0.06);
>         hmc->GetYaxis()->SetLabelSize(0.06);
1601,1607c1953,1960
<         gratio_mc[obschannel-1]->GetXaxis()->SetTitleSize(0.1);
<         gratio_mc[obschannel-1]->GetXaxis()->SetLabelSize(0.1);
<         gratio_mc[obschannel-1]->GetYaxis()->SetTitleSize(0.1);
<         gratio_mc[obschannel-1]->GetYaxis()->SetTitleOffset(0.35);
<         gratio_mc[obschannel-1]->GetYaxis()->SetLabelSize(0.1);
<         gratio_data[obschannel-1]->Draw("P same");
<         gratio_data[obschannel-1]->SetLineWidth(2);
---
> 	//legend[obschannel-1]->SetTextSize(0.2);
> 	//legend2[obschannel-1]->SetTextSize(0.2);
> 
> 	// lhagaman 2022_03_21
>         if (!nodata) {
> 	    gratio_data[obschannel-1]->Draw("P same");
>         }
> 	gratio_data[obschannel-1]->SetLineWidth(2);
1639c1992
<         legend2[obschannel-1]->SetTextSize(0.08);
---
>         legend2[obschannel-1]->SetTextSize(0.1); // lhagaman 2022_05_20 changed from 0.08
Only in wcp-uboone-bdt_older/apps: plot_hist_old.txt
diff -r wcp-uboone-bdt/apps/read_TLee_v20.cxx wcp-uboone-bdt_older/apps/read_TLee_v20.cxx
302a303,304
>  
>   // start lhagaman added
303a306,410
>   int make_constrained_one_bin_plots = 0;
> 
>   if (make_constrained_one_bin_plots) {
> 
>     Lee_test->scaleF_Lee = 0;
>     //Lee_test->scaleF_Lee = 6.77;
>     Lee_test->Set_Collapse();
> 
>     // both 1gNp and 1g0p, no overflow bins
>     vector<int>vc_target_chs;
>     vc_target_chs.push_back(0);
>     vc_target_chs.push_back(2);
>     vector<int>vc_support_chs;
>     for (int i=4; i < 4 + 16 * 4; i++){
>       vc_support_chs.push_back(i);
>     }
>     //for (int i=4; i < 4 + 16 * 2; i++){
>     //  vc_support_chs.push_back(i);
>     //}
>     Lee_test->Exe_Goodness_of_fit_detailed( vc_target_chs, vc_support_chs, 1001 );
>   }
> 
>   if (make_constrained_one_bin_plots) {
> 
>     Lee_test->scaleF_Lee = 0;
>     //Lee_test->scaleF_Lee= 0.03;
>     Lee_test->Set_Collapse();
> 
>     // just 1gNp, overflow bin
>     vector<int>vc_target_chs;
>     vc_target_chs.push_back(0);
>     vector<int>vc_support_chs;
>     for (int i=4; i < 4 + 16 * 4; i++){
>       vc_support_chs.push_back(i);
>     }
>     //for (int i=4; i < 4 + 16 * 2; i++){
>     //  vc_support_chs.push_back(i);
>     //}
>     Lee_test->Exe_Goodness_of_fit_detailed( vc_target_chs, vc_support_chs, 1002 );
>   }
> 
>   if (make_constrained_one_bin_plots) {
> 
>     Lee_test->scaleF_Lee = 0;
>     //Lee_test->scaleF_Lee = 8.84;
>     Lee_test->Set_Collapse();
> 
>     // just 1g0p, overflow bin
>     vector<int>vc_target_chs;
>     vc_target_chs.push_back(2);
>     vector<int>vc_support_chs;
>     for (int i=4; i < 4 + 16 * 4; i++){
>       vc_support_chs.push_back(i);
>     }
>     //for (int i=4; i < 4 + 16 * 2; i++){
>     //  vc_support_chs.push_back(i);
>     //}
>     Lee_test->Exe_Goodness_of_fit_detailed( vc_target_chs, vc_support_chs, 1003 );
> 
>   }
> 
>   
>   int make_constrained_nc_pi0_plots = 0;
> 
>   if (make_constrained_nc_pi0_plots) {
>     
>     vector<int>vc_target_chs;
>     vc_target_chs.push_back( 3 );
> 
>     vector<int>vc_support_chs;
>     vc_support_chs.push_back( 5 );
>     vc_support_chs.push_back( 6 );
>     Lee_test->Exe_Goodness_of_fit( vc_target_chs, vc_support_chs, 2001 );
> 
>   }
>   
>   if (make_constrained_nc_pi0_plots) {
>     
>     vector<int>vc_target_chs;
>     vc_target_chs.push_back( 4 );
> 
>     vector<int>vc_support_chs;
>     vc_support_chs.push_back( 5 );
>     vc_support_chs.push_back( 6 );
>     Lee_test->Exe_Goodness_of_fit( vc_target_chs, vc_support_chs, 2002 );
> 
>   }
>     
>   if (make_constrained_nc_pi0_plots) {
>     
>     vector<int>vc_target_chs;
>     vc_target_chs.push_back( 3 );
>     vc_target_chs.push_back( 4 );
> 
>     vector<int>vc_support_chs;
>     vc_support_chs.push_back( 5 );
>     vc_support_chs.push_back( 6 );
>     Lee_test->Exe_Goodness_of_fit( vc_target_chs, vc_support_chs, 2003 );
> 
>   }
> 
> 
> 
>   // end lhagaman added
> 
Binary files wcp-uboone-bdt/bin/det_cov_matrix and wcp-uboone-bdt_older/bin/det_cov_matrix differ
Binary files wcp-uboone-bdt/bin/numi_filter and wcp-uboone-bdt_older/bin/numi_filter differ
Binary files wcp-uboone-bdt/bin/plot_hist and wcp-uboone-bdt_older/bin/plot_hist differ
Binary files wcp-uboone-bdt/bin/plot_hist_xspaper and wcp-uboone-bdt_older/bin/plot_hist_xspaper differ
Binary files wcp-uboone-bdt/bin/print_event and wcp-uboone-bdt_older/bin/print_event differ
Binary files wcp-uboone-bdt/bin/read_TLee_v20 and wcp-uboone-bdt_older/bin/read_TLee_v20 differ
Binary files wcp-uboone-bdt/bin/sideband_filter and wcp-uboone-bdt_older/bin/sideband_filter differ
Binary files wcp-uboone-bdt/bin/stat_cov_matrix and wcp-uboone-bdt_older/bin/stat_cov_matrix differ
Binary files wcp-uboone-bdt/bin/stat_pred_cov_matrix and wcp-uboone-bdt_older/bin/stat_pred_cov_matrix differ
Binary files wcp-uboone-bdt/bin/test_apply_cuts and wcp-uboone-bdt_older/bin/test_apply_cuts differ
Binary files wcp-uboone-bdt/bin/test_readout and wcp-uboone-bdt_older/bin/test_readout differ
Binary files wcp-uboone-bdt/bin/xf_cov_matrix and wcp-uboone-bdt_older/bin/xf_cov_matrix differ
Binary files wcp-uboone-bdt/bin/xs_cov_matrix and wcp-uboone-bdt_older/bin/xs_cov_matrix differ
Binary files wcp-uboone-bdt/build/apps/det_cov_matrix.cxx.13.o and wcp-uboone-bdt_older/build/apps/det_cov_matrix.cxx.13.o differ
Binary files wcp-uboone-bdt/build/apps/numi_filter.cxx.22.o and wcp-uboone-bdt_older/build/apps/numi_filter.cxx.22.o differ
Binary files wcp-uboone-bdt/build/apps/plot_hist.cxx.23.o and wcp-uboone-bdt_older/build/apps/plot_hist.cxx.23.o differ
Binary files wcp-uboone-bdt/build/apps/plot_hist_xspaper.cxx.25.o and wcp-uboone-bdt_older/build/apps/plot_hist_xspaper.cxx.25.o differ
Binary files wcp-uboone-bdt/build/apps/print_event.cxx.28.o and wcp-uboone-bdt_older/build/apps/print_event.cxx.28.o differ
Binary files wcp-uboone-bdt/build/apps/read_TLee_v20.cxx.33.o and wcp-uboone-bdt_older/build/apps/read_TLee_v20.cxx.33.o differ
Binary files wcp-uboone-bdt/build/apps/sideband_filter.cxx.34.o and wcp-uboone-bdt_older/build/apps/sideband_filter.cxx.34.o differ
Binary files wcp-uboone-bdt/build/apps/stat_cov_matrix.cxx.35.o and wcp-uboone-bdt_older/build/apps/stat_cov_matrix.cxx.35.o differ
Binary files wcp-uboone-bdt/build/apps/stat_pred_cov_matrix.cxx.36.o and wcp-uboone-bdt_older/build/apps/stat_pred_cov_matrix.cxx.36.o differ
Binary files wcp-uboone-bdt/build/apps/test_apply_cuts.cxx.37.o and wcp-uboone-bdt_older/build/apps/test_apply_cuts.cxx.37.o differ
Binary files wcp-uboone-bdt/build/apps/test_readout.cxx.39.o and wcp-uboone-bdt_older/build/apps/test_readout.cxx.39.o differ
Binary files wcp-uboone-bdt/build/apps/xf_cov_matrix.cxx.43.o and wcp-uboone-bdt_older/build/apps/xf_cov_matrix.cxx.43.o differ
Binary files wcp-uboone-bdt/build/apps/xs_cov_matrix.cxx.44.o and wcp-uboone-bdt_older/build/apps/xs_cov_matrix.cxx.44.o differ
diff -r wcp-uboone-bdt/build/config.log wcp-uboone-bdt_older/build/config.log
1c1
< # project Junk configured on Tue Jan  3 16:30:08 2023 by
---
> # project Junk configured on Mon Aug 29 15:36:53 2022 by
3c3
< # using ./wcb configure --prefix=/home/hagaman/wc_framework/wcp-uboone-bdt
---
> # using ./wcb configure --prefix=~/wc_framework/wcp-uboone-bdt
Binary files wcp-uboone-bdt/build/det_cov_matrix and wcp-uboone-bdt_older/build/det_cov_matrix differ
Binary files wcp-uboone-bdt/build/libWCPuBooNE_BDT_APP.so and wcp-uboone-bdt_older/build/libWCPuBooNE_BDT_APP.so differ
diff -r wcp-uboone-bdt/build/.lock-waf_linux_build wcp-uboone-bdt_older/build/.lock-waf_linux_build
1c1
< argv = ['./wcb', 'configure', '--prefix=/home/hagaman/wc_framework/wcp-uboone-bdt']
---
> argv = ['./wcb', 'configure', '--prefix=~/wc_framework/wcp-uboone-bdt']
3c3
< environ = {'CONDA_SHLVL': '1', 'LD_LIBRARY_PATH': '/home/hagaman/root_install_dir/lib', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'CONDA_EXE': '/home/hagaman/anaconda3/bin/conda', 'SSH_CONNECTION': '130.199.23.11 54152 130.199.22.64 22', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'LANG': 'en_US.UTF-8', 'DISPLAY': 'localhost:11.0', 'CONDA_PREFIX': '/home/hagaman/anaconda3', 'DYLD_LIBRARY_PATH': '/home/hagaman/root_install_dir/lib', 'SSH_AUTH_SOCK': '/tmp/ssh-E9BcPFR37e/agent.2091', '_CE_M': '', 'ROOTSYS': '/home/hagaman/root_install_dir', 'XDG_SESSION_ID': '7', 'USER': 'hagaman', 'PWD': '/home/hagaman/wc_framework/wcp-uboone-bdt', 'HOME': '/home/hagaman', 'CONDA_PYTHON_EXE': '/home/hagaman/anaconda3/bin/python', 'CMAKE_PREFIX_PATH': '/home/hagaman/root_install_dir', 'LC_TERMINAL': 'iTerm2', 'SSH_CLIENT': '130.199.23.11 54152 22', 'JUPYTER_PATH': '/home/hagaman/root_install_dir/etc/notebook', 'LC_TERMINAL_VERSION': '3.3.9', 'XDG_DATA_DIRS': '/usr/local/share:/usr/share:/var/lib/snapd/desktop', 'SHLIB_PATH': '/home/hagaman/root_install_dir/lib', '_CE_CONDA': '', 'LIBPATH': '/home/hagaman/root_install_dir/lib', 'CONDA_PROMPT_MODIFIER': '(base) ', 'SSH_TTY': '/dev/pts/1', 'MAIL': '/var/mail/hagaman', 'TERM': 'vt100', 'SHELL': '/bin/bash', 'SHLVL': '1', 'PYTHONPATH': '/home/hagaman/root_install_dir/lib', 'MANPATH': '/home/hagaman/root_install_dir/man:/usr/local/man:/usr/local/share/man:/usr/share/man', 'LOGNAME': 'hagaman', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/1004/bus', 'XDG_RUNTIME_DIR': '/run/user/1004', 'PATH': '/home/hagaman/anaconda3/bin:/home/hagaman/anaconda3/condabin:/home/hagaman/root_install_dir/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin', 'CONDA_DEFAULT_ENV': 'base', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'OLDPWD': '/home/hagaman/wc_framework', '_': './wcb'}
---
> environ = {'CLUTTER_IM_MODULE': 'xim', 'CONDA_SHLVL': '1', 'LD_LIBRARY_PATH': '/home/hagaman/root_install_dir/lib', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'CONDA_EXE': '/home/hagaman/anaconda3/bin/conda', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'XDG_MENU_PREFIX': 'gnome-', 'LANG': 'en_US.UTF-8', 'DISPLAY': ':1', 'GNOME_SHELL_SESSION_MODE': 'ubuntu', 'COLORTERM': 'truecolor', 'USERNAME': 'hagaman', 'CONDA_PREFIX': '/home/hagaman/anaconda3', 'DYLD_LIBRARY_PATH': '/home/hagaman/root_install_dir/lib', 'XDG_VTNR': '2', 'SSH_AUTH_SOCK': '/run/user/1004/keyring/ssh', '_CE_M': '', 'ROOTSYS': '/home/hagaman/root_install_dir', 'XDG_SESSION_ID': '3', 'USER': 'hagaman', 'DESKTOP_SESSION': 'ubuntu', 'QT4_IM_MODULE': 'xim', 'TEXTDOMAINDIR': '/usr/share/locale/', 'GNOME_TERMINAL_SCREEN': '/org/gnome/Terminal/screen/b66e1319_2a6e_4517_a881_ad8d126e48f2', 'PWD': '/home/hagaman/wc_framework/wcp-uboone-bdt', 'HOME': '/home/hagaman', 'CONDA_PYTHON_EXE': '/home/hagaman/anaconda3/bin/python', 'TEXTDOMAIN': 'im-config', 'CMAKE_PREFIX_PATH': '/home/hagaman/root_install_dir', 'SSH_AGENT_PID': '1801', 'QT_ACCESSIBILITY': '1', 'JUPYTER_PATH': '/home/hagaman/root_install_dir/etc/notebook', 'XDG_SESSION_TYPE': 'x11', 'XDG_DATA_DIRS': '/usr/share/ubuntu:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop', 'SHLIB_PATH': '/home/hagaman/root_install_dir/lib', '_CE_CONDA': '', 'XDG_SESSION_DESKTOP': 'ubuntu', 'GJS_DEBUG_OUTPUT': 'stderr', 'LIBPATH': '/home/hagaman/root_install_dir/lib', 'CONDA_PROMPT_MODIFIER': '(base) ', 'GTK_MODULES': 'gail:atk-bridge', 'WINDOWPATH': '2', 'TERM': 'vt100', 'SHELL': '/bin/bash', 'VTE_VERSION': '5202', 'QT_IM_MODULE': 'ibus', 'XMODIFIERS': '@im=ibus', 'IM_CONFIG_PHASE': '2', 'XDG_CURRENT_DESKTOP': 'ubuntu:GNOME', 'GPG_AGENT_INFO': '/run/user/1004/gnupg/S.gpg-agent:0:1', 'GNOME_TERMINAL_SERVICE': ':1.318', 'XDG_SEAT': 'seat0', 'SHLVL': '1', 'PYTHONPATH': '/home/hagaman/root_install_dir/lib', 'MANPATH': '/home/hagaman/root_install_dir/man:/usr/local/man:/usr/local/share/man:/usr/share/man', 'GDMSESSION': 'ubuntu', 'GNOME_DESKTOP_SESSION_ID': 'this-is-deprecated', 'LOGNAME': 'hagaman', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/1004/bus', 'XDG_RUNTIME_DIR': '/run/user/1004', 'XAUTHORITY': '/run/user/1004/gdm/Xauthority', 'XDG_CONFIG_DIRS': '/etc/xdg/xdg-ubuntu:/etc/xdg', 'PATH': '/home/hagaman/anaconda3/bin:/home/hagaman/anaconda3/condabin:/home/hagaman/root_install_dir/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin', 'CONDA_DEFAULT_ENV': 'base', 'GJS_DEBUG_TOPICS': 'JS ERROR;JS LOG', 'SESSION_MANAGER': 'local/brussell.phy.bnl.gov:@/tmp/.ICE-unix/1724,unix/brussell.phy.bnl.gov:/tmp/.ICE-unix/1724', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'GTK_IM_MODULE': 'ibus', '_': './wcb', 'OLDPWD': '/home/hagaman/wc_framework/LEEana'}
Binary files wcp-uboone-bdt/build/numi_filter and wcp-uboone-bdt_older/build/numi_filter differ
Binary files wcp-uboone-bdt/build/plot_hist and wcp-uboone-bdt_older/build/plot_hist differ
Binary files wcp-uboone-bdt/build/plot_hist_xspaper and wcp-uboone-bdt_older/build/plot_hist_xspaper differ
Binary files wcp-uboone-bdt/build/print_event and wcp-uboone-bdt_older/build/print_event differ
Binary files wcp-uboone-bdt/build/read_TLee_v20 and wcp-uboone-bdt_older/build/read_TLee_v20 differ
Binary files wcp-uboone-bdt/build/sideband_filter and wcp-uboone-bdt_older/build/sideband_filter differ
Binary files wcp-uboone-bdt/build/src/master_cov_matrix.cxx.4.o and wcp-uboone-bdt_older/build/src/master_cov_matrix.cxx.4.o differ
Binary files wcp-uboone-bdt/build/src/TLee.cxx.4.o and wcp-uboone-bdt_older/build/src/TLee.cxx.4.o differ
Binary files wcp-uboone-bdt/build/stat_cov_matrix and wcp-uboone-bdt_older/build/stat_cov_matrix differ
Binary files wcp-uboone-bdt/build/stat_pred_cov_matrix and wcp-uboone-bdt_older/build/stat_pred_cov_matrix differ
Binary files wcp-uboone-bdt/build/test_apply_cuts and wcp-uboone-bdt_older/build/test_apply_cuts differ
Binary files wcp-uboone-bdt/build/test_readout and wcp-uboone-bdt_older/build/test_readout differ
Only in wcp-uboone-bdt_older/build: .wafpickle-linux-50792432-20
Binary files wcp-uboone-bdt/build/.wafpickle-linux-50924784-20 and wcp-uboone-bdt_older/build/.wafpickle-linux-50924784-20 differ
Binary files wcp-uboone-bdt/build/WCPuBooNE_BDT_APPDict_rdict.pcm and wcp-uboone-bdt_older/build/WCPuBooNE_BDT_APPDict_rdict.pcm differ
Binary files wcp-uboone-bdt/build/xf_cov_matrix and wcp-uboone-bdt_older/build/xf_cov_matrix differ
Binary files wcp-uboone-bdt/build/xs_cov_matrix and wcp-uboone-bdt_older/build/xs_cov_matrix differ
Only in wcp-uboone-bdt_older/: cuts_xin_.h
diff -r wcp-uboone-bdt/inc/WCPLEEANA/Configure_Lee.h wcp-uboone-bdt_older/inc/WCPLEEANA/Configure_Lee.h
63,67c63,71
<   TString spectra_file = "./new_TLee_input_opendata5e19/merge.root";
<   TString flux_Xs_directory = "./new_TLee_input_opendata5e19/flux_Xs/";
<   TString detector_directory = "./new_TLee_input_opendata5e19/det/";
<   TString mc_directory = "./new_TLee_input_opendata5e19/mc_stat/";
< 
---
>   //TString spectra_file = "./new_TLee_input_opendata5e19/merge.root";
>   //TString flux_Xs_directory = "./new_TLee_input_opendata5e19/flux_Xs/";
>   //TString detector_directory = "./new_TLee_input_opendata5e19/det/";
>   //TString mc_directory = "./new_TLee_input_opendata5e19/mc_stat/";
> 
>   TString spectra_file = "./merge.root";
>   TString flux_Xs_directory = "./hist_rootfiles/XsFlux/";
>   TString detector_directory = "./hist_rootfiles/DetVar/";
>   TString mc_directory = "./mc_stat/";
70c74
<   int channels_observation = 7;// data channels (=hdata_obsch_# in spectra_file above)
---
>   int channels_observation = 6;// data channels (=hdata_obsch_# in spectra_file above)
71a76
> 			       // I think this isn't used, unless someone added a dependence recently? need to check
73a79
>   //int syst_cov_flux_Xs_end   = 17;//cov_18.root is uncorrelated reweighting and cov_19.root is correlated
77c83,84
<   int syst_cov_mc_stat_end   = 99;
---
>   //int syst_cov_mc_stat_end   = 99;
>   int syst_cov_mc_stat_end   = 0;
89c96,97
<   bool flag_display_graphics = 1;
---
>   // this pops up all the constrained and unconsttrained plots, kind of annoying
>   bool flag_display_graphics = 0;
103c111,112
<   bool flag_plotting_systematics   = 0;
---
>   // this shows the fractional uncertainty from different types, pretty useful
>   bool flag_plotting_systematics   = 1;
diff -r wcp-uboone-bdt/inc/WCPLEEANA/cuts.h wcp-uboone-bdt_older/inc/WCPLEEANA/cuts.h
237a238,240
>   //if (addtl_weight != 1){ 
>   // std::cout << "lhagaman debug, addtl_weight  = " << addtl_weight << "\n";
>   //}
953c956,960
< 	if (pre_cut && eval.truth_nuEnergy<=1050 && eval.truth_nuEnergy>920) return number;
---
> 	std::cout << "lhagaman debug, trying numuCC.inside.Enu.le.1050.gt.920\n";
> 	if (pre_cut && eval.truth_nuEnergy<=1050 && eval.truth_nuEnergy>920){
> 		std::cout << "lhagaman debug, passed numuCC.inside.Enu.le.1050.gt.920\n";
> 		return number;
> 	}
1612c1619
< 
---
>  
1617c1624
< 
---
>       
1628a1636,1638
>       //std::cout << "lhagaman debug, valid cut name, but invalid pre_cut or energy\n";
>       //std::cout << "pre_cut = " << pre_cut << ", Enu_bin = " << Enu_bin << ", costheta_bin = " << costheta_bin << ", Pmuon_bin = " << Pmuon_bin << ", cut_name = " << cut_name << ", eval.truth_nuEnergy = " << eval.truth_nuEnergy << "\n";
>       //std::cout << "    " << (eval.truth_nuPdg==14) << ", " << (eval.truth_isCC==1) << ", " << (eval.truth_vtxInside==1) << ", " << (muonMomentum[3]>0) << "\n";
1636a1647
>   //std::cout << "lhagaman debug, inside get_cut_pass\n";
1765c1776,1783
<   
---
>   // adding additional CC Pi0 cuts for file_ch.txt since I need to treat the runs differently, runs 1 and 3 only processed
>   //if (eval.truth_vtxInside==1 && eval.truth_isCC==1 && abs(eval.truth_nuPdg)==14 && pfeval.truth_NprimPio==1){
>   //	 map_cuts_flag["trueNumuCC1Pi0"] = true;
>   // 	 map_cuts_flag["notTrueNumuCC1Pi0"] = false;
>   //}else {
>   //	 map_cuts_flag["trueNumuCC1Pi0"] = false;
>   //	 map_cuts_flag["notTrueNumuCC1Pi0"] = true;
>   //}// done adding additional CC Pi0 cuts
1850a1869,1871
>   
>   std::cout << "lhagaman debug, inside cuts.h, checking " << ch_name << "\n";
>   
2834,2835c2855
<     else return false;
<     
---
>     else return false; 
2876c2896,2897
<   }else if (ch_name == "generic_nu_overlay" || ch_name == "BG_generic_nu_ext" || ch_name =="BG_generic_nu_dirt" || ch_name == "generic_nu_bnb"){
---
>   }else if (ch_name == "generic_nu_overlay" || ch_name == "generic_nu_ext" || ch_name =="generic_nu_dirt" || ch_name == "generic_nu_bnb" || ch_name == "generic_nc_delta_overlay" || ch_name == "generic_nc_pi0_overlay" || ch_name == "generic_cc_pi0_overlay"){
>     // warning: filtered overlays added for testing, if you use these here it will include overlaps
2987a3009
>     //std::cout << "lhagaman debug, got to this part of cuts.h with Enu_mu cuts\n";
2993c3015
<     return false;    
---
>     return false;
2995c3017,3018
<   }else if (ch_name == "nueCC_signal_Enu_FC_overlay" || ch_name == "nueCC_signal_Enu_PC_overlay" || ch_name == "nueCC_background_Enu_FC_overlay" || ch_name == "nueCC_background_Enu_PC_overlay"
---
>   } else if (ch_name == "nueCC_signal_Enu_FC_overlay" || ch_name == "nueCC_signal_Enu_PC_overlay" || ch_name == "nueCC_background_Enu_FC_overlay" || ch_name == "nueCC_background_Enu_PC_overlay"
>   //}else if (ch_name == "nueCC_signal_Enu_FC_overlay" || ch_name == "nueCC_signal_Enu_PC_overlay" || ch_name == "nueCC_background_Enu_FC_overlay" || ch_name == "nueCC_background_Enu_PC_overlay"
3085c3108
<       if (flag_ncpio_sel && flag_FC && (eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio>0 
---
>       if (flag_ncpio_sel && flag_FC && (eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio==1
3090c3113
<       if (flag_ncpio_sel && flag_FC && (!(eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio>0
---
>       if (flag_ncpio_sel && flag_FC && (!(eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio==1
3099c3122
<       if (flag_FC && (eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio>0 
---
>       if (flag_FC && (eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio==1
3104c3127
<       if (flag_FC && (!(eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio>0
---
>       if (flag_FC && (!(eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio==1
3109c3132,3133
<     
---
> 
> 
3171c3195,3197
<                 return ((is_true_0p(pfeval)==1 && ch_name=="nc_delta_0p_01_true_0p_nc_delta_overlay") || (is_true_0p(pfeval)==0 && ch_name=="nc_delta_0p_01_true_Np_nc_delta_overlay"));
---
>                   //std::cout << "lhagaman debug, inside signal selection\n";
> 		    
> 		  return ((is_true_0p(pfeval)==1 && ch_name=="nc_delta_0p_01_true_0p_nc_delta_overlay") || (is_true_0p(pfeval)==0 && ch_name=="nc_delta_0p_01_true_Np_nc_delta_overlay"));
3185c3211
<                   if (flag_FC && flag_ncdelta_sel && flag_0p && (eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio>0
---
>                   if (flag_FC && flag_ncdelta_sel && flag_0p && (eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio==1
3193c3219,3235
<                   if (flag_FC && flag_ncdelta_sel && (!flag_0p) && (eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio>0
---
>                   if (flag_FC && flag_ncdelta_sel && (!flag_0p) && (eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio==1
>                                         && !(eval.truth_isCC==0 && pfeval.truth_NCDelta==1 && flag_truth_inside))) return true;
>                   return false;
>    }else if (ch_name == "nc_delta_0p_01_cc_pi0_overlay" || ch_name == "nc_delta_0p_02_cc_pi0_overlay" || ch_name == "nc_delta_0p_03_cc_pi0_overlay" || ch_name == "nc_delta_0p_04_cc_pi0_overlay"
>             || ch_name == "nc_delta_0p_05_cc_pi0_overlay" || ch_name == "nc_delta_0p_06_cc_pi0_overlay" || ch_name == "nc_delta_0p_07_cc_pi0_overlay" || ch_name == "nc_delta_0p_08_cc_pi0_overlay"
>             || ch_name == "nc_delta_0p_09_cc_pi0_overlay" || ch_name == "nc_delta_0p_10_cc_pi0_overlay" || ch_name == "nc_delta_0p_11_cc_pi0_overlay" || ch_name == "nc_delta_0p_12_cc_pi0_overlay"
>             || ch_name == "nc_delta_0p_13_cc_pi0_overlay" || ch_name == "nc_delta_0p_14_cc_pi0_overlay" || ch_name == "nc_delta_0p_15_cc_pi0_overlay" || ch_name == "nc_delta_0p_16_cc_pi0_overlay"
>             || ch_name == "nc_delta_0p_17_cc_pi0_overlay" || ch_name == "nc_delta_0p_18_cc_pi0_overlay" || ch_name == "nc_delta_0p_19_cc_pi0_overlay" || ch_name == "nc_delta_0p_20_cc_pi0_overlay"){
>                   if (flag_FC && flag_ncdelta_sel && flag_0p && (eval.truth_isCC==1 && flag_truth_inside && pfeval.truth_NprimPio==1
>                                                      && !(eval.truth_isCC==0 && pfeval.truth_NCDelta==1 && flag_truth_inside))) return true;
>                   return false;
>     }else if (ch_name == "nc_delta_Np_01_cc_pi0_overlay" || ch_name == "nc_delta_Np_02_cc_pi0_overlay" || ch_name == "nc_delta_Np_03_cc_pi0_overlay" || ch_name == "nc_delta_Np_04_cc_pi0_overlay"
>             || ch_name == "nc_delta_Np_05_cc_pi0_overlay" || ch_name == "nc_delta_Np_06_cc_pi0_overlay" || ch_name == "nc_delta_Np_07_cc_pi0_overlay" || ch_name == "nc_delta_Np_08_cc_pi0_overlay"
>             || ch_name == "nc_delta_Np_09_cc_pi0_overlay" || ch_name == "nc_delta_Np_10_cc_pi0_overlay" || ch_name == "nc_delta_Np_11_cc_pi0_overlay" || ch_name == "nc_delta_Np_12_cc_pi0_overlay"
>             || ch_name == "nc_delta_Np_13_cc_pi0_overlay" || ch_name == "nc_delta_Np_14_cc_pi0_overlay" || ch_name == "nc_delta_Np_15_cc_pi0_overlay" || ch_name == "nc_delta_Np_16_cc_pi0_overlay"
>             || ch_name == "nc_delta_Np_17_cc_pi0_overlay" || ch_name == "nc_delta_Np_18_cc_pi0_overlay" || ch_name == "nc_delta_Np_19_cc_pi0_overlay" || ch_name == "nc_delta_Np_20_cc_pi0_overlay"){
>                   if (flag_FC && flag_ncdelta_sel && (!flag_0p) && (eval.truth_isCC==1 && flag_truth_inside && pfeval.truth_NprimPio==1
3196c3238
<    }else if (ch_name == "nc_delta_0p_01_overlay" || ch_name == "nc_delta_0p_02_overlay" || ch_name == "nc_delta_0p_03_overlay" || ch_name == "nc_delta_0p_04_overlay"
---
>     }else if (ch_name == "nc_delta_0p_01_overlay" || ch_name == "nc_delta_0p_02_overlay" || ch_name == "nc_delta_0p_03_overlay" || ch_name == "nc_delta_0p_04_overlay"
3201c3243
<                   if (flag_FC && flag_ncdelta_sel && flag_0p && (!(eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio>0
---
>                   if (flag_FC && flag_ncdelta_sel && flag_0p && (!(eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio==1
3210c3252
<                   if (flag_FC && flag_ncdelta_sel && (!flag_0p) && (!(eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio>0
---
>                   if (flag_FC && flag_ncdelta_sel && (!flag_0p) && (!(eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio==1
3253c3295
<                   if (flag_FC && flag_ncdelta_sel && (eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio>0
---
>                   if (flag_FC && flag_ncdelta_sel && (eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio==1
3261c3303
<                   if (flag_FC && flag_ncdelta_sel && (!(eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio>0
---
>                   if (flag_FC && flag_ncdelta_sel && (!(eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio==1
3313c3355
<                   if (flag_FC && flag_ncpio_sel && (!flag_ncdelta_sel) && flag_0p && (eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio>0
---
>                   if (flag_FC && flag_ncpio_sel && (!flag_ncdelta_sel) && flag_0p && (eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio==1
3317c3359,3371
<                   if (flag_FC && flag_ncpio_sel && (!flag_ncdelta_sel) && (!flag_0p) && (eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio>0
---
>                   if (flag_FC && flag_ncpio_sel && (!flag_ncdelta_sel) && (!flag_0p) && (eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio==1
>                                                      && !(eval.truth_isCC==0 && pfeval.truth_NCDelta==1 && flag_truth_inside))) return true;
>                   return false;
>     }else if (ch_name == "nc_pi0_Xp_nc_pi0_overlay" || ch_name == "nc_pi0_2_Xp_nc_pi0_overlay"){
>                   if (flag_FC && flag_ncpio_sel && (!flag_ncdelta_sel) && (eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio==1
>                                                      && !(eval.truth_isCC==0 && pfeval.truth_NCDelta==1 && flag_truth_inside))) return true;
>                   return false;
>     }else if (ch_name == "nc_pi0_0p_cc_pi0_overlay" || ch_name == "nc_pi0_2_0p_cc_pi0_overlay"){
>                   if (flag_FC && flag_ncpio_sel && (!flag_ncdelta_sel) && flag_0p && (eval.truth_isCC==1 && flag_truth_inside && pfeval.truth_NprimPio==1
>                                                      && !(eval.truth_isCC==0 && pfeval.truth_NCDelta==1 && flag_truth_inside))) return true;
>                   return false;
>     }else if (ch_name == "nc_pi0_Np_cc_pi0_overlay" || ch_name == "nc_pi0_2_Np_cc_pi0_overlay"){
>                   if (flag_FC && flag_ncpio_sel && (!flag_ncdelta_sel) && (!flag_0p) && (eval.truth_isCC==1 && flag_truth_inside && pfeval.truth_NprimPio==1
3321c3375
<                   if (flag_FC && flag_ncpio_sel && (!flag_ncdelta_sel) && (eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio>0
---
>                   if (flag_FC && flag_ncpio_sel && (!flag_ncdelta_sel) && (eval.truth_isCC==1 && flag_truth_inside && pfeval.truth_NprimPio==1
3325c3379
<                   if (flag_FC && flag_ncpio_sel && (!flag_ncdelta_sel) && flag_0p && (!(eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio>0
---
>                   if (flag_FC && flag_ncpio_sel && (!flag_ncdelta_sel) && flag_0p && (!(eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio==1
3330c3384
<                   if (flag_FC && flag_ncpio_sel && (!flag_ncdelta_sel) && (!flag_0p) && (!(eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio>0
---
>                   if (flag_FC && flag_ncpio_sel && (!flag_ncdelta_sel) && (!flag_0p) && (!(eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio==1
3335c3389
<                   if (flag_FC && flag_ncpio_sel && (!flag_ncdelta_sel) && (!(eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio>0
---
>                   if (flag_FC && flag_ncpio_sel && (!flag_ncdelta_sel) && (!(eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio==1
3377c3431
<                   if (flag_FC && flag_cc_pi0 && (!flag_ncpio_sel) && (!flag_ncdelta_sel) && flag_0p && (eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio>0
---
>                   if (flag_FC && flag_cc_pi0 && (!flag_ncpio_sel) && (!flag_ncdelta_sel) && flag_0p && (eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio==1
3381c3435
<                   if (flag_FC && flag_cc_pi0 && (!flag_ncpio_sel) && (!flag_ncdelta_sel) && (!flag_0p) && (eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio>0
---
>                   if (flag_FC && flag_cc_pi0 && (!flag_ncpio_sel) && (!flag_ncdelta_sel) && (!flag_0p) && (eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio==1
3385c3439
<                   if (flag_FC && flag_cc_pi0 && (!flag_ncpio_sel) && (!flag_ncdelta_sel) && (eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio>0
---
>                   if (flag_FC && flag_cc_pi0 && (!flag_ncpio_sel) && (!flag_ncdelta_sel) && (eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio==1
3389c3443
<                   if (flag_FC && flag_cc_pi0 && (!flag_ncpio_sel) && (!flag_ncdelta_sel) && flag_0p && (!(eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio>0
---
>                   if (flag_FC && flag_cc_pi0 && (!flag_ncpio_sel) && (!flag_ncdelta_sel) && flag_0p && (!(eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio==1
3394c3448
<                   if (flag_FC && flag_cc_pi0 && (!flag_ncpio_sel) && (!flag_ncdelta_sel) && (!flag_0p) && (!(eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio>0
---
>                   if (flag_FC && flag_cc_pi0 && (!flag_ncpio_sel) && (!flag_ncdelta_sel) && (!flag_0p) && (!(eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio==1
3399c3453
<                   if (flag_FC && flag_cc_pi0 && (!flag_ncpio_sel) && (!flag_ncdelta_sel) && (!(eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio>0
---
>                   if (flag_FC && flag_cc_pi0 && (!flag_ncpio_sel) && (!flag_ncdelta_sel) && (!(eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio==1
3441c3495
<                   if (flag_FC && flag_numuCC && (!flag_ncpio_sel) && (!flag_ncdelta_sel) && (!flag_cc_pi0) && flag_0p && (eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio>0
---
>                   if (flag_FC && flag_numuCC && (!flag_ncpio_sel) && (!flag_ncdelta_sel) && (!flag_cc_pi0) && flag_0p && (eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio==1
3445c3499
<                   if (flag_FC && flag_numuCC && (!flag_ncpio_sel) && (!flag_ncdelta_sel) && (!flag_cc_pi0) && (!flag_0p) && (eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio>0
---
>                   if (flag_FC && flag_numuCC && (!flag_ncpio_sel) && (!flag_ncdelta_sel) && (!flag_cc_pi0) && (!flag_0p) && (eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio==1
3449c3503
<                   if (flag_FC && flag_numuCC && (!flag_ncpio_sel) && (!flag_ncdelta_sel) && (!flag_cc_pi0)  && (eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio>0
---
>                   if (flag_FC && flag_numuCC && (!flag_ncpio_sel) && (!flag_ncdelta_sel) && (!flag_cc_pi0)  && (eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio==1
3453c3507
<                   if (flag_FC && flag_numuCC && (!flag_ncpio_sel) && (!flag_ncdelta_sel) && (!flag_cc_pi0) && flag_0p && (!(eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio>0
---
>                   if (flag_FC && flag_numuCC && (!flag_ncpio_sel) && (!flag_ncdelta_sel) && (!flag_cc_pi0) && flag_0p && (!(eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio==1
3458c3512
<                   if (flag_FC && flag_numuCC && (!flag_ncpio_sel) && (!flag_ncdelta_sel) && (!flag_cc_pi0) && (!flag_0p) && (!(eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio>0
---
>                   if (flag_FC && flag_numuCC && (!flag_ncpio_sel) && (!flag_ncdelta_sel) && (!flag_cc_pi0) && (!flag_0p) && (!(eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio==1
3463c3517
<                   if (flag_FC && flag_numuCC && (!flag_ncpio_sel) && (!flag_ncdelta_sel) && (!flag_cc_pi0) && (!(eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio>0
---
>                   if (flag_FC && flag_numuCC && (!flag_ncpio_sel) && (!flag_ncdelta_sel) && (!flag_cc_pi0) && (!(eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio==1
3515c3569
<                   if (flag_FC && flag_numuCC && (!flag_ncpio_sel) && (!flag_ncdelta_sel) && flag_0p && (eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio>0
---
>                   if (flag_FC && flag_numuCC && (!flag_ncpio_sel) && (!flag_ncdelta_sel) && flag_0p && (eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio==1
3519c3573
<                   if (flag_FC && flag_numuCC && (!flag_ncpio_sel) && (!flag_ncdelta_sel) && (!flag_0p) && (eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio>0
---
>                   if (flag_FC && flag_numuCC && (!flag_ncpio_sel) && (!flag_ncdelta_sel) && (!flag_0p) && (eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio==1
3523c3577,3589
<                   if (flag_FC && flag_numuCC && (!flag_ncpio_sel) && (!flag_ncdelta_sel) && (eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio>0
---
>                   if (flag_FC && flag_numuCC && (!flag_ncpio_sel) && (!flag_ncdelta_sel) && (eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio==1
>                                                      && !(eval.truth_isCC==0 && pfeval.truth_NCDelta==1 && flag_truth_inside))) return true;
>                   return false;
>     }else if (ch_name == "numuCC_0p_cc_pi0_overlay"){
>                   if (flag_FC && flag_numuCC && (!flag_ncpio_sel) && (!flag_ncdelta_sel) && flag_0p && (eval.truth_isCC==1 && flag_truth_inside && pfeval.truth_NprimPio==1
>                                                      && !(eval.truth_isCC==0 && pfeval.truth_NCDelta==1 && flag_truth_inside))) return true;
>                   return false;
>     }else if (ch_name == "numuCC_Np_cc_pi0_overlay"){
>                   if (flag_FC && flag_numuCC && (!flag_ncpio_sel) && (!flag_ncdelta_sel) && (!flag_0p) && (eval.truth_isCC==1 && flag_truth_inside && pfeval.truth_NprimPio==1
>                                                      && !(eval.truth_isCC==0 && pfeval.truth_NCDelta==1 && flag_truth_inside))) return true;
>                   return false;
>     }else if (ch_name == "numuCC_Xp_cc_pi0_overlay"){
>                   if (flag_FC && flag_numuCC && (!flag_ncpio_sel) && (!flag_ncdelta_sel) && (eval.truth_isCC==1 && flag_truth_inside && pfeval.truth_NprimPio==1
3527c3593
<                   if (flag_FC && flag_numuCC && (!flag_ncpio_sel) && (!flag_ncdelta_sel) && flag_0p && (!(eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio>0
---
>                   if (flag_FC && flag_numuCC && (!flag_ncpio_sel) && (!flag_ncdelta_sel) && flag_0p && (!(eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio==1
3532c3598
<                   if (flag_FC && flag_numuCC && (!flag_ncpio_sel) && (!flag_ncdelta_sel) && (!flag_0p) && (!(eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio>0
---
>                   if (flag_FC && flag_numuCC && (!flag_ncpio_sel) && (!flag_ncdelta_sel) && (!flag_0p) && (!(eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio==1
3537c3603
<                   if (flag_FC && flag_numuCC && (!flag_ncpio_sel) && (!flag_ncdelta_sel) && (!(eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio>0
---
>                   if (flag_FC && flag_numuCC && (!flag_ncpio_sel) && (!flag_ncdelta_sel) && (!(eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio==1
3571c3637
<       if (flag_FC && flag_ncdelta_sel && flag_0p && (eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio>0 
---
>       if (flag_FC && flag_ncdelta_sel && flag_0p && (eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio==1 
3576c3642
<       if (flag_FC && flag_ncdelta_sel && flag_0p && (!(eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio>0
---
>       if (flag_FC && flag_ncdelta_sel && flag_0p && (!(eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio==1
3583c3649
<       if (flag_FC  && flag_0p && (eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio>0 
---
>       if (flag_FC  && flag_0p && (eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio==1
3588c3654
<       if (flag_FC  && flag_0p && (!(eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio>0
---
>       if (flag_FC  && flag_0p && (!(eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio==1
3605c3671
<       if (flag_FC && flag_ncdelta_sel && (!flag_0p) && (eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio>0
---
>       if (flag_FC && flag_ncdelta_sel && (!flag_0p) && (eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio==1
3610c3676
<       if (flag_FC && flag_ncdelta_sel && (!flag_0p) && (!(eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio>0
---
>       if (flag_FC && flag_ncdelta_sel && (!flag_0p) && (!(eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio==1
3617c3683
<       if (flag_FC  && (!flag_0p) && (eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio>0
---
>       if (flag_FC  && (!flag_0p) && (eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio==1
3622c3688
<       if (flag_FC  && (!flag_0p) && (!(eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio>0
---
>       if (flag_FC  && (!flag_0p) && (!(eval.truth_isCC==0 && flag_truth_inside && pfeval.truth_NprimPio==1
3650a3717,3722
>     return false;
>   }else if(cut == "NCPi0_NCDelta_Np"){
>     if(eval.truth_isCC==0 && !(is_true_0p(pfeval)) && (pfeval.truth_NprimPio>0 || pfeval.truth_NCDelta==1)) return true;
>     return false;
>   }else if(cut == "NCPi0_NCDelta_0p"){
>     if(eval.truth_isCC==0 && is_true_0p(pfeval) && (pfeval.truth_NprimPio>0 || pfeval.truth_NCDelta==1)) return true;
Binary files wcp-uboone-bdt/lib/libWCPuBooNE_BDT_APP.so and wcp-uboone-bdt_older/lib/libWCPuBooNE_BDT_APP.so differ
Binary files wcp-uboone-bdt/lib/WCPuBooNE_BDT_APPDict_rdict.pcm and wcp-uboone-bdt_older/lib/WCPuBooNE_BDT_APPDict_rdict.pcm differ
diff -r wcp-uboone-bdt/.lock-waf_linux_build wcp-uboone-bdt_older/.lock-waf_linux_build
1c1
< argv = ['./wcb', 'configure', '--prefix=/home/hagaman/wc_framework/wcp-uboone-bdt']
---
> argv = ['./wcb', 'configure', '--prefix=~/wc_framework/wcp-uboone-bdt']
3c3
< environ = {'CONDA_SHLVL': '1', 'LD_LIBRARY_PATH': '/home/hagaman/root_install_dir/lib', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'CONDA_EXE': '/home/hagaman/anaconda3/bin/conda', 'SSH_CONNECTION': '130.199.23.11 54152 130.199.22.64 22', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'LANG': 'en_US.UTF-8', 'DISPLAY': 'localhost:11.0', 'CONDA_PREFIX': '/home/hagaman/anaconda3', 'DYLD_LIBRARY_PATH': '/home/hagaman/root_install_dir/lib', 'SSH_AUTH_SOCK': '/tmp/ssh-E9BcPFR37e/agent.2091', '_CE_M': '', 'ROOTSYS': '/home/hagaman/root_install_dir', 'XDG_SESSION_ID': '7', 'USER': 'hagaman', 'PWD': '/home/hagaman/wc_framework/wcp-uboone-bdt', 'HOME': '/home/hagaman', 'CONDA_PYTHON_EXE': '/home/hagaman/anaconda3/bin/python', 'CMAKE_PREFIX_PATH': '/home/hagaman/root_install_dir', 'LC_TERMINAL': 'iTerm2', 'SSH_CLIENT': '130.199.23.11 54152 22', 'JUPYTER_PATH': '/home/hagaman/root_install_dir/etc/notebook', 'LC_TERMINAL_VERSION': '3.3.9', 'XDG_DATA_DIRS': '/usr/local/share:/usr/share:/var/lib/snapd/desktop', 'SHLIB_PATH': '/home/hagaman/root_install_dir/lib', '_CE_CONDA': '', 'LIBPATH': '/home/hagaman/root_install_dir/lib', 'CONDA_PROMPT_MODIFIER': '(base) ', 'SSH_TTY': '/dev/pts/1', 'MAIL': '/var/mail/hagaman', 'TERM': 'vt100', 'SHELL': '/bin/bash', 'SHLVL': '1', 'PYTHONPATH': '/home/hagaman/root_install_dir/lib', 'MANPATH': '/home/hagaman/root_install_dir/man:/usr/local/man:/usr/local/share/man:/usr/share/man', 'LOGNAME': 'hagaman', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/1004/bus', 'XDG_RUNTIME_DIR': '/run/user/1004', 'PATH': '/home/hagaman/anaconda3/bin:/home/hagaman/anaconda3/condabin:/home/hagaman/root_install_dir/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin', 'CONDA_DEFAULT_ENV': 'base', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'OLDPWD': '/home/hagaman/wc_framework', '_': './wcb'}
---
> environ = {'CLUTTER_IM_MODULE': 'xim', 'CONDA_SHLVL': '1', 'LD_LIBRARY_PATH': '/home/hagaman/root_install_dir/lib', 'LS_COLORS': 'rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:', 'CONDA_EXE': '/home/hagaman/anaconda3/bin/conda', 'LESSCLOSE': '/usr/bin/lesspipe %s %s', 'XDG_MENU_PREFIX': 'gnome-', 'LANG': 'en_US.UTF-8', 'DISPLAY': ':1', 'GNOME_SHELL_SESSION_MODE': 'ubuntu', 'COLORTERM': 'truecolor', 'USERNAME': 'hagaman', 'CONDA_PREFIX': '/home/hagaman/anaconda3', 'DYLD_LIBRARY_PATH': '/home/hagaman/root_install_dir/lib', 'XDG_VTNR': '2', 'SSH_AUTH_SOCK': '/run/user/1004/keyring/ssh', '_CE_M': '', 'ROOTSYS': '/home/hagaman/root_install_dir', 'XDG_SESSION_ID': '3', 'USER': 'hagaman', 'DESKTOP_SESSION': 'ubuntu', 'QT4_IM_MODULE': 'xim', 'TEXTDOMAINDIR': '/usr/share/locale/', 'GNOME_TERMINAL_SCREEN': '/org/gnome/Terminal/screen/b66e1319_2a6e_4517_a881_ad8d126e48f2', 'PWD': '/home/hagaman/wc_framework/wcp-uboone-bdt', 'HOME': '/home/hagaman', 'CONDA_PYTHON_EXE': '/home/hagaman/anaconda3/bin/python', 'TEXTDOMAIN': 'im-config', 'CMAKE_PREFIX_PATH': '/home/hagaman/root_install_dir', 'SSH_AGENT_PID': '1801', 'QT_ACCESSIBILITY': '1', 'JUPYTER_PATH': '/home/hagaman/root_install_dir/etc/notebook', 'XDG_SESSION_TYPE': 'x11', 'XDG_DATA_DIRS': '/usr/share/ubuntu:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop', 'SHLIB_PATH': '/home/hagaman/root_install_dir/lib', '_CE_CONDA': '', 'XDG_SESSION_DESKTOP': 'ubuntu', 'GJS_DEBUG_OUTPUT': 'stderr', 'LIBPATH': '/home/hagaman/root_install_dir/lib', 'CONDA_PROMPT_MODIFIER': '(base) ', 'GTK_MODULES': 'gail:atk-bridge', 'WINDOWPATH': '2', 'TERM': 'vt100', 'SHELL': '/bin/bash', 'VTE_VERSION': '5202', 'QT_IM_MODULE': 'ibus', 'XMODIFIERS': '@im=ibus', 'IM_CONFIG_PHASE': '2', 'XDG_CURRENT_DESKTOP': 'ubuntu:GNOME', 'GPG_AGENT_INFO': '/run/user/1004/gnupg/S.gpg-agent:0:1', 'GNOME_TERMINAL_SERVICE': ':1.318', 'XDG_SEAT': 'seat0', 'SHLVL': '1', 'PYTHONPATH': '/home/hagaman/root_install_dir/lib', 'MANPATH': '/home/hagaman/root_install_dir/man:/usr/local/man:/usr/local/share/man:/usr/share/man', 'GDMSESSION': 'ubuntu', 'GNOME_DESKTOP_SESSION_ID': 'this-is-deprecated', 'LOGNAME': 'hagaman', 'DBUS_SESSION_BUS_ADDRESS': 'unix:path=/run/user/1004/bus', 'XDG_RUNTIME_DIR': '/run/user/1004', 'XAUTHORITY': '/run/user/1004/gdm/Xauthority', 'XDG_CONFIG_DIRS': '/etc/xdg/xdg-ubuntu:/etc/xdg', 'PATH': '/home/hagaman/anaconda3/bin:/home/hagaman/anaconda3/condabin:/home/hagaman/root_install_dir/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin', 'CONDA_DEFAULT_ENV': 'base', 'GJS_DEBUG_TOPICS': 'JS ERROR;JS LOG', 'SESSION_MANAGER': 'local/brussell.phy.bnl.gov:@/tmp/.ICE-unix/1724,unix/brussell.phy.bnl.gov:/tmp/.ICE-unix/1724', 'LESSOPEN': '| /usr/bin/lesspipe %s', 'GTK_IM_MODULE': 'ibus', '_': './wcb', 'OLDPWD': '/home/hagaman/wc_framework/LEEana'}
Only in wcp-uboone-bdt_older/: SetBranchStatus
diff -r wcp-uboone-bdt/src/master_cov_matrix.cxx wcp-uboone-bdt_older/src/master_cov_matrix.cxx
20d19
< 
23d21
< 
28a27,28
> 	 //return 1; // hacked because we're using lee weight for nc delta scaling
> 
1226c1226
< 	    std::cout << "Something wrong: cut/channel mismatch !" << std::endl;
---
> 	    std::cout << "Something wrong: cut/channel mismatch 1!" << std::endl;
1302c1302
< 	    std::cout << "Something wrong: cut/channel mismatch !" << std::endl;
---
> 	    std::cout << "Something wrong: cut/channel mismatch 2!" << std::endl;
Only in wcp-uboone-bdt_older/src: master_cov_matrix_from_github.txt
Only in wcp-uboone-bdt_older/src: mcm_1_from_github.txt
diff -r wcp-uboone-bdt/src/mcm_1.h wcp-uboone-bdt_older/src/mcm_1.h
780,781c780,783
<     double reweight = get_weight("add_weight", eval_cv, pfeval_cv, kine_cv, tagger_cv, get_rw_info());//automatically 1 if reweighting is not applied
<     std::get<2>(vec_events.at(i)) *= reweight;    
---
>     // this is commented out because we have no DetVar PF files
>     // before, it was using the 0p reweighting by default
>     //double reweight = get_weight("add_weight", eval_cv, pfeval_cv, kine_cv, tagger_cv, get_rw_info());//automatically 1 if reweighting is not applied
>     //std::get<2>(vec_events.at(i)) *= reweight;    
Only in wcp-uboone-bdt_older/src: mcm_2_from_github.txt
diff -r wcp-uboone-bdt/src/mcm_2.h wcp-uboone-bdt_older/src/mcm_2.h
228c228
<       //	  std::cout << i << " " << x[start_bin+i] << std::endl;
---
>       	  //std::cout << i << " " << x[start_bin+i] << std::endl;
820a821,822
> 
>   //std::cout << "lhagaman debug, option: " << option << "\n";
823c825
<   //std::cout << T_eval->GetEntries() << " " << T_weight->GetEntries() << " " << option << std::endl;
---
>   //std::cout << "lhagaman debug, T_eval getentries: "  << T_eval->GetEntries() << ", T_weight getentries: " << T_weight->GetEntries() << ", option: " << option << std::endl;
849c851
<     
---
> 
852a855,856
>       //std::cout << "lhagaman debug, histoname = " << histoname << "\n";
> 
863a868,870
> 
>       //std::cout << "\nlhagaman checking get_cut_pass function\n";
> 
865a873,874
>       //std::cout << "lhagaman finished checking get_cut_pass function, flag_pass = " << flag_pass << "\n";
>       
866a876
>         //std::cout << "lhagaman debug inside flag_pass\n";
880c890,892
<  
---
>     //if (reweight != 1) std::cout << "lhagaman debug, reweight = " << reweight << "\n";
>   
>     //std::cout << "lhagaman before before ifs\n";
881a894
>       //std::cout << "lhagaman before ifs\n";
1072a1086
> 	//std::cout << "lhagaman debug inside larger if\n";
1075c1089,1091
<         if(flag_reweight){
---
>         //if (reweight != 1) std::cout << "lhagaman debug outside if, reweight = " << reweight << "\n";
> 	if(flag_reweight){
>           //if (reweight != 1) std::cout << "lhagaman debug inside if, reweight = " << reweight << "\n";
1078c1094,1095
<           }else{
---
> 	   //std::cout << "lhagaman debug, reweight cor value: " << reweight << "\n";
> 	  }else{
1083c1100
<            std::get<2>(event_info).at(0) = reweight-1;
---
> 	   std::get<2>(event_info).at(0) = reweight-1;
1329a1347,1348
> 
> 
Only in wcp-uboone-bdt_older/src: mcm_2_new.h
diff -r wcp-uboone-bdt/src/TLee.cxx wcp-uboone-bdt_older/src/TLee.cxx
8,39c8,39
<   double x1[101]={0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
<                   11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
<                   21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
<                   31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
<                   41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
<                   51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
<                   61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
<                   71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
<                   81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
<                   91, 92, 93, 94, 95, 96, 97, 98, 99, 100};
<   
<   double yl[101]={0, 0, 0, 0.856632, 1.70317, 2.51005, 3.32075, 4.14046, 4.9693, 5.80646, 6.65117,
<                   7.5025, 8.35978, 9.22237, 10.0898, 10.9615, 11.8372, 12.7165, 13.5992, 14.4849, 15.3734,
<                   16.2646, 17.1583, 18.0543, 18.9524, 19.8526, 20.7547, 21.6586, 22.5642, 23.4715, 24.3803,
<                   25.2906, 26.2023, 27.1153, 28.0297, 28.9452, 29.8619, 30.7797, 31.6987, 32.6187, 33.5396,
<                   34.4616, 35.3845, 36.3083, 37.2329, 38.1584, 39.0847, 40.0118, 40.9396, 41.8682, 42.7975,
<                   43.7275, 44.6581, 45.5895, 46.5215, 47.454, 48.3873, 49.321, 50.2554, 51.1903, 52.1257,
<                   53.0617, 53.9982, 54.9352, 55.8727, 56.8107, 57.7491, 58.6881, 59.6274, 60.5673, 61.5075,
<                   62.4482, 63.3892, 64.3307, 65.2725, 66.2148, 67.1575, 68.1005, 69.0438, 69.9876, 70.9317,
<                   71.8761, 72.8209, 73.766, 74.7114, 75.6572, 76.6033, 77.5497, 78.4964, 79.4434, 80.3907,
<                   81.3383, 82.2862, 83.2342, 84.1827, 85.1314, 86.0804, 87.0296, 87.9791, 88.9288, 89.8788};
< 
<   double yh[101]={1.1478, 2.35971, 3.51917, 4.72422, 5.98186, 7.21064, 8.41858, 9.61053, 10.7896, 11.9582, 13.1179,
<                   14.27, 15.4155, 16.5552, 17.6898, 18.8197, 19.9454, 21.0673, 22.1858, 23.3011, 24.4133,
<                   25.5229, 26.6299, 27.7346, 28.837, 29.9374, 31.0358, 32.1322, 33.2271, 34.3201, 35.4117,
<                   36.5017, 37.5904, 38.6776, 39.7635, 40.8483, 41.9318, 43.0141, 44.0955, 45.1757, 46.2549,
<                   47.3331, 48.4104, 49.4868, 50.5623, 51.637, 52.7108, 53.7839, 54.8561, 55.9277, 56.9985,
<                   58.0686, 59.1381, 60.2068, 61.275, 62.3425, 63.4094, 64.4757, 65.5415, 66.6066, 67.6713,
<                   68.7354, 69.7989, 70.862, 71.9246, 72.9866, 74.0483, 75.1094, 76.1701, 77.2304, 78.2902,
<                   79.3496, 80.4085, 81.4672, 82.5253, 83.5831, 84.6406, 85.6976, 86.7542, 87.8105, 88.8665,
<                   89.9221, 90.9774, 92.0323, 93.0869, 94.1411, 95.1951, 96.2488, 97.3021, 98.3552, 99.4079,
<                   100.46, 101.513, 102.564, 103.616, 104.667, 105.718, 106.769, 107.82, 108.87, 109.92};
---
> 	double x1[101]={0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
> 		11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
> 		21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
> 		31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
> 		41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
> 		51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
> 		61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
> 		71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
> 		81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
> 		91, 92, 93, 94, 95, 96, 97, 98, 99, 100};
> 
> 	double yl[101]={0, 0, 0, 0.856632, 1.70317, 2.51005, 3.32075, 4.14046, 4.9693, 5.80646, 6.65117,
> 		7.5025, 8.35978, 9.22237, 10.0898, 10.9615, 11.8372, 12.7165, 13.5992, 14.4849, 15.3734,
> 		16.2646, 17.1583, 18.0543, 18.9524, 19.8526, 20.7547, 21.6586, 22.5642, 23.4715, 24.3803,
> 		25.2906, 26.2023, 27.1153, 28.0297, 28.9452, 29.8619, 30.7797, 31.6987, 32.6187, 33.5396,
> 		34.4616, 35.3845, 36.3083, 37.2329, 38.1584, 39.0847, 40.0118, 40.9396, 41.8682, 42.7975,
> 		43.7275, 44.6581, 45.5895, 46.5215, 47.454, 48.3873, 49.321, 50.2554, 51.1903, 52.1257,
> 		53.0617, 53.9982, 54.9352, 55.8727, 56.8107, 57.7491, 58.6881, 59.6274, 60.5673, 61.5075,
> 		62.4482, 63.3892, 64.3307, 65.2725, 66.2148, 67.1575, 68.1005, 69.0438, 69.9876, 70.9317,
> 		71.8761, 72.8209, 73.766, 74.7114, 75.6572, 76.6033, 77.5497, 78.4964, 79.4434, 80.3907,
> 		81.3383, 82.2862, 83.2342, 84.1827, 85.1314, 86.0804, 87.0296, 87.9791, 88.9288, 89.8788};
> 
> 	double yh[101]={1.1478, 2.35971, 3.51917, 4.72422, 5.98186, 7.21064, 8.41858, 9.61053, 10.7896, 11.9582, 13.1179,
> 		14.27, 15.4155, 16.5552, 17.6898, 18.8197, 19.9454, 21.0673, 22.1858, 23.3011, 24.4133,
> 		25.5229, 26.6299, 27.7346, 28.837, 29.9374, 31.0358, 32.1322, 33.2271, 34.3201, 35.4117,
> 		36.5017, 37.5904, 38.6776, 39.7635, 40.8483, 41.9318, 43.0141, 44.0955, 45.1757, 46.2549,
> 		47.3331, 48.4104, 49.4868, 50.5623, 51.637, 52.7108, 53.7839, 54.8561, 55.9277, 56.9985,
> 		58.0686, 59.1381, 60.2068, 61.275, 62.3425, 63.4094, 64.4757, 65.5415, 66.6066, 67.6713,
> 		68.7354, 69.7989, 70.862, 71.9246, 72.9866, 74.0483, 75.1094, 76.1701, 77.2304, 78.2902,
> 		79.3496, 80.4085, 81.4672, 82.5253, 83.5831, 84.6406, 85.6976, 86.7542, 87.8105, 88.8665,
> 		89.9221, 90.9774, 92.0323, 93.0869, 94.1411, 95.1951, 96.2488, 97.3021, 98.3552, 99.4079,
> 		100.46, 101.513, 102.564, 103.616, 104.667, 105.718, 106.769, 107.82, 108.87, 109.92};
43a44
> 
46,60c47,50
<   cout<<endl<<" ---> Exe_Feldman_Cousins_Data"<<endl;
<   
<   Set_fakedata( matrix_fakedata );
<   
<   //////////////////
<   
<   Minimization_Lee_strength_FullCov(1, 0);
<   
<   cout<<TString::Format(" ---> Best fit of Lee strength: chi2 %6.2f, %5.2f +/- %5.2f",
<                         minimization_chi2,
<                         minimization_Lee_strength_val,
<                         minimization_Lee_strength_err
<                         )<<endl;
<   
<   //////////////////
---
> 	cout<<endl;
> 	cout<<" -----------------------------------"<<endl;
> 	cout<<" Exe LEEx scan by data"<<endl;
> 	cout<<" -----------------------------------"<<endl;			      
62,75c52
<   double Lee_bestFit_data = minimization_Lee_strength_val;
<   double Lee_bestFit_err = minimization_Lee_strength_err;
<   double chi2_gmin_data = minimization_chi2;
<   vector<int>Lee_scan100_data;
<   vector<double>chi2_null_scan_data;
<   
<   TFile *file_data = new TFile("file_data.root", "recreate");
<   TTree *tree_data = new TTree("tree_data", "Feldman-Cousins");
< 
<   tree_data->Branch( "Lee_bestFit_data", &Lee_bestFit_data, "Lee_bestFit_data/D" );
<   tree_data->Branch( "Lee_bestFit_err", &Lee_bestFit_err, "Lee_bestFit_err/D" );
<   tree_data->Branch( "chi2_gmin_data", &chi2_gmin_data, "chi2_gmin_data/D");
<   tree_data->Branch( "Lee_scan100_data", &Lee_scan100_data );
<   tree_data->Branch( "chi2_null_scan_data", &chi2_null_scan_data );
---
> 	Set_fakedata( matrix_fakedata );
77,80c54,63
<   int num_scan = int(((Lee_true_hgh-Lee_true_low)/step)+0.5) + 1;
<   
<   for(int idx=1; idx<=num_scan; idx++ ) {
<     if( idx%(max(1, num_scan/10))==0 ) cout<<Form(" ---> scan %4.2f, %3d", idx*1./num_scan, idx)<<endl;
---
> 	//////////////////
> 
> 	Minimization_Lee_strength_FullCov(1, 0);
> 
> 	cout<<endl<<TString::Format(" ---> Best-fit Lee strength: LEEx = %6.4f, chi2 = %6.3f",
> 			minimization_Lee_strength_val,
> 			minimization_chi2
> 			)<<endl;    
> 
> 	//////////////////
81a65,85
> 	double Lee_bestFit_data = minimization_Lee_strength_val;
> 	double Lee_bestFit_err = minimization_Lee_strength_err;
> 	double chi2_gmin_data = minimization_chi2;
> 	vector<int>Lee_scan100_data;
> 	vector<double>chi2_null_scan_data;
> 
> 	TFile *file_data = new TFile("file_data.root", "recreate");
> 	TTree *tree_data = new TTree("tree_data", "Feldman-Cousins");
> 
> 	tree_data->Branch( "Lee_bestFit_data", &Lee_bestFit_data, "Lee_bestFit_data/D" );
> 	tree_data->Branch( "Lee_bestFit_err", &Lee_bestFit_err, "Lee_bestFit_err/D" );
> 	tree_data->Branch( "chi2_gmin_data", &chi2_gmin_data, "chi2_gmin_data/D");
> 	tree_data->Branch( "Lee_scan100_data", &Lee_scan100_data );
> 	tree_data->Branch( "chi2_null_scan_data", &chi2_null_scan_data );
> 
> 	int num_scan = int(((Lee_true_hgh-Lee_true_low)/step)+0.5) + 1;
> 
> 	for(int idx=1; idx<=num_scan; idx++ ) {
>     //if( idx%(max(1, (num_scan-1)/10))==0 ) cout<<Form(" ---> scan %4.2f, %3d", idx*1./(num_scan-1), idx)<<endl;
>     if( idx%(max(1, (num_scan-1)/10))==0 ) cout<<Form(" ---> scan %4.2f", idx*1./(num_scan-1))<<endl;
>     
100,101c104,108
<   cout<<endl<<" ---> Exe_Feldman_Cousins_Asimov"<<endl<<endl;
<   
---
>   cout<<endl;
>   cout<<" -----------------------------------"<<endl;
>   cout<<" Exe_Feldman_Cousins_Asimov"<<endl;
>   cout<<" -----------------------------------"<<endl;
>    	  
258c265,266
<         
---
> 
> 	/// CNP
261a270,276
> 
> 	/// Pearson
> 	//val_stat_cov = val_pred;
> 
> 	/// Neyman
> 	//val_stat_cov = val_meas;
> 	
274c289,290
<       
---
> 
>       minimization_NDF = matrix_delta.GetNcols();
276,278c292
<       chi2 = matrix_chi2(0,0);      
<       
<       ///////////////////////////////////////////////////////////////////////////
---
>       chi2 = matrix_chi2(0,0);
280c294,306
<       if( flag_Lee_minimization_after_constraint ) {// do the fitting on the spectra and cov_total after constraint
---
>       if( 0 ) {
> 	// TMatrixD matrix_gof_trans( bins_newworld, 20*2+26*2+11*3 );// oldworld, newworld
> 	// for(int idx=1; idx<=20; idx++) matrix_gof_trans(6+idx-1, idx-1) = 1;
> 	// for(int idx=1; idx<=20; idx++) matrix_gof_trans(26+6+idx-1, 20+idx-1) = 1;
> 	// for(int idx=1; idx<=26*2+11*3; idx++) matrix_gof_trans(26*2+idx-1, 40+idx-1) = 1;
> 	// TMatrixD matrix_gof_trans_T = matrix_gof_trans.T(); matrix_gof_trans.T(); 
> 
> 	// TMatrixD matrix_user_delta = matrix_delta * matrix_gof_trans;
> 	// TMatrixD matrix_user_delta_T = matrix_user_delta.T(); matrix_user_delta.T();
> 	// TMatrixD matrix_user_cov_total = matrix_gof_trans_T*matrix_cov_total*matrix_gof_trans;
> 	// TMatrixD matrix_user_cov_total_inv = matrix_user_cov_total; matrix_user_cov_total_inv.Invert();
> 	// minimization_NDF = matrix_user_delta.GetNcols();
> 	// chi2 = (matrix_user_delta*matrix_user_cov_total_inv*matrix_user_delta_T)(0,0);
282,408c308,340
<         if( 0 ) {
<           int num_Y = 26+26;
<           int num_X = matrix_cov_syst.GetNrows() - num_Y;
<           
<           matrix_pred.T(); matrix_meas.T();
<           TMatrixD matrix_pred_X = matrix_pred.GetSub(num_Y, num_Y+num_X-1, 0, 0);
<           TMatrixD matrix_meas_X = matrix_meas.GetSub(num_Y, num_Y+num_X-1, 0, 0);
< 
<           TMatrixD matrix_pred_Y = matrix_pred.GetSub(0, num_Y-1, 0, 0);
<           TMatrixD matrix_meas_Y = matrix_meas.GetSub(0, num_Y-1, 0, 0);
<           matrix_pred.T(); matrix_meas.T();
<         
<           TMatrixD matrix_XX = matrix_cov_total.GetSub(num_Y, num_Y+num_X-1, num_Y, num_Y+num_X-1);
<           TMatrixD matrix_XX_inv = matrix_XX;
<           matrix_XX_inv.Invert();
<         
<           TMatrixD matrix_YY = matrix_cov_total.GetSub(0, num_Y-1, 0, num_Y-1);
<         
<           TMatrixD matrix_YX = matrix_cov_total.GetSub(0, num_Y-1, num_Y, num_Y+num_X-1);
<           TMatrixD matrix_XY(num_X, num_Y); matrix_XY.Transpose(matrix_YX);
<         
<           TMatrixD matrix_Y_under_X = matrix_pred_Y + matrix_YX * matrix_XX_inv * (matrix_meas_X - matrix_pred_X);
<           TMatrixD matrix_YY_under_XX = matrix_YY - matrix_YX * matrix_XX_inv * matrix_XY;
<           
<           //////
<           
<           matrix_Y_under_X.T();
<           matrix_meas_Y.T();
<           
<           TMatrixD matrix_wicons_delta = matrix_Y_under_X - matrix_meas_Y;
<           TMatrixD matrix_wicons_delta_T = matrix_wicons_delta.T();
<           matrix_wicons_delta.T();
< 
<           TMatrixD matrix_YY_under_XX_inv = matrix_YY_under_XX;
<           matrix_YY_under_XX_inv.Invert();
<           
<           TMatrixD matrix_wicons_chi2 = matrix_wicons_delta * matrix_YY_under_XX_inv * matrix_wicons_delta_T;
<           double val_wicons_chi2 = matrix_wicons_chi2(0,0);
<           chi2 = val_wicons_chi2;       
<         }
<         
<         //////
< 
<         if( 1 ) {
<           
<           vector<int> vc_target_detailed_chs;    
<           for(int idx=0; idx<8; idx++) vc_target_detailed_chs.push_back( idx );
<           for(int idx=26; idx<26+8; idx++) vc_target_detailed_chs.push_back( idx );       
<           vector<int> vc_support_detailed_chs;
<           for(int idx=8; idx<26; idx++) vc_support_detailed_chs.push_back( idx );
<           for(int idx=26+8; idx<26+26; idx++) vc_support_detailed_chs.push_back( idx );
<           for(int idx=26+26; idx<137; idx++) vc_support_detailed_chs.push_back( idx );
< 
<           // vector<int> vc_target_detailed_chs;         
<           // for(int idx=0; idx<26; idx++) vc_target_detailed_chs.push_back( idx );       
<           // vector<int> vc_support_detailed_chs;
<           // for(int idx=26; idx<137; idx++) vc_support_detailed_chs.push_back( idx );
< 
<           //////
<           
<           int num_Y = vc_target_detailed_chs.size();
<           int num_X = vc_support_detailed_chs.size();
<           
<           TMatrixD matrix_gof_trans( bins_newworld, num_Y+num_X );// oldworld, newworld
<           int new_ch = -1;
<           
<           for(int idx=0; idx<num_Y; idx++) {
<             int old_ch = vc_target_detailed_chs.at(idx);
<             new_ch++;
<             matrix_gof_trans(old_ch, new_ch) = 1;
<           }
<           
<           for(int idx=0; idx<num_X; idx++) {
<             int old_ch = vc_support_detailed_chs.at(idx);
<             new_ch++;
<             matrix_gof_trans(old_ch, new_ch) = 1;
<           }
<           
<           TMatrixD matrix_gof_trans_T = matrix_gof_trans.T();
<           matrix_gof_trans.T();
< 
<           TMatrixD matrix_pred_userA = matrix_pred * matrix_gof_trans;
<           TMatrixD matrix_meas_userA = matrix_meas * matrix_gof_trans;
<           TMatrixD matrix_cov_total_userA = matrix_gof_trans_T * matrix_cov_total * matrix_gof_trans;
< 
<           //////
<           
<           matrix_pred_userA.T(); matrix_meas_userA.T();
<           TMatrixD matrix_pred_X = matrix_pred_userA.GetSub(num_Y, num_Y+num_X-1, 0, 0);
<           TMatrixD matrix_meas_X = matrix_meas_userA.GetSub(num_Y, num_Y+num_X-1, 0, 0);
< 
<           TMatrixD matrix_pred_Y = matrix_pred_userA.GetSub(0, num_Y-1, 0, 0);
<           TMatrixD matrix_meas_Y = matrix_meas_userA.GetSub(0, num_Y-1, 0, 0);
<           matrix_pred_userA.T(); matrix_meas_userA.T();
<         
<           TMatrixD matrix_XX = matrix_cov_total_userA.GetSub(num_Y, num_Y+num_X-1, num_Y, num_Y+num_X-1);
<           TMatrixD matrix_XX_inv = matrix_XX;
<           matrix_XX_inv.Invert();
<         
<           TMatrixD matrix_YY = matrix_cov_total_userA.GetSub(0, num_Y-1, 0, num_Y-1);
<         
<           TMatrixD matrix_YX = matrix_cov_total_userA.GetSub(0, num_Y-1, num_Y, num_Y+num_X-1);
<           TMatrixD matrix_XY(num_X, num_Y); matrix_XY.Transpose(matrix_YX);
<         
<           TMatrixD matrix_Y_under_X = matrix_pred_Y + matrix_YX * matrix_XX_inv * (matrix_meas_X - matrix_pred_X);
<           TMatrixD matrix_YY_under_XX = matrix_YY - matrix_YX * matrix_XX_inv * matrix_XY;
<           
<           //////
<           
<           matrix_Y_under_X.T();
<           matrix_meas_Y.T();
<           
<           TMatrixD matrix_wicons_delta = matrix_Y_under_X - matrix_meas_Y;
<           TMatrixD matrix_wicons_delta_T = matrix_wicons_delta.T();
<           matrix_wicons_delta.T();
< 
<           TMatrixD matrix_YY_under_XX_inv = matrix_YY_under_XX;
<           matrix_YY_under_XX_inv.Invert();
<           
<           TMatrixD matrix_wicons_chi2 = matrix_wicons_delta * matrix_YY_under_XX_inv * matrix_wicons_delta_T;
<           double val_wicons_chi2 = matrix_wicons_chi2(0,0);
<           chi2 = val_wicons_chi2;
<           
<         }
<         
<       }// flag_Lee_minimization_after_constraint
<       
---
> 	
> 	/*
> 	/// 1e0p
> 	TMatrixD matrix_gof_trans( bins_newworld, 26*2+26*2+11*3 );// oldworld, newworld
> 	for(int idx=1; idx<=26*2; idx++) matrix_gof_trans(idx-1, idx-1) = 1;
> 	for(int idx=1; idx<=26*2; idx++) matrix_gof_trans(26*4+idx-1, 26*2+idx-1) = 1;
> 	for(int idx=1; idx<=11*3; idx++) matrix_gof_trans(26*8+idx-1, 26*4+idx-1) = 1;
> 	TMatrixD matrix_gof_trans_T = matrix_gof_trans.T(); matrix_gof_trans.T(); 
> 	*/
> 	/*
> 	/// 1eNp
> 	TMatrixD matrix_gof_trans( bins_newworld, 26*2+26*2+11*3 );// oldworld, newworld
> 	for(int idx=1; idx<=26*2; idx++) matrix_gof_trans(26*2+idx-1, idx-1) = 1;
> 	for(int idx=1; idx<=26*2; idx++) matrix_gof_trans(26*6+idx-1, 26*2+idx-1) = 1;
> 	for(int idx=1; idx<=11*3; idx++) matrix_gof_trans(26*8+idx-1, 26*4+idx-1) = 1;
> 	TMatrixD matrix_gof_trans_T = matrix_gof_trans.T(); matrix_gof_trans.T(); 
> 	*/
> 	
> 	/// check
> 	TMatrixD matrix_gof_trans( bins_newworld, bins_newworld );// oldworld, newworld
> 	for(int idx=1; idx<=bins_newworld; idx++) matrix_gof_trans(idx-1, idx-1) = 1;
> 	TMatrixD matrix_gof_trans_T = matrix_gof_trans.T(); matrix_gof_trans.T();
> 	
> 	
> 	
> 	TMatrixD matrix_user_delta = matrix_delta * matrix_gof_trans;
> 	TMatrixD matrix_user_delta_T = matrix_user_delta.T(); matrix_user_delta.T();
> 	TMatrixD matrix_user_cov_total = matrix_gof_trans_T*matrix_cov_total*matrix_gof_trans;
> 	TMatrixD matrix_user_cov_total_inv = matrix_user_cov_total; matrix_user_cov_total_inv.Invert();
> 	minimization_NDF = matrix_user_delta.GetNcols();
> 	chi2 = (matrix_user_delta*matrix_user_cov_total_inv*matrix_user_delta_T)(0,0);
>       }
>             
420d351
<   //min_Lee.SetVariableLowerLimit(0, 0);
424a356,358
>   else {
>     minimization_NDF = minimization_NDF -1;
>   }
514a449,468
>   
>   // for(int itoy=1; itoy<=num_toy; itoy++) {    
>   //   TMatrixD matrix_element(bins_newworld, 1);    
>   //   for(int ibin=0; ibin<bins_newworld; ibin++) {
>   //     if( matrix_eigenvalue(ibin)>=0 ) {
>   //       matrix_element(ibin,0) = rand->Gaus( 0, sqrt( matrix_eigenvalue(ibin) ) );
>   //     }
>   //     else {
>   //       matrix_element(ibin,0) = 0;
>   //     }      
>   //   }
>   //   TMatrixD matrix_variation = matrix_eigenvector * matrix_element;
>   //   for(int ibin=0; ibin<bins_newworld; ibin++) {
>   //     double val_with_syst = matrix_variation(ibin,0) + map_pred_spectrum_newworld_bin[ibin];// key point
>   //     if( val_with_syst<0 ) val_with_syst = 0;
>   //     map_toy_variation[itoy][ibin] = rand->PoissonD( val_with_syst );
>   //   }
>   // }
> 
>   
516c470,476
<     TMatrixD matrix_element(bins_newworld, 1);    
---
>     TMatrixD matrix_element(bins_newworld, 1);
> 
>     int eff_line = 0;
>     
>   RANDOM_AGAIN:
>     eff_line++;
>     
524c484
<     }
---
>     }    
525a486,497
>     
>     bool FLAG_negtive = 0;
>     for(int ibin=0; ibin<bins_newworld; ibin++) {
>       double val_with_syst = matrix_variation(ibin,0) + map_pred_spectrum_newworld_bin[ibin];// key point
>       if( val_with_syst<0 ) {
>     	FLAG_negtive = 1;
>     	break;
>       }
>     }
>     
>     if( FLAG_negtive ) goto RANDOM_AGAIN;    
>     
528d499
<       if( val_with_syst<0 ) val_with_syst = 0;
530a502,503
> 
>     //cout<<" effline "<<eff_line<<endl;
532c505,506
<     
---
>   
>   
556a531,541
>     /*
>     if( val_meas==1 ) {
>       if( val_pred<0.461 ) {// DocDB-32520, when the prediction is sufficiently low
>     	double numerator = pow(val_pred-val_meas, 2);
>     	double denominator = 2*( val_pred - val_meas + val_meas*log(val_meas/val_pred) );
>     	matrix_stat_cov(idx,idx) = numerator/denominator;
>       }
>     }
>     */    
> 
>     
564c549,550
<     
---
>    
> 
592a579,589
>     /*
>     if( val_meas==1 ) {
>       if( val_pred<0.461 ) {// DocDB-32520, when the prediction is sufficiently low
>     	double numerator = pow(val_pred-val_meas, 2);
>     	double denominator = 2*( val_pred - val_meas + val_meas*log(val_meas/val_pred) );
>     	matrix_stat_cov(idx,idx) = numerator/denominator;
>       }
>     }
>     */
>     
>     
600a598
> 
744c742
<   func_xy_title(h1_pred_clone, "Measurement bin index", "Entries"); func_title_size(h1_pred_clone, 0.065, 0.065, 0.065, 0.065);
---
>   func_xy_title(h1_pred_clone, "Bin index", "Entries"); func_title_size(h1_pred_clone, 0.065, 0.065, 0.065, 0.065);
872d869
< 
878,879c875,876
<   double sigma_global_AA = 0;
<   double sigma_global_BB = 0;
---
>   //double sigma_global_AA = 0;
>   //double sigma_global_BB = 0;
1080c1077
< ///////////////////////////////////////////////////////// ccc
---
> ///////////////////////////////////////////////////////// cccf
1130,1132c1127,1130
<   if( index==0 ) {    
<     flag_axis_userAA = 1;
<     flag_axis_userAB = 1;
---
>   if( 1 ) {
>     if( index==1 ) {    
>       flag_axis_userAA = 1;
>       flag_axis_userAB = 1;
1134,1135c1132,1133
<     title_axis_user = "Reco neutrino energy (MeV)";
<     axis_user_divisions = 503;
---
>       title_axis_user = "Reco neutrino energy (MeV)";
>       axis_user_divisions = 503;
1137,1140c1135,1138
<     userAA_index_low = 0;
<     userAA_index_hgh = 26;
<     userAA_value_low = 0;
<     userAA_value_hgh = 2600;
---
>       userAA_index_low = 0;
>       userAA_index_hgh = 26;
>       userAA_value_low = 0;
>       userAA_value_hgh = 2600;
1142,1146c1140,1144
<     userAB_index_low = 26;
<     userAB_index_hgh = 52;
<     userAB_value_low = 0;
<     userAB_value_hgh = 2600;    
<   }
---
>       userAB_index_low = 26;
>       userAB_index_hgh = 52;
>       userAB_value_low = 0;
>       userAB_value_hgh = 2600;    
>     }
1148,1150c1146,1148
<   if( index==0 ) {    
<     flag_axis_userAA = 1;
<     flag_axis_userAB = 1;
---
>     if( index==9 ) {    
>       flag_axis_userAA = 1;
>       flag_axis_userAB = 1;
1152,1153c1150,1151
<     title_axis_user = "Reco neutrino energy (MeV)";
<     axis_user_divisions = 504;
---
>       title_axis_user = "Reco neutrino energy (MeV)";
>       axis_user_divisions = 504;
1155,1158c1153,1156
<     userAA_index_low = 0;
<     userAA_index_hgh = 31;
<     userAA_value_low = 0;
<     userAA_value_hgh = 3100;
---
>       userAA_index_low = 0;
>       userAA_index_hgh = 31;
>       userAA_value_low = 0;
>       userAA_value_hgh = 3100;
1160,1164c1158,1162
<     userAB_index_low = 31;
<     userAB_index_hgh = 62;
<     userAB_value_low = 0;
<     userAB_value_hgh = 3100;    
<   }
---
>       userAB_index_low = 31;
>       userAB_index_hgh = 62;
>       userAB_value_low = 0;
>       userAB_value_hgh = 3100;    
>     }
1166,1168c1164,1166
<   if( index==0 ) {
<     flag_axis_userAA = 1;
<     flag_axis_userAB = 0;
---
>     if( index==2 || index==3 || index==4 ) {
>       flag_axis_userAA = 1;
>       flag_axis_userAB = 0;
1170,1171c1168,1169
<     title_axis_user = "Reco kinetic energy of #pi^{0} (MeV)";
<     axis_user_divisions = 508;
---
>       title_axis_user = "Reco kinetic energy of #pi^{0} (MeV)";
>       axis_user_divisions = 508;
1173,1177c1171,1175
<     userAA_index_low = 0;
<     userAA_index_hgh = 11;
<     userAA_value_low = 0;
<     userAA_value_hgh = 1100;    
<   }
---
>       userAA_index_low = 0;
>       userAA_index_hgh = 11;
>       userAA_value_low = 0;
>       userAA_value_hgh = 1100;    
>     }
1179,1181c1177,1179
<   if( index==0 ) {
<     flag_axis_userAA = 1;
<     flag_axis_userAB = 0;
---
>     if( index==5 ) {
>       flag_axis_userAA = 1;
>       flag_axis_userAB = 0;
1183,1184c1181,1182
<     title_axis_user = "Reco neutrino energy (MeV)";
<     axis_user_divisions = 508;
---
>       title_axis_user = "Reco neutrino energy (MeV)";
>       axis_user_divisions = 508;
1186,1190c1184,1188
<     userAA_index_low = 0;
<     userAA_index_hgh = 26;
<     userAA_value_low = 0;
<     userAA_value_hgh = 2600;    
<   }
---
>       userAA_index_low = 0;
>       userAA_index_hgh = 26;
>       userAA_value_low = 0;
>       userAA_value_hgh = 2600;    
>     }
1192,1194c1190,1192
<   if( index==0 ) {
<     flag_axis_userAA = 1;
<     flag_axis_userAB = 0;
---
>     if( index==6 ) {
>       flag_axis_userAA = 1;
>       flag_axis_userAB = 0;
1196,1197c1194,1195
<     title_axis_user = "Reco neutrino energy (MeV)";
<     axis_user_divisions = 508;
---
>       title_axis_user = "Reco neutrino energy (MeV)";
>       axis_user_divisions = 508;
1199,1203c1197,1201
<     userAA_index_low = 0;
<     userAA_index_hgh = 18;
<     userAA_value_low = 800;
<     userAA_value_hgh = 2600;    
<   }
---
>       userAA_index_low = 0;
>       userAA_index_hgh = 18;
>       userAA_value_low = 800;
>       userAA_value_hgh = 2600;    
>     }
1205,1207c1203,1205
<   if( index==0 ) {
<     flag_axis_userAA = 1;
<     flag_axis_userAB = 0;
---
>     if( index==7 ) {
>       flag_axis_userAA = 1;
>       flag_axis_userAB = 0;
1209,1210c1207,1208
<     title_axis_user = "Reco neutrino energy (MeV)";
<     axis_user_divisions = 508;
---
>       title_axis_user = "Reco neutrino energy (MeV)";
>       axis_user_divisions = 508;
1212,1216c1210,1227
<     userAA_index_low = 0;
<     userAA_index_hgh = 8;
<     userAA_value_low = 0;
<     userAA_value_hgh = 800;    
<   }
---
>       userAA_index_low = 0;
>       userAA_index_hgh = 8;
>       userAA_value_low = 0;
>       userAA_value_hgh = 800;    
>     }
>     
>     if( index==8 ) {
>       flag_axis_userAA = 1;
>       flag_axis_userAB = 0;
> 
>       title_axis_user = "Reco neutrino energy (MeV)";
>       axis_user_divisions = 508;
>       
>       userAA_index_low = 0;
>       userAA_index_hgh = 26;
>       userAA_value_low = 0;
>       userAA_value_hgh = 2600;    
>     }
1218,1220c1229,1231
<   if( index==0 ) {
<     flag_axis_userAA = 1;
<     flag_axis_userAB = 0;
---
>     // if( index==101 ) {
>     //   flag_axis_userAA = 1;
>     //   flag_axis_userAB = 0;
1222,1223c1233,1234
<     title_axis_user = "Reco neutrino energy (MeV)";
<     axis_user_divisions = 508;
---
>     //   title_axis_user = "Reco neutrino energy (MeV)";
>     //   axis_user_divisions = 508;
1225,1228c1236,1258
<     userAA_index_low = 0;
<     userAA_index_hgh = 26;
<     userAA_value_low = 0;
<     userAA_value_hgh = 2600;    
---
>     //   userAA_index_low = 0;
>     //   userAA_index_hgh = 6;
>     //   userAA_value_low = 0;
>     //   userAA_value_hgh = 600;    
>     // }
>     
>     // if( index==2001 ) {    
>     //   flag_axis_userAA = 1;
>     //   flag_axis_userAB = 1;
> 
>     //   title_axis_user = "Reco neutrino energy (MeV)";
>     //   axis_user_divisions = 502;
>       
>     //   userAA_index_low = 0;
>     //   userAA_index_hgh = 6;
>     //   userAA_value_low = 0;
>     //   userAA_value_hgh = 600;
>     
>     //   userAB_index_low = 6;
>     //   userAB_index_hgh = 12;
>     //   userAB_value_low = 0;
>     //   userAB_value_hgh = 600;    
>     // }    
1231d1260
<   
1284a1314,1323
> 
>     TFile *userfile = new TFile("file_user_no.root", "recreate");
>     TMatrixD matrix_gof_pred = matrix_pred_Y; matrix_gof_pred.T();
>     TMatrixD matrix_gof_meas = matrix_data_Y; matrix_gof_meas.T();
>     TMatrixD matrix_gof_syst = matrix_YY;
>     matrix_gof_pred.Write("matrix_gof_pred");
>     matrix_gof_meas.Write("matrix_gof_meas");
>     matrix_gof_syst.Write("matrix_gof_syst");
>     userfile->Close();
>     
1287c1326
<   ///////////////////////////// goodness of fit, Pearson's format
---
>   ///////////////////////////// goodness of fit, Pearson's format test
1290a1330,1331
>   //double array_pred_protect[11] = {0};
>   //array_pred_protect[1] = {0.461};
1298c1339
<     
---
>       
1301,1303c1342,1344
<     //     double numerator = pow(val_pred-val_data, 2);
<     //     double denominator = 2*( val_pred - val_data + val_data*log(val_data/val_pred) );
<     //     matrix_goodness_cov_total_noConstraint(i,i) = numerator/denominator;
---
>     // 	double numerator = pow(val_pred-val_data, 2);
>     // 	double denominator = 2*( val_pred - val_data + val_data*log(val_data/val_pred) );
>     // 	matrix_goodness_cov_total_noConstraint(i,i) = numerator/denominator;
1305a1347
>     
1309c1351
<     if( int_data>=1 && int_data<=10) {
---
>     if( int_data>=1 && int_data<=10 ) {
1311c1353
< 	double numerator = pow(val_pred-val_data, 2);
---
>     	double numerator = pow(val_pred-val_data, 2);
1313c1355,1357
< 	matrix_goodness_cov_total_noConstraint(i,i) = numerator/denominator;
---
>     	matrix_goodness_cov_total_noConstraint(i,i) = numerator/denominator;
> 
>     	cout<<" --------> Protection Protection"<<endl;
1316c1360
< 
---
>     
1524,1525c1568,1569
<     //matrix_XX(ibin-1, ibin-1) += matrix_pred_X(ibin-1, 0);// Pearson's term for statistics
< 
---
>     
>     //matrix_XX(ibin-1, ibin-1) += matrix_pred_X(ibin-1, 0);// Pearson's term for statistics test
1539c1583
< 
---
>     
1578,1581c1622,1625
<   cout<<endl;
<   cout<<TString::Format(" ---> %6d befor constraint: %6.2f %6.2f", index, pred_cv_before, sqrt(pred_err_before) )<<endl;
<   cout<<TString::Format(" ---> %6d after constraint: %6.2f %6.2f", index, pred_cv_after, sqrt(pred_err_after) )<<endl;
<   cout<<endl;
---
>   // cout<<endl;
>   // cout<<TString::Format(" ---> %6d befor constraint: %6.2f %6.2f", index, pred_cv_before, sqrt(pred_err_before) )<<endl;
>   // cout<<TString::Format(" ---> %6d after constraint: %6.2f %6.2f", index, pred_cv_after, sqrt(pred_err_after) )<<endl;
>   // cout<<endl;
1582a1627,1630
>   // for(int idx=0; idx<num_Y; idx++) {
>   //   cout<<TString::Format(" ---> bin %3d, before/after  %3.1f  %3.1f", idx+1, matrix_pred_Y(idx, 0), matrix_Y_under_X(idx, 0))<<endl;
>   // }
>   // cout<<endl;
1585c1633
<   ///////////////////////////// goodness of fit, Pearson's format
---
>   ///////////////////////////// goodness of fit, Pearson's format test
1592d1639
< 
1601d1647
< 
1612d1657
< 
1802c1847,1855
<   roostr = TString::Format("canv_spectra_wi2no_%02d.png", index); canv_spectra_wi2no->SaveAs(roostr);
---
>   //roostr = TString::Format("canv_spectra_wi2no_%02d.png", index); canv_spectra_wi2no->SaveAs(roostr);
>   
>   //h1_spectra_wi2no->SaveAs("file_h1_spectra_wi2no.root");    
> 
>   // for(int ibin=1; ibin<=8; ibin++) {
>   //   double cv_no = h1_pred_Y_noConstraint->GetBinContent(ibin);
>   //   double err_no = h1_pred_Y_noConstraint->GetBinError(ibin);
>   //   double cv_wi = h1_pred_Y_wiConstraint->GetBinContent(ibin);
>   //   double err_wi = h1_pred_Y_wiConstraint->GetBinError(ibin);
1804c1857,1859
<   //h1_spectra_wi2no->SaveAs(roostr_wi2no+".root");
---
>   //   cout<<TString::Format(" ---> %d, (no con) %5.2f %5.2f, relerr %5.2f, (wi con) %5.2f %5.2f, relerr %5.2f",
>   // 			  ibin, cv_no, err_no, err_no/cv_no, cv_wi, err_wi, err_wi/cv_wi)<<endl;    
>   // }
1825a1881,1894
> 
>   /* 
>   cout<<endl;
>   double data_FC = 0;
>   double data_PC = 0;
>   for( int i=0; i<8; i++ ) {
>     data_FC += matrix_data_Y(i, 0);
>     data_PC += matrix_data_Y(i+8, 0);
>   }
>   cout<<" ---> data "<< data_FC<<"\t"<<data_PC<<endl;
>   cout<<" ---> pred noConstraint "<<h1_pred_Y_noConstraint->Integral(1,8)<<"\t"<<h1_pred_Y_noConstraint->Integral(9,16)<<endl;
>   cout<<" ---> pred wiConstraint "<<h1_pred_Y_wiConstraint->Integral(1,8)<<"\t"<<h1_pred_Y_wiConstraint->Integral(9,16)<<endl;
>   cout<<endl;
>   */
1827a1897,1899
>   // h1_pred_Y_wiConstraint->SetMaximum(40);
>   // lg_top_total->SetX1(0.55); lg_top_total->SetX2(0.95);
>   // lg_top_total->SetX1(0.2); lg_top_total->SetX2(0.4);
1828a1901,1910
>   
>   if( index==1001 || index==1002 || index==1003 ) {
>     lg_top_total->SetX1(0.2); lg_top_total->SetX2(0.4);
> 
>     if( index==1001 || index==1002 )
>       lg_top_total->AddEntry("", TString::Format("#color[%d]{LEEx = %3.1f}", kGreen+1, scaleF_Lee), "");
>     if( index==1003 )
>       lg_top_total->AddEntry("", TString::Format("#color[%d]{Best-fit LEEx = %3.1f}", kGreen+1, scaleF_Lee), "");
>   }
>   
1866a1949,1952
> 
>   if( index==1001 || index==1002 || index==1003 ) {
>     h1_pred_Y_noConstraint_rel_error->SetXTitle("Reco neutrino energy (x100 MeV)");
>   }
1964,1965d2049
<   int color_reweight   = kYellow+1;
<   int color_reweight_cor   = kYellow-9;
1967,1968c2051,2053
<   
<     
---
>   int color_reweight   = kYellow+1;
>   int color_reweight_cor = kYellow-9;
> 
2001,2002c2086,2089
<   TH1D *h1_reweight_relerr = new TH1D("h1_reweight_relerr", "", rows, 0, rows);
<   TH1D *h1_reweight_cor_relerr = new TH1D("h1_reweight_cor_relerr", "", rows, 0, rows);
---
>   TH1D *h1_reweight_relerr = new TH1D("h1_reweight_relerr", "", rows, 0, rows); 
>   TH1D *h1_reweight_cor_relerr = new TH1D("h1_reweight_cor_relerr", "", rows, 0, rows); 
>   
>   //cout << "lhagaman debug, rows = " << rows << "\n";
2036,2037c2123,2126
<         double cov_reweight   = matrix_absolute_reweight_cov_newworld(ibin-1, ibin-1);
<         double cov_reweight_cor   = matrix_absolute_reweight_cor_cov_newworld(ibin-1, ibin-1);
---
> 	double cov_reweight   = matrix_absolute_reweight_cov_newworld(ibin-1, ibin-1);
> 	double cov_reweight_cor   = matrix_absolute_reweight_cor_cov_newworld(ibin-1, ibin-1);
> 
>         //cout << "lhagaman debug, cov_reweight_cor = " << cov_reweight_cor << "\n";
2039,2042d2127
<         // if( val_cv==0 || val_cv<1e-3) {
<         //   cout<<" CV==0 at bin "<<ibin<<" "<<val_cv<<endl;
<         // }
<         
2061c2146
<           h1_reweight_cor_fraction->SetBinContent(ibin, cov_reweight_cor*100./cov_total );
---
> 	  h1_reweight_cor_fraction->SetBinContent(ibin, cov_reweight_cor*100./cov_total );
2106c2191
<   h1_Xs_relerr->Draw("same hist"); h1_Xs_relerr->SetLineColor(color_Xs); 
---
>   h1_Xs_relerr->Draw("same hist"); h1_Xs_relerr->SetLineColor(color_Xs);  
2108c2193
<   if(flag_syst_reweight_cor) h1_reweight_cor_relerr->Draw("same hist"); h1_reweight_cor_relerr->SetLineColor(color_reweight_cor); 
---
>   if(flag_syst_reweight_cor) h1_reweight_cor_relerr->Draw("same hist"); h1_reweight_cor_relerr->SetLineColor(color_reweight_cor);
2110c2195
< 
---
>   
2120c2205
<   if(flag_syst_reweight_cor) lg_relerr_total->AddEntry(h1_reweight_cor_relerr, "Reweight cor", "l");  
---
>   if(flag_syst_reweight_cor) lg_relerr_total->AddEntry(h1_reweight_cor_relerr, "Reweight cor", "l");
2136a2222
>   
2144a2231
>   
2170c2257
<   lg_fraction_total->AddEntry(h1_Xs_fraction, "Xs", "f");  
---
>   lg_fraction_total->AddEntry(h1_Xs_fraction, "Xs", "f");
2172c2259
<   if(flag_syst_reweight_cor) lg_fraction_total->AddEntry(h1_reweight_cor_fraction, "Reweight cor", "f");
---
>   if(flag_syst_reweight_cor) lg_fraction_total->AddEntry(h1_reweight_cor_fraction, "Reweight cor", "f");  
2257a2345
>       //if( scaleF_Lee<=0 ) val_mc_stat_cov = gh_mc_stat_bin[ibin]->Eval( 0 );
2264c2352
< 
---
> /*
2277d2364
< 
2282c2369
< 
---
> */
2299c2386
<     
---
> 
2307c2394
<                 
---
> 
2320a2408
>     
2388c2476
<             
---
> 
2434,2503c2522
<   
<   map_input_spectrum_ch_str[1] = "nueCC_FC_norm";
<   map_input_spectrum_ch_str[2] = "nueCC_PC_norm";
<   map_input_spectrum_ch_str[3] = "numuCC_FC_norm";
<   map_input_spectrum_ch_str[4] = "numuCC_PC_norm";
<   map_input_spectrum_ch_str[5] = "CCpi0_FC_norm";
<   map_input_spectrum_ch_str[6] = "CCpi0_PC_norm";
<   map_input_spectrum_ch_str[7] = "NCpi0_norm";
<   map_input_spectrum_ch_str[8] = "Lee_FC";
<   map_input_spectrum_ch_str[9] = "Lee_PC"; 
<   map_input_spectrum_ch_str[10]= "nueCC_FC_ext";
<   map_input_spectrum_ch_str[11]= "nueCC_PC_ext";
<   map_input_spectrum_ch_str[12]= "numuCC_FC_ext";
<   map_input_spectrum_ch_str[13]= "numuCC_PC_ext";
<   map_input_spectrum_ch_str[14]= "CCpi0_FC_ext";
<   map_input_spectrum_ch_str[15]= "CCpi0_PC_ext";
<   map_input_spectrum_ch_str[16]= "NCpi0_ext";
< 
<   /// flag for LEE channels corresponding to the cov_input.txt
<   map_Lee_ch[8] = 1;
<   map_Lee_ch[9] = 1;
<   
< 
<   ///////////////////////////////////////
< 
<   //for(int idx=1; idx<=16; idx++) map_input_spectrum_ch_str[idx] = TString::Format("pred_%02d", idx);
<   
<   /////////////////////////////////////// case: separate nueCC signal and bkg
<   /*
<   for(int idx=1; idx<=18; idx++) map_input_spectrum_ch_str[idx] = TString::Format("pred_%02d", idx);
<   map_Lee_ch[8] = 1;
<   map_Lee_ch[9] = 1;
<   */
<   /////////////////////////////////////// case: fake data
<   /*
<   map_input_spectrum_ch_str[1] = "nueCC_FC_norm";
<   map_input_spectrum_ch_str[2] = "nueCC_PC_norm";
<   map_input_spectrum_ch_str[3] = "numuCC_FC_norm";
<   map_input_spectrum_ch_str[4] = "numuCC_PC_norm";
<   map_input_spectrum_ch_str[5] = "CCpi0_FC_norm";
<   map_input_spectrum_ch_str[6] = "CCpi0_PC_norm";
<   map_input_spectrum_ch_str[7] = "NCpi0_norm";
<   map_input_spectrum_ch_str[8] = "Lee_FC";
<   map_input_spectrum_ch_str[9] = "Lee_PC";
<   
<   /// flag for LEE channels corresponding to the cov_input.txt
<   map_Lee_ch[8] = 1;
<   map_Lee_ch[9] = 1;
<   */
<   /////////////////////////////////////// case: 1u0p and 1uNp
<  /* 
<   map_input_spectrum_ch_str[1] = "nueCC_FC_norm";
<   map_input_spectrum_ch_str[2] = "nueCC_PC_norm";
<   map_input_spectrum_ch_str[3] = "numuCC_FC_1u0p_norm";
<   map_input_spectrum_ch_str[4] = "numuCC_PC_1u0p_norm";
<   map_input_spectrum_ch_str[5] = "numuCC_FC_1uNp_norm";
<   map_input_spectrum_ch_str[6] = "numuCC_PC_1uNp_norm";
<   map_input_spectrum_ch_str[7] = "CCpi0_FC_norm";
<   map_input_spectrum_ch_str[8] = "CCpi0_PC_norm";
<   map_input_spectrum_ch_str[9] = "NCpi0_norm";
<   map_input_spectrum_ch_str[10] = "Lee_FC";
<   map_input_spectrum_ch_str[11] = "Lee_PC";
< 
<   /// flag for LEE channels corresponding to the cov_input.txt
<   map_Lee_ch[10] = 1;
<   map_Lee_ch[11] = 1;
< */  
<   //////////////////
<   //////////////////
<   
---
> 
2514,2515c2533,2534
<   // TFile *file_wi2no_101 = new TFile("./h1_spectra_wi2no_101.root", "read");
<   // TH1D *h1_spectra_wi2no_101 = (TH1D*)file_wi2no_101->Get("h1_spectra_wi2no");
---
>   //TFile *file_wi2no_101 = new TFile("./file_h1_spectra_wi2no.root", "read");
>   //TH1D *h1_spectra_wi2no_101 = (TH1D*)file_wi2no_101->Get("h1_spectra_wi2no_101");
2518a2538,2546
> 
>   for(int ich=1; ich<=1000; ich++) {
>     roostr = TString::Format("histo_%d", ich);
>     TH1F *h1_spectrum = (TH1F*)file_spectra->Get(roostr);
>     if( h1_spectrum == NULL ) break;
>     map_input_spectrum_ch_str[ich] = h1_spectrum->GetTitle();
>     delete h1_spectrum;
>   }
>     
2521a2550
>     
2523c2552
<     cout<<Form(" %2d  %-20s   bin-num %2d", ich, map_input_spectrum_ch_str[ich].Data(), bins)<<endl;
---
>     cout<<Form(" %2d ch, bin-num %2d, name: %-30s", ich, bins, map_input_spectrum_ch_str[ich].Data())<<endl;
2538,2539c2567
< 
<       //if( (ich==1 || ich==8) && ibin<=8 ) content *= h1_spectra_wi2no_101->GetBinContent(ibin);
---
>       //if( (ich==1 || ich==8) ) content *= h1_spectra_wi2no_101->GetBinContent(ibin);
2543c2571,2572
<     
---
> 
>     delete h1_spectrum;
2567c2596
<   for(int ich=1; ich<=channels_observation; ich++) {
---
>   for(int ich=1; ich<=1000; ich++) {
2570c2599,2603
<     cout<<Form(" %2d  %-20s   bin-num %2d", ich, roostr.Data(), h1_spectrum->GetNbinsX()+1)<<endl;
---
>     if( h1_spectrum==NULL )break;
> 
>     roostr = h1_spectrum->GetTitle();
>     
>     cout<<Form(" %2d ch, bin-num %2d, name %-30s", ich, h1_spectrum->GetNbinsX()+1, roostr.Data())<<endl;
2595c2628
<   TMatrixD matrix_reweight_cor_frac(bins_oldworld, bins_oldworld);
---
>   TMatrixD matrix_reweight_cor_frac(bins_oldworld, bins_oldworld); 
2597a2631,2677
> 
>     int disable_BR_uncertainty_2d = 0;
>     if (disable_BR_uncertainty_2d) {
>       // See python_tools/BR_uncertainty_tool.ipynb for calculation using merge.root
>       float num_true_signal_uncollapsed[6*2+16*12] = {
>         0.0, 0.0, 2.644611, 0.000343, 0.673658, 0.0, // 1gNp and overflow, background, then Np sig, then 0p sig
>         0.0, 0.0, 1.682415, 0.0, 7.545532, 0.0, // 1g0p
>         0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, // NC Pi0 Np with overflow, background
>         0.0, 0.007581, 0.301092, 0.915457, 1.216862, 0.943092, 0.705134, 0.442833, 0.27205, 0.16602, 0.109717, 0.05772, 0.043725, 0.031384, 0.01067, 0.025455, // NC Pi0 Np with overflow, Np sig
>         0.0, 0.004736, 0.126005, 0.225691, 0.232783, 0.175976, 0.118599, 0.079376, 0.055884, 0.020959, 0.018903, 0.008332, 0.007212, 0.007277, 0.001588, 0.003381, // NC Pi0 Np with overflow, 0p sig
>         0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, // NC Pi0 0p with overflow, background
>         0.0, 0.085884, 0.754236, 0.821747, 0.6168, 0.429712, 0.249044, 0.138809, 0.073667, 0.032466, 0.015823, 0.012726, 0.00759, 0.003995, 0.002124, 0.001004, // NC Pi0 0p with overflow, Np sig
>         0.0, 0.315534, 1.423453, 1.225524, 0.859233, 0.449364, 0.228664, 0.119037, 0.05052, 0.024253, 0.014229, 0.01067, 0.003947, 0.001939, 0.000935, 0.000536, // NC Pi0 0p with overflow, 0p sig
>         0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, // numuCC Np with overflow, background
>         0.0, 0.0, 0.000935, 0.02213, 0.057373, 0.09009, 0.101077, 0.095272, 0.090972, 0.076396, 0.052182, 0.043912, 0.041074, 0.020143, 0.012091, 0.023455, // numuCC Np with overflow, Np sig
>         0.0, 0.0, 0.000536, 0.006925, 0.017063, 0.021858, 0.026183, 0.01784, 0.016127, 0.011606, 0.009666, 0.007745, 0.003342, 0.003801, 0.000468, 0.005037, // numuCC Np with overflow, 0p sig
>         0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, // numuCC 0p with overflow, background
>         0.0, 0.0, 0.003265, 0.027962, 0.059328, 0.067674, 0.060308, 0.052051, 0.036982, 0.036833, 0.021614, 0.009714, 0.011606, 0.007795, 0.002523, 0.008174, // numuCC 0p with overflow, Np sig
>         0.0, 0.000468, 0.02352, 0.04728, 0.066435, 0.067755, 0.065967, 0.049516, 0.029441, 0.017715, 0.013262, 0.009452, 0.005088, 0.002592, 0.000935, 0.001939, // numuCC 0p with overflow, 0p sig
>       };
> 
>       if (idx == 17) {
>         for (int ibin=0; ibin<bins_oldworld; ibin++) {
>           for (int jbin=0; jbin<bins_oldworld; jbin++) {
> 
>             // Here, we assume that true Np NC Delta events are fully correlated with 
>             // true Np NC Delta events in other selection channels. Even if this isn't fully accurate,
>             // the non-1g signal channels should basically not matter at all (the gLEE data release didn't
>             // include this information because of a similar approximation).
> 
>             // So, the covariance matrix associated with the NC Delta BR uncertainty is fully correlated,
>             // so we just need the sigma associated with the row and column to calculate it and subtract it off.
>             // See 2022_06_01 slack between Mark and Lee for more information about this approximation.
> 
>             float sigma_BR_row = num_true_signal_uncollapsed[ibin];
>             float sigma_BR_col = num_true_signal_uncollapsed[jbin];
> 
>             (*map_matrix_flux_Xs_frac[idx])(ibin, jbin) -= sigma_BR_row * sigma_BR_col;
> 
>           }
>         }
>       }
>     }
> 
> 
> 
> 
2622d2701
<     //if( idx!=17 )
2624c2703
<     
---
> 
2631a2711,2712
>       //cout << "lhagaman debug, matrix_reweight_cor_frac = " << (*map_matrix_flux_Xs_frac[idx]) << "\n";
>       cout << "lhagaman debug, adding to reweight_cor_frac\n";
2642c2723
<   
---
> 
2653,2654c2734
<   
<   
---
> 
2727,2728c2807,2808
<   matrix_input_cov_reweight_cor.Clear();  
<  
---
>   matrix_input_cov_reweight_cor.Clear(); 
> 
2760c2840
<    
---
>       
2766c2846
<    
---
> 
2779a2860,2871
>   if( 0 ) {
>     TFile *mcfile = new TFile(mc_directory+"file_collapsed_covariance_matrix.root", "read");
>     TMatrixD *mc_matrix = (TMatrixD*)mcfile->Get("matrix_absolute_mc_stat_cov_newworld");
>     ofstream ListWrite("0.log", ios::out|ios::trunc);
>     ListWrite<<"0 0"<<endl;
>     for(int idx=0; idx< mc_matrix->GetNcols(); idx++) {
>       double cov = (*mc_matrix)(idx,idx);
>       ListWrite<<"0 0 0 "<<cov<<" 0"<<endl;
>     }
>     ListWrite.close();
>   }
>   
2848a2941,2942
> 
> 
Only in wcp-uboone-bdt_older/src: TLee_not_improved.txt
Only in wcp-uboone-bdt_older/.waf3-2.0.20-ce2105e7390cf57450e3837b211b4f56/waflib/extras/__pycache__: boost.cpython-37.pyc
Only in wcp-uboone-bdt_older/.waf3-2.0.20-ce2105e7390cf57450e3837b211b4f56/waflib/extras/__pycache__: cuda.cpython-37.pyc
Only in wcp-uboone-bdt_older/.waf3-2.0.20-ce2105e7390cf57450e3837b211b4f56/waflib/extras/__pycache__: generic.cpython-37.pyc
Only in wcp-uboone-bdt_older/.waf3-2.0.20-ce2105e7390cf57450e3837b211b4f56/waflib/extras/__pycache__: __init__.cpython-37.pyc
Only in wcp-uboone-bdt_older/.waf3-2.0.20-ce2105e7390cf57450e3837b211b4f56/waflib/extras/__pycache__: kokkos.cpython-37.pyc
Only in wcp-uboone-bdt_older/.waf3-2.0.20-ce2105e7390cf57450e3837b211b4f56/waflib/extras/__pycache__: rootsys.cpython-37.pyc
Only in wcp-uboone-bdt_older/.waf3-2.0.20-ce2105e7390cf57450e3837b211b4f56/waflib/extras/__pycache__: rpathify.cpython-37.pyc
Only in wcp-uboone-bdt_older/.waf3-2.0.20-ce2105e7390cf57450e3837b211b4f56/waflib/extras/__pycache__: smplpkgs.cpython-37.pyc
Only in wcp-uboone-bdt_older/.waf3-2.0.20-ce2105e7390cf57450e3837b211b4f56/waflib/extras/__pycache__: wcb.cpython-37.pyc
Only in wcp-uboone-bdt_older/.waf3-2.0.20-ce2105e7390cf57450e3837b211b4f56/waflib/__pycache__: ansiterm.cpython-37.pyc
Only in wcp-uboone-bdt_older/.waf3-2.0.20-ce2105e7390cf57450e3837b211b4f56/waflib/__pycache__: Build.cpython-37.pyc
Only in wcp-uboone-bdt_older/.waf3-2.0.20-ce2105e7390cf57450e3837b211b4f56/waflib/__pycache__: ConfigSet.cpython-37.pyc
Only in wcp-uboone-bdt_older/.waf3-2.0.20-ce2105e7390cf57450e3837b211b4f56/waflib/__pycache__: Configure.cpython-37.pyc
Only in wcp-uboone-bdt_older/.waf3-2.0.20-ce2105e7390cf57450e3837b211b4f56/waflib/__pycache__: Context.cpython-37.pyc
Only in wcp-uboone-bdt_older/.waf3-2.0.20-ce2105e7390cf57450e3837b211b4f56/waflib/__pycache__: Errors.cpython-37.pyc
Only in wcp-uboone-bdt_older/.waf3-2.0.20-ce2105e7390cf57450e3837b211b4f56/waflib/__pycache__: __init__.cpython-37.pyc
Only in wcp-uboone-bdt_older/.waf3-2.0.20-ce2105e7390cf57450e3837b211b4f56/waflib/__pycache__: Logs.cpython-37.pyc
Only in wcp-uboone-bdt_older/.waf3-2.0.20-ce2105e7390cf57450e3837b211b4f56/waflib/__pycache__: Node.cpython-37.pyc
Only in wcp-uboone-bdt_older/.waf3-2.0.20-ce2105e7390cf57450e3837b211b4f56/waflib/__pycache__: Options.cpython-37.pyc
Only in wcp-uboone-bdt_older/.waf3-2.0.20-ce2105e7390cf57450e3837b211b4f56/waflib/__pycache__: Runner.cpython-37.pyc
Only in wcp-uboone-bdt_older/.waf3-2.0.20-ce2105e7390cf57450e3837b211b4f56/waflib/__pycache__: Scripting.cpython-37.pyc
Only in wcp-uboone-bdt_older/.waf3-2.0.20-ce2105e7390cf57450e3837b211b4f56/waflib/__pycache__: Task.cpython-37.pyc
Only in wcp-uboone-bdt_older/.waf3-2.0.20-ce2105e7390cf57450e3837b211b4f56/waflib/__pycache__: TaskGen.cpython-37.pyc
Only in wcp-uboone-bdt_older/.waf3-2.0.20-ce2105e7390cf57450e3837b211b4f56/waflib/__pycache__: Utils.cpython-37.pyc
Only in wcp-uboone-bdt_older/.waf3-2.0.20-ce2105e7390cf57450e3837b211b4f56/waflib/Tools/__pycache__: ar.cpython-37.pyc
Only in wcp-uboone-bdt_older/.waf3-2.0.20-ce2105e7390cf57450e3837b211b4f56/waflib/Tools/__pycache__: c_aliases.cpython-37.pyc
Only in wcp-uboone-bdt_older/.waf3-2.0.20-ce2105e7390cf57450e3837b211b4f56/waflib/Tools/__pycache__: c_config.cpython-37.pyc
Only in wcp-uboone-bdt_older/.waf3-2.0.20-ce2105e7390cf57450e3837b211b4f56/waflib/Tools/__pycache__: ccroot.cpython-37.pyc
Only in wcp-uboone-bdt_older/.waf3-2.0.20-ce2105e7390cf57450e3837b211b4f56/waflib/Tools/__pycache__: clangxx.cpython-37.pyc
Only in wcp-uboone-bdt_older/.waf3-2.0.20-ce2105e7390cf57450e3837b211b4f56/waflib/Tools/__pycache__: compiler_cxx.cpython-37.pyc
Only in wcp-uboone-bdt_older/.waf3-2.0.20-ce2105e7390cf57450e3837b211b4f56/waflib/Tools/__pycache__: c_osx.cpython-37.pyc
Only in wcp-uboone-bdt_older/.waf3-2.0.20-ce2105e7390cf57450e3837b211b4f56/waflib/Tools/__pycache__: c_preproc.cpython-37.pyc
Only in wcp-uboone-bdt_older/.waf3-2.0.20-ce2105e7390cf57450e3837b211b4f56/waflib/Tools/__pycache__: c_tests.cpython-37.pyc
Only in wcp-uboone-bdt_older/.waf3-2.0.20-ce2105e7390cf57450e3837b211b4f56/waflib/Tools/__pycache__: cxx.cpython-37.pyc
Only in wcp-uboone-bdt_older/.waf3-2.0.20-ce2105e7390cf57450e3837b211b4f56/waflib/Tools/__pycache__: gxx.cpython-37.pyc
Only in wcp-uboone-bdt_older/.waf3-2.0.20-ce2105e7390cf57450e3837b211b4f56/waflib/Tools/__pycache__: icpc.cpython-37.pyc
Only in wcp-uboone-bdt_older/.waf3-2.0.20-ce2105e7390cf57450e3837b211b4f56/waflib/Tools/__pycache__: __init__.cpython-37.pyc
Only in wcp-uboone-bdt_older/.waf3-2.0.20-ce2105e7390cf57450e3837b211b4f56/waflib/Tools/__pycache__: waf_unit_test.cpython-37.pyc
Only in wcp-uboone-bdt_older/: xin_files
