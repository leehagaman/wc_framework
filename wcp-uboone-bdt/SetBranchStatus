xin_files/convert_checkout_hist_xs.cxx:  if (T_eval->GetBranch("weight_cv")) flag_data = false;
xin_files/convert_checkout_hist_xs.cxx:  T_eval->SetBranchStatus("*",0);
xin_files/convert_checkout_hist_xs.cxx:  T_eval->SetBranchStatus("match_energy",1);
xin_files/convert_checkout_hist_xs.cxx:  T_eval->SetBranchStatus("match_isFC",1);
xin_files/convert_checkout_hist_xs.cxx:  T_eval->SetBranchStatus("match_found",1);
xin_files/convert_checkout_hist_xs.cxx:  if (T_eval->GetBranch("match_found_asInt")) T_eval->SetBranchStatus("match_found_asInt",1); 
xin_files/convert_checkout_hist_xs.cxx:  T_eval->SetBranchStatus("stm_eventtype",1);
xin_files/convert_checkout_hist_xs.cxx:  T_eval->SetBranchStatus("stm_lowenergy",1);
xin_files/convert_checkout_hist_xs.cxx:  T_eval->SetBranchStatus("stm_LM",1);
xin_files/convert_checkout_hist_xs.cxx:  T_eval->SetBranchStatus("stm_TGM",1);
xin_files/convert_checkout_hist_xs.cxx:  T_eval->SetBranchStatus("stm_STM",1);
xin_files/convert_checkout_hist_xs.cxx:  T_eval->SetBranchStatus("stm_FullDead",1);
xin_files/convert_checkout_hist_xs.cxx:  T_eval->SetBranchStatus("stm_clusterlength",1);
xin_files/convert_checkout_hist_xs.cxx:  // T_eval->SetBranchStatus("run",1);
xin_files/convert_checkout_hist_xs.cxx:  // T_eval->SetBranchStatus("subrun",1);
xin_files/convert_checkout_hist_xs.cxx:  // T_eval->SetBranchStatus("event",1);
xin_files/convert_checkout_hist_xs.cxx:    T_eval->SetBranchStatus("weight_spline",1);
xin_files/convert_checkout_hist_xs.cxx:    T_eval->SetBranchStatus("weight_cv",1);
xin_files/convert_checkout_hist_xs.cxx:    T_eval->SetBranchStatus("weight_lee",1);
xin_files/convert_checkout_hist_xs.cxx:    T_eval->SetBranchStatus("weight_change",1);
xin_files/convert_checkout_hist_xs.cxx:    T_eval->SetBranchStatus("truth_isCC",1);
xin_files/convert_checkout_hist_xs.cxx:    T_eval->SetBranchStatus("truth_nuPdg",1);
xin_files/convert_checkout_hist_xs.cxx:    T_eval->SetBranchStatus("truth_vtxInside",1);
xin_files/convert_checkout_hist_xs.cxx:    T_eval->SetBranchStatus("truth_nuEnergy",1);
xin_files/convert_checkout_hist_xs.cxx:    T_eval->SetBranchStatus("truth_energyInside",1);
xin_files/convert_checkout_hist_xs.cxx:    T_eval->SetBranchStatus("truth_vtxX",1);
xin_files/convert_checkout_hist_xs.cxx:    T_eval->SetBranchStatus("truth_vtxY",1);
xin_files/convert_checkout_hist_xs.cxx:    T_eval->SetBranchStatus("truth_vtxZ",1);
xin_files/convert_checkout_hist_xs.cxx:    T_eval->SetBranchStatus("match_completeness_energy",1);
xin_files/convert_checkout_hist_xs.cxx:  std::cout << "Total entries: " << T_eval->GetEntries() << std::endl;
xin_files/convert_checkout_hist_xs.cxx:  for (Int_t i=0;i!=T_eval->GetEntries();i++){
xin_files/convert_checkout_hist_xs.cxx:    T_eval->GetEntry(i);
xin_files/master_cov_matrix.cxx:  T_eval->SetBranchStatus("*",0);
xin_files/master_cov_matrix.cxx:  T_eval->SetBranchStatus("run",1);
xin_files/master_cov_matrix.cxx:  T_eval->SetBranchStatus("subrun",1);
xin_files/master_cov_matrix.cxx:  T_eval->SetBranchStatus("event",1);
xin_files/master_cov_matrix.cxx:  T_eval->SetBranchStatus("match_energy",1);
xin_files/master_cov_matrix.cxx:  T_eval->SetBranchStatus("match_isFC",1);
xin_files/master_cov_matrix.cxx:  T_eval->SetBranchStatus("match_found",1);
xin_files/master_cov_matrix.cxx:  if (T_eval->GetBranch("match_found_asInt")) T_eval->SetBranchStatus("match_found_asInt",1); 
xin_files/master_cov_matrix.cxx:  T_eval->SetBranchStatus("stm_eventtype",1);
xin_files/master_cov_matrix.cxx:  T_eval->SetBranchStatus("stm_lowenergy",1);
xin_files/master_cov_matrix.cxx:  T_eval->SetBranchStatus("stm_LM",1);
xin_files/master_cov_matrix.cxx:  T_eval->SetBranchStatus("stm_TGM",1);
xin_files/master_cov_matrix.cxx:  T_eval->SetBranchStatus("stm_STM",1);
xin_files/master_cov_matrix.cxx:  T_eval->SetBranchStatus("stm_FullDead",1);
xin_files/master_cov_matrix.cxx:  T_eval->SetBranchStatus("stm_clusterlength",1);
xin_files/master_cov_matrix.cxx:  T_eval->SetBranchStatus("weight_spline",1);
xin_files/master_cov_matrix.cxx:  T_eval->SetBranchStatus("weight_cv",1);
xin_files/master_cov_matrix.cxx:  T_eval->SetBranchStatus("weight_lee",1);
xin_files/master_cov_matrix.cxx:  T_eval->SetBranchStatus("weight_change",1);
xin_files/master_cov_matrix.cxx:  T_eval->SetBranchStatus("truth_isCC",1);
xin_files/master_cov_matrix.cxx:  T_eval->SetBranchStatus("truth_nuPdg",1);
xin_files/master_cov_matrix.cxx:  T_eval->SetBranchStatus("truth_vtxInside",1);
xin_files/master_cov_matrix.cxx:  T_eval->SetBranchStatus("truth_nuEnergy",1);
xin_files/master_cov_matrix.cxx:  T_eval->SetBranchStatus("truth_energyInside",1);
xin_files/master_cov_matrix.cxx:  T_eval->SetBranchStatus("truth_vtxX",1);
xin_files/master_cov_matrix.cxx:  T_eval->SetBranchStatus("truth_vtxY",1);
xin_files/master_cov_matrix.cxx:  T_eval->SetBranchStatus("truth_vtxZ",1);
xin_files/master_cov_matrix.cxx:  T_eval->SetBranchStatus("match_completeness_energy",1);
xin_files/master_cov_matrix.cxx:  //std::cout << T_eval->GetEntries() << " " << T_weight->GetEntries() << " " << option << std::endl;
xin_files/master_cov_matrix.cxx:  for (size_t i=0;i!=T_eval->GetEntries();i++){
xin_files/master_cov_matrix.cxx:    T_eval->GetEntry(i);
scripts/extractNuMIGeometryWeights.C:    T_eval->Fill();
scripts/extractNuMIGeometryWeights.C:  T_eval->Write();
src/old_master_cov_matrix.txt:  T_eval->SetBranchStatus("*",0);
src/old_master_cov_matrix.txt:  T_eval->SetBranchStatus("run",1);
src/old_master_cov_matrix.txt:  T_eval->SetBranchStatus("subrun",1);
src/old_master_cov_matrix.txt:  T_eval->SetBranchStatus("event",1);
src/old_master_cov_matrix.txt:  T_eval->SetBranchStatus("match_energy",1);
src/old_master_cov_matrix.txt:  T_eval->SetBranchStatus("match_isFC",1);
src/old_master_cov_matrix.txt:  T_eval->SetBranchStatus("match_found",1);
src/old_master_cov_matrix.txt:  if (T_eval->GetBranch("match_found_asInt")) T_eval->SetBranchStatus("match_found_asInt",1); 
src/old_master_cov_matrix.txt:  T_eval->SetBranchStatus("stm_eventtype",1);
src/old_master_cov_matrix.txt:  T_eval->SetBranchStatus("stm_lowenergy",1);
src/old_master_cov_matrix.txt:  T_eval->SetBranchStatus("stm_LM",1);
src/old_master_cov_matrix.txt:  T_eval->SetBranchStatus("stm_TGM",1);
src/old_master_cov_matrix.txt:  T_eval->SetBranchStatus("stm_STM",1);
src/old_master_cov_matrix.txt:  T_eval->SetBranchStatus("stm_FullDead",1);
src/old_master_cov_matrix.txt:  T_eval->SetBranchStatus("stm_clusterlength",1);
src/old_master_cov_matrix.txt:  T_eval->SetBranchStatus("weight_spline",1);
src/old_master_cov_matrix.txt:  T_eval->SetBranchStatus("weight_cv",1);
src/old_master_cov_matrix.txt:  T_eval->SetBranchStatus("weight_lee",1);
src/old_master_cov_matrix.txt:  T_eval->SetBranchStatus("weight_change",1);
src/old_master_cov_matrix.txt:  T_eval->SetBranchStatus("truth_isCC",1);
src/old_master_cov_matrix.txt:  T_eval->SetBranchStatus("truth_nuPdg",1);
src/old_master_cov_matrix.txt:  T_eval->SetBranchStatus("truth_vtxInside",1);
src/old_master_cov_matrix.txt:  T_eval->SetBranchStatus("truth_nuEnergy",1);
src/old_master_cov_matrix.txt:  T_eval->SetBranchStatus("truth_energyInside",1);
src/old_master_cov_matrix.txt:  T_eval->SetBranchStatus("truth_vtxX",1);
src/old_master_cov_matrix.txt:  T_eval->SetBranchStatus("truth_vtxY",1);
src/old_master_cov_matrix.txt:  T_eval->SetBranchStatus("truth_vtxZ",1);
src/old_master_cov_matrix.txt:  T_eval->SetBranchStatus("match_completeness_energy",1);
src/old_master_cov_matrix.txt:  //std::cout << T_eval->GetEntries() << " " << T_weight->GetEntries() << " " << option << std::endl;
src/old_master_cov_matrix.txt:  for (size_t i=0;i!=T_eval->GetEntries();i++){
src/old_master_cov_matrix.txt:    T_eval->GetEntry(i);
src/mcm_2_new.h:  T_eval->SetBranchStatus("*",0);
src/mcm_2_new.h:  T_eval->SetBranchStatus("run",1);
src/mcm_2_new.h:  T_eval->SetBranchStatus("subrun",1);
src/mcm_2_new.h:  T_eval->SetBranchStatus("event",1);
src/mcm_2_new.h:  T_eval->SetBranchStatus("match_energy",1);
src/mcm_2_new.h:  T_eval->SetBranchStatus("match_isFC",1);
src/mcm_2_new.h:  T_eval->SetBranchStatus("match_found",1);
src/mcm_2_new.h:  if (T_eval->GetBranch("match_found_asInt")) T_eval->SetBranchStatus("match_found_asInt",1); 
src/mcm_2_new.h:  T_eval->SetBranchStatus("stm_eventtype",1);
src/mcm_2_new.h:  T_eval->SetBranchStatus("stm_lowenergy",1);
src/mcm_2_new.h:  T_eval->SetBranchStatus("stm_LM",1);
src/mcm_2_new.h:  T_eval->SetBranchStatus("stm_TGM",1);
src/mcm_2_new.h:  T_eval->SetBranchStatus("stm_STM",1);
src/mcm_2_new.h:  T_eval->SetBranchStatus("stm_FullDead",1);
src/mcm_2_new.h:  T_eval->SetBranchStatus("stm_clusterlength",1);
src/mcm_2_new.h:  T_eval->SetBranchStatus("weight_spline",1);
src/mcm_2_new.h:  T_eval->SetBranchStatus("weight_cv",1);
src/mcm_2_new.h:  T_eval->SetBranchStatus("weight_lee",1);
src/mcm_2_new.h:  T_eval->SetBranchStatus("weight_change",1);
src/mcm_2_new.h:  T_eval->SetBranchStatus("truth_isCC",1);
src/mcm_2_new.h:  T_eval->SetBranchStatus("truth_nuPdg",1);
src/mcm_2_new.h:  T_eval->SetBranchStatus("truth_vtxInside",1);
src/mcm_2_new.h:  T_eval->SetBranchStatus("truth_nuEnergy",1);
src/mcm_2_new.h:  T_eval->SetBranchStatus("truth_energyInside",1);
src/mcm_2_new.h:  T_eval->SetBranchStatus("truth_vtxX",1);
src/mcm_2_new.h:  T_eval->SetBranchStatus("truth_vtxY",1);
src/mcm_2_new.h:  T_eval->SetBranchStatus("truth_vtxZ",1);
src/mcm_2_new.h:  T_eval->SetBranchStatus("match_completeness_energy",1);
src/mcm_2_new.h:  //std::cout << "lhagaman debug, T_eval getentries: "  << T_eval->GetEntries() << ", T_weight getentries: " << T_weight->GetEntries() << ", option: " << option << std::endl;
src/mcm_2_new.h:  for (size_t i=0;i!=T_eval->GetEntries();i++){
src/mcm_2_new.h:    T_eval->GetEntry(i);
src/mcm_2_from_github.txt:  T_eval->SetBranchStatus("*",0);
src/mcm_2_from_github.txt:  T_eval->SetBranchStatus("run",1);
src/mcm_2_from_github.txt:  T_eval->SetBranchStatus("subrun",1);
src/mcm_2_from_github.txt:  T_eval->SetBranchStatus("event",1);
src/mcm_2_from_github.txt:  T_eval->SetBranchStatus("match_energy",1);
src/mcm_2_from_github.txt:  T_eval->SetBranchStatus("match_isFC",1);
src/mcm_2_from_github.txt:  T_eval->SetBranchStatus("match_found",1);
src/mcm_2_from_github.txt:  if (T_eval->GetBranch("match_found_asInt")) T_eval->SetBranchStatus("match_found_asInt",1); 
src/mcm_2_from_github.txt:  T_eval->SetBranchStatus("stm_eventtype",1);
src/mcm_2_from_github.txt:  T_eval->SetBranchStatus("stm_lowenergy",1);
src/mcm_2_from_github.txt:  T_eval->SetBranchStatus("stm_LM",1);
src/mcm_2_from_github.txt:  T_eval->SetBranchStatus("stm_TGM",1);
src/mcm_2_from_github.txt:  T_eval->SetBranchStatus("stm_STM",1);
src/mcm_2_from_github.txt:  T_eval->SetBranchStatus("stm_FullDead",1);
src/mcm_2_from_github.txt:  T_eval->SetBranchStatus("stm_clusterlength",1);
src/mcm_2_from_github.txt:  T_eval->SetBranchStatus("weight_spline",1);
src/mcm_2_from_github.txt:  T_eval->SetBranchStatus("weight_cv",1);
src/mcm_2_from_github.txt:  T_eval->SetBranchStatus("weight_lee",1);
src/mcm_2_from_github.txt:  T_eval->SetBranchStatus("weight_change",1);
src/mcm_2_from_github.txt:  T_eval->SetBranchStatus("truth_isCC",1);
src/mcm_2_from_github.txt:  T_eval->SetBranchStatus("truth_nuPdg",1);
src/mcm_2_from_github.txt:  T_eval->SetBranchStatus("truth_vtxInside",1);
src/mcm_2_from_github.txt:  T_eval->SetBranchStatus("truth_nuEnergy",1);
src/mcm_2_from_github.txt:  T_eval->SetBranchStatus("truth_energyInside",1);
src/mcm_2_from_github.txt:  T_eval->SetBranchStatus("truth_vtxX",1);
src/mcm_2_from_github.txt:  T_eval->SetBranchStatus("truth_vtxY",1);
src/mcm_2_from_github.txt:  T_eval->SetBranchStatus("truth_vtxZ",1);
src/mcm_2_from_github.txt:  T_eval->SetBranchStatus("match_completeness_energy",1);
src/mcm_2_from_github.txt:  //std::cout << T_eval->GetEntries() << " " << T_weight->GetEntries() << " " << option << std::endl;
src/mcm_2_from_github.txt:  for (size_t i=0;i!=T_eval->GetEntries();i++){
src/mcm_2_from_github.txt:    T_eval->GetEntry(i);
src/mcm_pred_stat.h:  if (T_eval->GetBranch("weight_cv")) flag_data = false;
src/mcm_pred_stat.h:  T_eval->SetBranchStatus("*",0);
src/mcm_pred_stat.h:  T_eval->SetBranchStatus("run",1);
src/mcm_pred_stat.h:  T_eval->SetBranchStatus("subrun",1);
src/mcm_pred_stat.h:  T_eval->SetBranchStatus("event",1);
src/mcm_pred_stat.h:  T_eval->SetBranchStatus("match_energy",1);
src/mcm_pred_stat.h:  T_eval->SetBranchStatus("match_isFC",1);
src/mcm_pred_stat.h:  T_eval->SetBranchStatus("match_found",1);
src/mcm_pred_stat.h:  if (T_eval->GetBranch("match_found_asInt")) T_eval->SetBranchStatus("match_found_asInt",1); 
src/mcm_pred_stat.h:  T_eval->SetBranchStatus("stm_eventtype",1);
src/mcm_pred_stat.h:  T_eval->SetBranchStatus("stm_lowenergy",1);
src/mcm_pred_stat.h:  T_eval->SetBranchStatus("stm_LM",1);
src/mcm_pred_stat.h:  T_eval->SetBranchStatus("stm_TGM",1);
src/mcm_pred_stat.h:  T_eval->SetBranchStatus("stm_STM",1);
src/mcm_pred_stat.h:  T_eval->SetBranchStatus("stm_FullDead",1);
src/mcm_pred_stat.h:  T_eval->SetBranchStatus("stm_clusterlength",1);
src/mcm_pred_stat.h:    T_eval->SetBranchStatus("weight_spline",1);
src/mcm_pred_stat.h:    T_eval->SetBranchStatus("weight_cv",1);
src/mcm_pred_stat.h:    T_eval->SetBranchStatus("weight_lee",1);
src/mcm_pred_stat.h:    T_eval->SetBranchStatus("weight_change",1);
src/mcm_pred_stat.h:    T_eval->SetBranchStatus("truth_isCC",1);
src/mcm_pred_stat.h:    T_eval->SetBranchStatus("truth_nuPdg",1);
src/mcm_pred_stat.h:    T_eval->SetBranchStatus("truth_vtxInside",1);
src/mcm_pred_stat.h:    T_eval->SetBranchStatus("truth_nuEnergy",1);
src/mcm_pred_stat.h:    T_eval->SetBranchStatus("truth_vtxX",1);
src/mcm_pred_stat.h:    T_eval->SetBranchStatus("truth_vtxY",1);
src/mcm_pred_stat.h:    T_eval->SetBranchStatus("truth_vtxZ",1);
src/mcm_pred_stat.h:    T_eval->SetBranchStatus("match_completeness_energy",1);
src/mcm_pred_stat.h:    T_eval->SetBranchStatus("truth_energyInside",1);
src/mcm_pred_stat.h:      T_eval->SetBranchStatus("gl_sel_type",1);
src/mcm_pred_stat.h:      T_eval->SetBranchStatus("gl_sel_type",1);
src/mcm_pred_stat.h:      T_eval->SetBranchStatus("gl_true_Enu",1);
src/mcm_pred_stat.h:      T_eval->SetBranchStatus("gl_true_Elep",1);
src/mcm_pred_stat.h:      T_eval->SetBranchStatus("gl_reco_Eshower",1);
src/mcm_pred_stat.h:      T_eval->SetBranchStatus("gl_simple_pot_weight",1);
src/mcm_pred_stat.h:      T_eval->SetBranchStatus("gl_rem_orig_wc_pot_weight",1);
src/mcm_pred_stat.h:      T_eval->SetBranchStatus("gl_new_pot_weight",1);
src/mcm_pred_stat.h:      T_eval->SetBranchStatus("gl_overlap_weight",1);
src/mcm_pred_stat.h:      T_eval->SetBranchStatus("gl_wc_total_overlapped_weight",1);
src/mcm_pred_stat.h:  vec_events.resize(T_eval->GetEntries());
src/mcm_pred_stat.h:  for (Int_t i=0;i!=T_eval->GetEntries();i++){
src/mcm_pred_stat.h:    T_eval->GetEntry(i);
src/master_cov_matrix.cxx:  T_eval->SetBranchStatus("*",0);
src/master_cov_matrix.cxx:  T_eval->SetBranchStatus("run",1);
src/master_cov_matrix.cxx:  T_eval->SetBranchStatus("subrun",1);
src/master_cov_matrix.cxx:  T_eval->SetBranchStatus("event",1);
src/master_cov_matrix.cxx:  T_eval->SetBranchStatus("match_energy",1);
src/master_cov_matrix.cxx:  T_eval->SetBranchStatus("match_isFC",1);
src/master_cov_matrix.cxx:  T_eval->SetBranchStatus("match_found",1);
src/master_cov_matrix.cxx:  if (T_eval->GetBranch("match_found_asInt")) T_eval->SetBranchStatus("match_found_asInt",1); 
src/master_cov_matrix.cxx:  T_eval->SetBranchStatus("stm_eventtype",1);
src/master_cov_matrix.cxx:  T_eval->SetBranchStatus("stm_lowenergy",1);
src/master_cov_matrix.cxx:  T_eval->SetBranchStatus("stm_LM",1);
src/master_cov_matrix.cxx:  T_eval->SetBranchStatus("stm_TGM",1);
src/master_cov_matrix.cxx:  T_eval->SetBranchStatus("stm_STM",1);
src/master_cov_matrix.cxx:  T_eval->SetBranchStatus("stm_FullDead",1);
src/master_cov_matrix.cxx:  T_eval->SetBranchStatus("stm_clusterlength",1);
src/master_cov_matrix.cxx:  T_eval->SetBranchStatus("weight_spline",1);
src/master_cov_matrix.cxx:  T_eval->SetBranchStatus("weight_cv",1);
src/master_cov_matrix.cxx:  T_eval->SetBranchStatus("weight_lee",1);
src/master_cov_matrix.cxx:  T_eval->SetBranchStatus("weight_change",1);
src/master_cov_matrix.cxx:  T_eval->SetBranchStatus("truth_isCC",1);
src/master_cov_matrix.cxx:  T_eval->SetBranchStatus("truth_nuPdg",1);
src/master_cov_matrix.cxx:  T_eval->SetBranchStatus("truth_vtxInside",1);
src/master_cov_matrix.cxx:  T_eval->SetBranchStatus("truth_nuEnergy",1);
src/master_cov_matrix.cxx:  T_eval->SetBranchStatus("truth_energyInside",1);
src/master_cov_matrix.cxx:  T_eval->SetBranchStatus("truth_vtxX",1);
src/master_cov_matrix.cxx:  T_eval->SetBranchStatus("truth_vtxY",1);
src/master_cov_matrix.cxx:  T_eval->SetBranchStatus("truth_vtxZ",1);
src/master_cov_matrix.cxx:  T_eval->SetBranchStatus("match_completeness_energy",1);
src/master_cov_matrix.cxx:      T_eval->SetBranchStatus("gl_sel_type",1);
src/master_cov_matrix.cxx:      T_eval->SetBranchStatus("gl_sel_type",1);
src/master_cov_matrix.cxx:      T_eval->SetBranchStatus("gl_true_Enu",1);
src/master_cov_matrix.cxx:      T_eval->SetBranchStatus("gl_true_Elep",1);
src/master_cov_matrix.cxx:      T_eval->SetBranchStatus("gl_reco_Eshower",1);
src/master_cov_matrix.cxx:      T_eval->SetBranchStatus("gl_simple_pot_weight",1);
src/master_cov_matrix.cxx:      T_eval->SetBranchStatus("gl_rem_orig_wc_pot_weight",1);
src/master_cov_matrix.cxx:      T_eval->SetBranchStatus("gl_new_pot_weight",1);
src/master_cov_matrix.cxx:      T_eval->SetBranchStatus("gl_overlap_weight",1);
src/master_cov_matrix.cxx:      T_eval->SetBranchStatus("gl_wc_total_overlapped_weight",1);
src/master_cov_matrix.cxx:  //std::cout << T_eval->GetEntries() << " " << T_weight->GetEntries() << " " << option << std::endl;
src/master_cov_matrix.cxx:  for (size_t i=0;i!=T_eval->GetEntries();i++){
src/master_cov_matrix.cxx:    T_eval->GetEntry(i);
src/master_cov_matrix_from_github.txt:  T_eval->SetBranchStatus("*",0);
src/master_cov_matrix_from_github.txt:  T_eval->SetBranchStatus("run",1);
src/master_cov_matrix_from_github.txt:  T_eval->SetBranchStatus("subrun",1);
src/master_cov_matrix_from_github.txt:  T_eval->SetBranchStatus("event",1);
src/master_cov_matrix_from_github.txt:  T_eval->SetBranchStatus("match_energy",1);
src/master_cov_matrix_from_github.txt:  T_eval->SetBranchStatus("match_isFC",1);
src/master_cov_matrix_from_github.txt:  T_eval->SetBranchStatus("match_found",1);
src/master_cov_matrix_from_github.txt:  if (T_eval->GetBranch("match_found_asInt")) T_eval->SetBranchStatus("match_found_asInt",1); 
src/master_cov_matrix_from_github.txt:  T_eval->SetBranchStatus("stm_eventtype",1);
src/master_cov_matrix_from_github.txt:  T_eval->SetBranchStatus("stm_lowenergy",1);
src/master_cov_matrix_from_github.txt:  T_eval->SetBranchStatus("stm_LM",1);
src/master_cov_matrix_from_github.txt:  T_eval->SetBranchStatus("stm_TGM",1);
src/master_cov_matrix_from_github.txt:  T_eval->SetBranchStatus("stm_STM",1);
src/master_cov_matrix_from_github.txt:  T_eval->SetBranchStatus("stm_FullDead",1);
src/master_cov_matrix_from_github.txt:  T_eval->SetBranchStatus("stm_clusterlength",1);
src/master_cov_matrix_from_github.txt:  T_eval->SetBranchStatus("weight_spline",1);
src/master_cov_matrix_from_github.txt:  T_eval->SetBranchStatus("weight_cv",1);
src/master_cov_matrix_from_github.txt:  T_eval->SetBranchStatus("weight_lee",1);
src/master_cov_matrix_from_github.txt:  T_eval->SetBranchStatus("weight_change",1);
src/master_cov_matrix_from_github.txt:  T_eval->SetBranchStatus("truth_isCC",1);
src/master_cov_matrix_from_github.txt:  T_eval->SetBranchStatus("truth_nuPdg",1);
src/master_cov_matrix_from_github.txt:  T_eval->SetBranchStatus("truth_vtxInside",1);
src/master_cov_matrix_from_github.txt:  T_eval->SetBranchStatus("truth_nuEnergy",1);
src/master_cov_matrix_from_github.txt:  T_eval->SetBranchStatus("truth_energyInside",1);
src/master_cov_matrix_from_github.txt:  T_eval->SetBranchStatus("truth_vtxX",1);
src/master_cov_matrix_from_github.txt:  T_eval->SetBranchStatus("truth_vtxY",1);
src/master_cov_matrix_from_github.txt:  T_eval->SetBranchStatus("truth_vtxZ",1);
src/master_cov_matrix_from_github.txt:  T_eval->SetBranchStatus("match_completeness_energy",1);
src/master_cov_matrix_from_github.txt:  //std::cout << T_eval->GetEntries() << " " << T_weight->GetEntries() << " " << option << std::endl;
src/master_cov_matrix_from_github.txt:  for (size_t i=0;i!=T_eval->GetEntries();i++){
src/master_cov_matrix_from_github.txt:    T_eval->GetEntry(i);
src/mcm_2.h:  T_eval->SetBranchStatus("*",0);
src/mcm_2.h:  T_eval->SetBranchStatus("run",1);
src/mcm_2.h:  T_eval->SetBranchStatus("subrun",1);
src/mcm_2.h:  T_eval->SetBranchStatus("event",1);
src/mcm_2.h:  T_eval->SetBranchStatus("match_energy",1);
src/mcm_2.h:  T_eval->SetBranchStatus("match_isFC",1);
src/mcm_2.h:  T_eval->SetBranchStatus("match_found",1);
src/mcm_2.h:  if (T_eval->GetBranch("match_found_asInt")) T_eval->SetBranchStatus("match_found_asInt",1); 
src/mcm_2.h:  T_eval->SetBranchStatus("stm_eventtype",1);
src/mcm_2.h:  T_eval->SetBranchStatus("stm_lowenergy",1);
src/mcm_2.h:  T_eval->SetBranchStatus("stm_LM",1);
src/mcm_2.h:  T_eval->SetBranchStatus("stm_TGM",1);
src/mcm_2.h:  T_eval->SetBranchStatus("stm_STM",1);
src/mcm_2.h:  T_eval->SetBranchStatus("stm_FullDead",1);
src/mcm_2.h:  T_eval->SetBranchStatus("stm_clusterlength",1);
src/mcm_2.h:  T_eval->SetBranchStatus("weight_spline",1);
src/mcm_2.h:  T_eval->SetBranchStatus("weight_cv",1);
src/mcm_2.h:  T_eval->SetBranchStatus("weight_lee",1);
src/mcm_2.h:  T_eval->SetBranchStatus("weight_change",1);
src/mcm_2.h:  T_eval->SetBranchStatus("truth_isCC",1);
src/mcm_2.h:  T_eval->SetBranchStatus("truth_nuPdg",1);
src/mcm_2.h:  T_eval->SetBranchStatus("truth_vtxInside",1);
src/mcm_2.h:  T_eval->SetBranchStatus("truth_nuEnergy",1);
src/mcm_2.h:  T_eval->SetBranchStatus("truth_energyInside",1);
src/mcm_2.h:  T_eval->SetBranchStatus("truth_vtxX",1);
src/mcm_2.h:  T_eval->SetBranchStatus("truth_vtxY",1);
src/mcm_2.h:  T_eval->SetBranchStatus("truth_vtxZ",1);
src/mcm_2.h:  T_eval->SetBranchStatus("match_completeness_energy",1);
src/mcm_2.h:      T_eval->SetBranchStatus("gl_sel_type",1);
src/mcm_2.h:      T_eval->SetBranchStatus("gl_sel_type",1);
src/mcm_2.h:      T_eval->SetBranchStatus("gl_true_Enu",1);
src/mcm_2.h:      T_eval->SetBranchStatus("gl_true_Elep",1);
src/mcm_2.h:      T_eval->SetBranchStatus("gl_reco_Eshower",1);
src/mcm_2.h:      T_eval->SetBranchStatus("gl_simple_pot_weight",1);
src/mcm_2.h:      T_eval->SetBranchStatus("gl_rem_orig_wc_pot_weight",1);
src/mcm_2.h:      T_eval->SetBranchStatus("gl_new_pot_weight",1);
src/mcm_2.h:      T_eval->SetBranchStatus("gl_overlap_weight",1);
src/mcm_2.h:      T_eval->SetBranchStatus("gl_wc_total_overlapped_weight",1);
src/mcm_2.h:  //std::cout << "lhagaman debug, T_eval getentries: "  << T_eval->GetEntries() << ", T_weight getentries: " << T_weight->GetEntries() << ", option: " << option << std::endl;
src/mcm_2.h:  for (size_t i=0;i!=T_eval->GetEntries();i++){
src/mcm_2.h:    T_eval->GetEntry(i);
src/mcm_data_stat.h:  T_eval->SetBranchStatus("*",0);
src/mcm_data_stat.h:  T_eval->SetBranchStatus("run",1);
src/mcm_data_stat.h:  T_eval->SetBranchStatus("subrun",1);
src/mcm_data_stat.h:  T_eval->SetBranchStatus("event",1);
src/mcm_data_stat.h:  T_eval->SetBranchStatus("match_energy",1);
src/mcm_data_stat.h:  T_eval->SetBranchStatus("match_isFC",1);
src/mcm_data_stat.h:  T_eval->SetBranchStatus("match_found",1);
src/mcm_data_stat.h:  if (T_eval->GetBranch("match_found_asInt")) T_eval->SetBranchStatus("match_found_asInt",1); 
src/mcm_data_stat.h:  T_eval->SetBranchStatus("stm_eventtype",1);
src/mcm_data_stat.h:  T_eval->SetBranchStatus("stm_lowenergy",1);
src/mcm_data_stat.h:  T_eval->SetBranchStatus("stm_LM",1);
src/mcm_data_stat.h:  T_eval->SetBranchStatus("stm_TGM",1);
src/mcm_data_stat.h:  T_eval->SetBranchStatus("stm_STM",1);
src/mcm_data_stat.h:  T_eval->SetBranchStatus("stm_FullDead",1);
src/mcm_data_stat.h:  T_eval->SetBranchStatus("stm_clusterlength",1);
src/mcm_data_stat.h:      T_eval->SetBranchStatus("gl_sel_type",1);
src/mcm_data_stat.h:      T_eval->SetBranchStatus("gl_sel_type",1);
src/mcm_data_stat.h:      T_eval->SetBranchStatus("gl_true_Enu",1);
src/mcm_data_stat.h:      T_eval->SetBranchStatus("gl_true_Elep",1);
src/mcm_data_stat.h:      T_eval->SetBranchStatus("gl_reco_Eshower",1);
src/mcm_data_stat.h:      T_eval->SetBranchStatus("gl_simple_pot_weight",1);
src/mcm_data_stat.h:      T_eval->SetBranchStatus("gl_rem_orig_wc_pot_weight",1);
src/mcm_data_stat.h:      T_eval->SetBranchStatus("gl_new_pot_weight",1);
src/mcm_data_stat.h:      T_eval->SetBranchStatus("gl_overlap_weight",1);
src/mcm_data_stat.h:      T_eval->SetBranchStatus("gl_wc_total_overlapped_weight",1);
src/mcm_data_stat.h:  //  T_eval->SetBranchStatus("weight_spline",1);
src/mcm_data_stat.h:  // T_eval->SetBranchStatus("weight",1);
src/mcm_data_stat.h:  //T_eval->SetBranchStatus("weight_lee",1);
src/mcm_data_stat.h:  //T_eval->SetBranchStatus("weight_change",1);
src/mcm_data_stat.h:  // T_eval->SetBranchStatus("truth_isCC",1);
src/mcm_data_stat.h:  //T_eval->SetBranchStatus("truth_nuPdg",1);
src/mcm_data_stat.h:  //T_eval->SetBranchStatus("truth_vtxInside",1);
src/mcm_data_stat.h:  //T_eval->SetBranchStatus("truth_nuEnergy",1);
src/mcm_data_stat.h:  //T_eval->SetBranchStatus("truth_vtxX",1);
src/mcm_data_stat.h:  //T_eval->SetBranchStatus("truth_vtxY",1);
src/mcm_data_stat.h:  //T_eval->SetBranchStatus("truth_vtxZ",1);
src/mcm_data_stat.h:  //T_eval->SetBranchStatus("match_completeness_energy",1);
src/mcm_data_stat.h:  //T_eval->SetBranchStatus("truth_energyInside",1);
src/mcm_data_stat.h:  vec_events.resize(T_eval->GetEntries());
src/mcm_data_stat.h:  for (Int_t i=0;i!=T_eval->GetEntries();i++){
src/mcm_data_stat.h:    T_eval->GetEntry(i);
apps/pot_counting_mc.cxx:  std::cout << "Trigger: " << T_eval->GetEntries() << std::endl;
apps/my_convert_checkout_hist_xs.txt:  if (T_eval->GetBranch("weight_cv")) flag_data = false;
apps/my_convert_checkout_hist_xs.txt:  T_eval->SetBranchStatus("*",0);
apps/my_convert_checkout_hist_xs.txt:  T_eval->SetBranchStatus("match_energy",1);
apps/my_convert_checkout_hist_xs.txt:  T_eval->SetBranchStatus("match_isFC",1);
apps/my_convert_checkout_hist_xs.txt:  T_eval->SetBranchStatus("match_found",1);
apps/my_convert_checkout_hist_xs.txt:  if (T_eval->GetBranch("match_found_asInt")) T_eval->SetBranchStatus("match_found_asInt",1); 
apps/my_convert_checkout_hist_xs.txt:  T_eval->SetBranchStatus("stm_eventtype",1);
apps/my_convert_checkout_hist_xs.txt:  T_eval->SetBranchStatus("stm_lowenergy",1);
apps/my_convert_checkout_hist_xs.txt:  T_eval->SetBranchStatus("stm_LM",1);
apps/my_convert_checkout_hist_xs.txt:  T_eval->SetBranchStatus("stm_TGM",1);
apps/my_convert_checkout_hist_xs.txt:  T_eval->SetBranchStatus("stm_STM",1);
apps/my_convert_checkout_hist_xs.txt:  T_eval->SetBranchStatus("stm_FullDead",1);
apps/my_convert_checkout_hist_xs.txt:  T_eval->SetBranchStatus("stm_clusterlength",1);
apps/my_convert_checkout_hist_xs.txt:  // T_eval->SetBranchStatus("run",1);
apps/my_convert_checkout_hist_xs.txt:  // T_eval->SetBranchStatus("subrun",1);
apps/my_convert_checkout_hist_xs.txt:  // T_eval->SetBranchStatus("event",1);
apps/my_convert_checkout_hist_xs.txt:    T_eval->SetBranchStatus("weight_spline",1);
apps/my_convert_checkout_hist_xs.txt:    T_eval->SetBranchStatus("weight_cv",1);
apps/my_convert_checkout_hist_xs.txt:    T_eval->SetBranchStatus("weight_lee",1);
apps/my_convert_checkout_hist_xs.txt:    T_eval->SetBranchStatus("weight_change",1);
apps/my_convert_checkout_hist_xs.txt:    T_eval->SetBranchStatus("truth_isCC",1);
apps/my_convert_checkout_hist_xs.txt:    T_eval->SetBranchStatus("truth_nuPdg",1);
apps/my_convert_checkout_hist_xs.txt:    T_eval->SetBranchStatus("truth_vtxInside",1);
apps/my_convert_checkout_hist_xs.txt:    T_eval->SetBranchStatus("truth_nuEnergy",1);
apps/my_convert_checkout_hist_xs.txt:    T_eval->SetBranchStatus("truth_energyInside",1);
apps/my_convert_checkout_hist_xs.txt:    T_eval->SetBranchStatus("truth_vtxX",1);
apps/my_convert_checkout_hist_xs.txt:    T_eval->SetBranchStatus("truth_vtxY",1);
apps/my_convert_checkout_hist_xs.txt:    T_eval->SetBranchStatus("truth_vtxZ",1);
apps/my_convert_checkout_hist_xs.txt:    T_eval->SetBranchStatus("match_completeness_energy",1);
apps/my_convert_checkout_hist_xs.txt:  std::cout << "Total entries: " << T_eval->GetEntries() << std::endl;
apps/my_convert_checkout_hist_xs.txt:  for (Int_t i=0;i!=T_eval->GetEntries();i++){
apps/my_convert_checkout_hist_xs.txt:    T_eval->GetEntry(i);
apps/check_failures.cxx:  T_eval->SetBranchStatus("*",0);
apps/check_failures.cxx:  std::cout << "Total checkout events: " << T_eval->GetEntries() << std::endl;
apps/check_failures.cxx:  T_eval->SetBranchStatus("stm_eventtype",1); T_eval->SetBranchAddress("stm_eventtype",&stm_eventtype);
apps/check_failures.cxx:  T_eval->SetBranchStatus("stm_lowenergy",1); T_eval->SetBranchAddress("stm_lowenergy",&stm_lowenergy);
apps/check_failures.cxx:  T_eval->SetBranchStatus("stm_LM",1); T_eval->SetBranchAddress("stm_LM",&stm_LM);
apps/check_failures.cxx:  T_eval->SetBranchStatus("stm_TGM",1); T_eval->SetBranchAddress("stm_TGM",&stm_TGM);
apps/check_failures.cxx:  T_eval->SetBranchStatus("stm_STM",1); T_eval->SetBranchAddress("stm_STM",&stm_STM);
apps/check_failures.cxx:  T_eval->SetBranchStatus("stm_FullDead",1); T_eval->SetBranchAddress("stm_FullDead",&stm_FullDead);
apps/check_failures.cxx:  T_eval->SetBranchStatus("stm_clusterlength",1); T_eval->SetBranchAddress("stm_clusterlength",&stm_cluster_length);
apps/check_failures.cxx:  T_eval->SetBranchStatus("match_found",1); T_eval->SetBranchAddress("match_found",&match_found);
apps/check_failures.cxx:  if (T_eval->GetBranch("match_found_asInt")){
apps/check_failures.cxx:    T_eval->SetBranchStatus("match_found_asInt",1); T_eval->SetBranchAddress("match_found_asInt",&match_found_asInt);
apps/check_failures.cxx:  T_eval->SetBranchStatus("run",1); T_eval->SetBranchAddress("run",&run);
apps/check_failures.cxx:  T_eval->SetBranchStatus("subrun",1); T_eval->SetBranchAddress("subrun",&subrun);
apps/check_failures.cxx:  T_eval->SetBranchStatus("event",1); T_eval->SetBranchAddress("event",&event);
apps/check_failures.cxx:  if (!T_eval->GetBranch("truth_isCC")) flag_data = 1;
apps/check_failures.cxx:    T_eval->SetBranchStatus("truth_nuPdg",1); T_eval->SetBranchAddress("truth_nuPdg",&truth_nuPdg);
apps/check_failures.cxx:    T_eval->SetBranchStatus("truth_isCC",1); T_eval->SetBranchAddress("truth_isCC",&truth_isCC);
apps/check_failures.cxx:    T_eval->SetBranchStatus("truth_isFC",1); T_eval->SetBranchAddress("truth_isFC",&truth_isFC);
apps/check_failures.cxx:    T_eval->SetBranchStatus("truth_vtxInside",1); T_eval->SetBranchAddress("truth_vtxInside",&truth_vtxInside);
apps/check_failures.cxx:    T_eval->SetBranchStatus("weight_spline",1); T_eval->SetBranchAddress("weight_spline",&weight_spline);
apps/check_failures.cxx:    T_eval->SetBranchStatus("weight_cv",1); T_eval->SetBranchAddress("weight_cv",&weight_cv);
apps/check_failures.cxx:    T_eval->SetBranchStatus("weight_lee",1); T_eval->SetBranchAddress("weight_lee",&weight_lee);
apps/check_failures.cxx:  for (Int_t i=0;i!=T_eval->GetEntries();i++){
apps/check_failures.cxx:    T_eval->GetEntry(i);
apps/check_failures.cxx:    std::cout << "Reco 1.5 failure in event: " << tmp_event << "/" << T_eval->GetEntries() << "  POT: " << tmp_pot << " ratio " << tmp_pot/total_pot << std::endl;
apps/check_failures.cxx:    std::cout << "Reco 2.0 stm failure in event: " << tmp_event << "/" << T_eval->GetEntries() << "  POT: " << tmp_pot << " ratio " << tmp_pot/total_pot << std::endl;   
apps/check_failures.cxx:    std::cout << "Reco 2.0 PR failure in event: " << tmp_event << "/" << T_eval->GetEntries() << "  POT: " << tmp_pot << " ratio " << tmp_pot/total_pot << std::endl;
apps/convert_checkout_hist_xs.cxx:  if (T_eval->GetBranch("weight_cv")) flag_data = false;
apps/convert_checkout_hist_xs.cxx:  T_eval->SetBranchStatus("*",0);
apps/convert_checkout_hist_xs.cxx:  T_eval->SetBranchStatus("match_energy",1);
apps/convert_checkout_hist_xs.cxx:  T_eval->SetBranchStatus("match_isFC",1);
apps/convert_checkout_hist_xs.cxx:  T_eval->SetBranchStatus("match_found",1);
apps/convert_checkout_hist_xs.cxx:  if (T_eval->GetBranch("match_found_asInt")) T_eval->SetBranchStatus("match_found_asInt",1); 
apps/convert_checkout_hist_xs.cxx:  T_eval->SetBranchStatus("stm_eventtype",1);
apps/convert_checkout_hist_xs.cxx:  T_eval->SetBranchStatus("stm_lowenergy",1);
apps/convert_checkout_hist_xs.cxx:  T_eval->SetBranchStatus("stm_LM",1);
apps/convert_checkout_hist_xs.cxx:  T_eval->SetBranchStatus("stm_TGM",1);
apps/convert_checkout_hist_xs.cxx:  T_eval->SetBranchStatus("stm_STM",1);
apps/convert_checkout_hist_xs.cxx:  T_eval->SetBranchStatus("stm_FullDead",1);
apps/convert_checkout_hist_xs.cxx:  T_eval->SetBranchStatus("stm_clusterlength",1);
apps/convert_checkout_hist_xs.cxx:  // T_eval->SetBranchStatus("run",1);
apps/convert_checkout_hist_xs.cxx:  // T_eval->SetBranchStatus("subrun",1);
apps/convert_checkout_hist_xs.cxx:  // T_eval->SetBranchStatus("event",1);
apps/convert_checkout_hist_xs.cxx:    T_eval->SetBranchStatus("weight_spline",1);
apps/convert_checkout_hist_xs.cxx:    T_eval->SetBranchStatus("weight_cv",1);
apps/convert_checkout_hist_xs.cxx:    T_eval->SetBranchStatus("weight_lee",1);
apps/convert_checkout_hist_xs.cxx:    T_eval->SetBranchStatus("weight_change",1);
apps/convert_checkout_hist_xs.cxx:    T_eval->SetBranchStatus("truth_isCC",1);
apps/convert_checkout_hist_xs.cxx:    T_eval->SetBranchStatus("truth_nuPdg",1);
apps/convert_checkout_hist_xs.cxx:    T_eval->SetBranchStatus("truth_vtxInside",1);
apps/convert_checkout_hist_xs.cxx:    T_eval->SetBranchStatus("truth_nuEnergy",1);
apps/convert_checkout_hist_xs.cxx:    T_eval->SetBranchStatus("truth_energyInside",1);
apps/convert_checkout_hist_xs.cxx:    T_eval->SetBranchStatus("truth_vtxX",1);
apps/convert_checkout_hist_xs.cxx:    T_eval->SetBranchStatus("truth_vtxY",1);
apps/convert_checkout_hist_xs.cxx:    T_eval->SetBranchStatus("truth_vtxZ",1);
apps/convert_checkout_hist_xs.cxx:    T_eval->SetBranchStatus("match_completeness_energy",1);
apps/convert_checkout_hist_xs.cxx:      T_eval->SetBranchStatus("gl_sel_type",1);
apps/convert_checkout_hist_xs.cxx:      T_eval->SetBranchStatus("gl_sel_type",1);
apps/convert_checkout_hist_xs.cxx:      T_eval->SetBranchStatus("gl_true_Enu",1);
apps/convert_checkout_hist_xs.cxx:      T_eval->SetBranchStatus("gl_true_Elep",1);
apps/convert_checkout_hist_xs.cxx:      T_eval->SetBranchStatus("gl_reco_Eshower",1);
apps/convert_checkout_hist_xs.cxx:      T_eval->SetBranchStatus("gl_simple_pot_weight",1);
apps/convert_checkout_hist_xs.cxx:      T_eval->SetBranchStatus("gl_rem_orig_wc_pot_weight",1);
apps/convert_checkout_hist_xs.cxx:      T_eval->SetBranchStatus("gl_new_pot_weight",1);
apps/convert_checkout_hist_xs.cxx:      T_eval->SetBranchStatus("gl_overlap_weight",1);
apps/convert_checkout_hist_xs.cxx:      T_eval->SetBranchStatus("gl_wc_total_overlapped_weight",1);
apps/convert_checkout_hist_xs.cxx:  std::cout << "Total entries: " << T_eval->GetEntries() << std::endl;
apps/convert_checkout_hist_xs.cxx:  for (Int_t i=0;i!=T_eval->GetEntries();i++){
apps/convert_checkout_hist_xs.cxx:    T_eval->GetEntry(i);
apps/event_info_filter.cxx:  if (T_eval->GetBranch("weight_cv")) flag_data = false;
apps/event_info_filter.cxx:  T_eval->SetBranchStatus("*",1);
apps/event_info_filter.cxx:    T_eval->GetEntry(i); tagger.match_isFC = eval.match_isFC;
apps/print_event.cxx:  if (T_eval->GetBranch("weight_cv")) flag_data = false;
apps/print_event.cxx:  T_eval->SetBranchStatus("*",0);
apps/print_event.cxx:  T_eval->SetBranchStatus("match_energy",1);
apps/print_event.cxx:  T_eval->SetBranchStatus("match_isFC",1);
apps/print_event.cxx:  T_eval->SetBranchStatus("match_found",1);
apps/print_event.cxx:  if (T_eval->GetBranch("match_found_asInt")) T_eval->SetBranchStatus("match_found_asInt",1); 
apps/print_event.cxx:  T_eval->SetBranchStatus("stm_eventtype",1);
apps/print_event.cxx:  T_eval->SetBranchStatus("stm_lowenergy",1);
apps/print_event.cxx:  T_eval->SetBranchStatus("stm_LM",1);
apps/print_event.cxx:  T_eval->SetBranchStatus("stm_TGM",1);
apps/print_event.cxx:  T_eval->SetBranchStatus("stm_STM",1);
apps/print_event.cxx:  T_eval->SetBranchStatus("stm_FullDead",1);
apps/print_event.cxx:  T_eval->SetBranchStatus("stm_clusterlength",1);
apps/print_event.cxx:  T_eval->SetBranchStatus("run",1);
apps/print_event.cxx:  T_eval->SetBranchStatus("subrun",1);
apps/print_event.cxx:  T_eval->SetBranchStatus("event",1);
apps/print_event.cxx:    T_eval->SetBranchStatus("weight_spline",1);
apps/print_event.cxx:    T_eval->SetBranchStatus("weight_cv",1);
apps/print_event.cxx:    T_eval->SetBranchStatus("weight_lee",1);
apps/print_event.cxx:    T_eval->SetBranchStatus("weight_change",1);
apps/print_event.cxx:    T_eval->SetBranchStatus("truth_isCC",1);
apps/print_event.cxx:    T_eval->SetBranchStatus("truth_nuPdg",1);
apps/print_event.cxx:    T_eval->SetBranchStatus("truth_vtxInside",1);
apps/print_event.cxx:    T_eval->SetBranchStatus("truth_nuEnergy",1);
apps/print_event.cxx:    T_eval->SetBranchStatus("truth_energyInside",1);
apps/print_event.cxx:    T_eval->SetBranchStatus("truth_vtxX",1);
apps/print_event.cxx:    T_eval->SetBranchStatus("truth_vtxY",1);
apps/print_event.cxx:    T_eval->SetBranchStatus("truth_vtxZ",1);
apps/print_event.cxx:    T_eval->SetBranchStatus("match_completeness_energy",1);
apps/print_event.cxx:  std::cout << "Total entries: " << T_eval->GetEntries() << std::endl;
apps/print_event.cxx:  for (Int_t i=0;i!=T_eval->GetEntries();i++){
apps/print_event.cxx:    T_eval->GetEntry(i);
apps/test_apply_cuts.cxx:  if (T_eval->GetBranch("weight_cv")) flag_data = false;
apps/test_apply_cuts.cxx:  T_eval->SetBranchStatus("*",0);
apps/test_apply_cuts.cxx:  T_eval->SetBranchStatus("match_isFC",1);
apps/test_apply_cuts.cxx:  T_eval->SetBranchStatus("match_found",1);
apps/test_apply_cuts.cxx:  if (T_eval->GetBranch("match_found_asInt")) T_eval->SetBranchStatus("match_found_asInt",1); 
apps/test_apply_cuts.cxx:  T_eval->SetBranchStatus("stm_eventtype",1);
apps/test_apply_cuts.cxx:  T_eval->SetBranchStatus("stm_lowenergy",1);
apps/test_apply_cuts.cxx:  T_eval->SetBranchStatus("stm_LM",1);
apps/test_apply_cuts.cxx:  T_eval->SetBranchStatus("stm_TGM",1);
apps/test_apply_cuts.cxx:  T_eval->SetBranchStatus("stm_STM",1);
apps/test_apply_cuts.cxx:  T_eval->SetBranchStatus("stm_FullDead",1);
apps/test_apply_cuts.cxx:  T_eval->SetBranchStatus("stm_clusterlength",1);
apps/test_apply_cuts.cxx:  T_eval->SetBranchStatus("weight_spline",1);
apps/test_apply_cuts.cxx:  T_eval->SetBranchStatus("weight_cv",1);
apps/test_apply_cuts.cxx:  T_eval->SetBranchStatus("weight_lee",1);
apps/test_apply_cuts.cxx:  T_eval->SetBranchStatus("weight_change",1);
apps/test_apply_cuts.cxx:  for (Int_t i=0;i!=T_eval->GetEntries();i++){
apps/test_apply_cuts.cxx:    T_eval->GetEntry(i);
apps/convert_checkout_hist.cxx:  if (T_eval->GetBranch("weight_cv")) flag_data = false;
apps/convert_checkout_hist.cxx:  T_eval->SetBranchStatus("*",0);
apps/convert_checkout_hist.cxx:  T_eval->SetBranchStatus("match_energy",1);
apps/convert_checkout_hist.cxx:  T_eval->SetBranchStatus("match_isFC",1);
apps/convert_checkout_hist.cxx:  T_eval->SetBranchStatus("match_found",1);
apps/convert_checkout_hist.cxx:  if (T_eval->GetBranch("match_found_asInt")) T_eval->SetBranchStatus("match_found_asInt",1); 
apps/convert_checkout_hist.cxx:  T_eval->SetBranchStatus("stm_eventtype",1);
apps/convert_checkout_hist.cxx:  T_eval->SetBranchStatus("stm_lowenergy",1);
apps/convert_checkout_hist.cxx:  T_eval->SetBranchStatus("stm_LM",1);
apps/convert_checkout_hist.cxx:  T_eval->SetBranchStatus("stm_TGM",1);
apps/convert_checkout_hist.cxx:  T_eval->SetBranchStatus("stm_STM",1);
apps/convert_checkout_hist.cxx:  T_eval->SetBranchStatus("stm_FullDead",1);
apps/convert_checkout_hist.cxx:  T_eval->SetBranchStatus("stm_clusterlength",1);
apps/convert_checkout_hist.cxx:  T_eval->SetBranchStatus("run",1);
apps/convert_checkout_hist.cxx:  T_eval->SetBranchStatus("subrun",1);
apps/convert_checkout_hist.cxx:  T_eval->SetBranchStatus("event",1);
apps/convert_checkout_hist.cxx:    T_eval->SetBranchStatus("weight_spline",1);
apps/convert_checkout_hist.cxx:    T_eval->SetBranchStatus("weight_cv",1);
apps/convert_checkout_hist.cxx:    T_eval->SetBranchStatus("weight_lee",1);
apps/convert_checkout_hist.cxx:    T_eval->SetBranchStatus("weight_change",1);
apps/convert_checkout_hist.cxx:    T_eval->SetBranchStatus("truth_isCC",1);
apps/convert_checkout_hist.cxx:    T_eval->SetBranchStatus("truth_nuPdg",1);
apps/convert_checkout_hist.cxx:    T_eval->SetBranchStatus("truth_vtxInside",1);
apps/convert_checkout_hist.cxx:    T_eval->SetBranchStatus("truth_nuEnergy",1);
apps/convert_checkout_hist.cxx:    T_eval->SetBranchStatus("truth_energyInside",1);
apps/convert_checkout_hist.cxx:    T_eval->SetBranchStatus("truth_vtxX",1);
apps/convert_checkout_hist.cxx:    T_eval->SetBranchStatus("truth_vtxY",1);
apps/convert_checkout_hist.cxx:    T_eval->SetBranchStatus("truth_vtxZ",1);
apps/convert_checkout_hist.cxx:    T_eval->SetBranchStatus("match_completeness_energy",1);
apps/convert_checkout_hist.cxx:      T_eval->SetBranchStatus("gl_sel_type",1);
apps/convert_checkout_hist.cxx:      T_eval->SetBranchStatus("gl_file_type",1);
apps/convert_checkout_hist.cxx:      T_eval->SetBranchStatus("gl_true_Enu",1);
apps/convert_checkout_hist.cxx:      T_eval->SetBranchStatus("gl_true_Elep",1);
apps/convert_checkout_hist.cxx:      T_eval->SetBranchStatus("gl_reco_Eshower",1);
apps/convert_checkout_hist.cxx:      T_eval->SetBranchStatus("gl_simple_pot_weight",1);
apps/convert_checkout_hist.cxx:      T_eval->SetBranchStatus("gl_rem_orig_wc_pot_weight",1);
apps/convert_checkout_hist.cxx:      T_eval->SetBranchStatus("gl_new_pot_weight",1);
apps/convert_checkout_hist.cxx:      T_eval->SetBranchStatus("gl_overlap_weight",1);
apps/convert_checkout_hist.cxx:      T_eval->SetBranchStatus("gl_wc_total_overlapped_weight",1);
apps/convert_checkout_hist.cxx:  std::cout << "Total entries: " << T_eval->GetEntries() << std::endl;
apps/convert_checkout_hist.cxx:  for (Int_t i=0;i!=T_eval->GetEntries();i++){
apps/convert_checkout_hist.cxx:    T_eval->GetEntry(i);
apps/sideband_filter.cxx:  T_eval->SetBranchStatus("*",1);
apps/sideband_filter.cxx:    T_eval->GetEntry(i); tagger.match_isFC = eval.match_isFC;
apps/CNN_event_info_filter.cxx:  if (T_eval->GetBranch("weight_cv")) flag_data = false;
apps/CNN_event_info_filter.cxx:  T_eval->SetBranchStatus("*",1);
apps/CNN_event_info_filter.cxx:    T_eval->GetEntry(i); tagger.match_isFC = eval.match_isFC;
apps/time_dep_ext.cxx:  T_eval->SetBranchStatus("*",0);
apps/time_dep_ext.cxx:  T_eval->SetBranchStatus("match_isFC",1); T_eval->SetBranchAddress("match_isFC",&match_isFC);
apps/time_dep_ext.cxx:  T_eval->SetBranchStatus("run",1); T_eval->SetBranchAddress("run",&run);
apps/time_dep_ext.cxx:  T_eval->SetBranchStatus("match_energy",1); T_eval->SetBranchAddress("match_energy", &match_energy);
apps/time_dep_ext.cxx:  for (Int_t i=0;i!= T_eval->GetEntries();i++){
apps/time_dep_ext.cxx:    T_eval->GetEntry(i);
apps/prune_checkout_trees.cxx:    T_eval->Add(line.c_str());
apps/prune_checkout_trees.cxx:  cout << T_eval->GetEntries() << endl;
apps/prune_checkout_trees.cxx:  T_eval->Merge(ofile, 0, "keep");
apps/bdt_convert.cxx:  if (T_eval->GetBranch("weight_cv")) flag_data =false;
apps/bdt_convert.cxx:  //  if (T_eval->GetBranch("file_type")) flag_use_global_file_type = false;
apps/bdt_convert.cxx:  //  std::cout << T_eval->GetEntries() << std::endl;
apps/bdt_convert.cxx:  //TTree *t1 = T_eval->CloneTree(-1,"");
apps/bdt_convert.cxx:  //  T_eval->SetBranchAddress("match_isFC",&match_isFC);
apps/bdt_convert.cxx:  T_eval->SetBranchStatus("*",0);
apps/bdt_convert.cxx:  T_eval->SetBranchStatus("stm_eventtype",1); 
apps/bdt_convert.cxx:  T_eval->SetBranchStatus("stm_lowenergy",1); 
apps/bdt_convert.cxx:  T_eval->SetBranchStatus("stm_LM",1); 
apps/bdt_convert.cxx:  T_eval->SetBranchStatus("stm_TGM",1); 
apps/bdt_convert.cxx:  T_eval->SetBranchStatus("stm_STM",1); 
apps/bdt_convert.cxx:  T_eval->SetBranchStatus("stm_FullDead",1); 
apps/bdt_convert.cxx:  T_eval->SetBranchStatus("stm_clusterlength",1);
apps/bdt_convert.cxx:  T_eval->SetBranchStatus("match_found",1);
apps/bdt_convert.cxx:  T_eval->SetBranchStatus("run",1); 
apps/bdt_convert.cxx:  T_eval->SetBranchStatus("subrun",1); 
apps/bdt_convert.cxx:  T_eval->SetBranchStatus("event",1);
apps/bdt_convert.cxx:  if (T_eval->GetBranch("file_type")) T_eval->SetBranchStatus("file_type",1);
apps/bdt_convert.cxx:  if (T_eval->GetBranch("match_found_asInt")){
apps/bdt_convert.cxx:    T_eval->SetBranchStatus("match_found_asInt",1);
apps/bdt_convert.cxx:  for (Int_t i=0;i!=T_eval->GetEntries();i++){
apps/bdt_convert.cxx:    T_eval->GetEntry(i);
apps/bdt_convert.cxx:  T_eval->SetBranchStatus("*",1);
apps/bdt_convert.cxx:    T_eval->GetEntry(i); tagger.match_isFC = eval.match_isFC;
apps/merge_pelee_filter.cxx:  if (T_eval->GetBranch("weight_cv")) flag_data = false;
apps/merge_pelee_filter.cxx:  T_eval->SetBranchStatus("*",1);
apps/merge_pelee_filter.cxx:    T_eval->GetEntry(i); tagger.match_isFC = eval.match_isFC;
apps/merge_xf.cxx:  T_eval->SetBranchStatus("*",0);
apps/merge_xf.cxx:  T_eval->SetBranchStatus("match_energy",1);
apps/merge_xf.cxx:  T_eval->SetBranchStatus("match_isFC",1);
apps/merge_xf.cxx:  T_eval->SetBranchStatus("match_found",1);
apps/merge_xf.cxx:  if (T_eval->GetBranch("match_found_asInt")) T_eval->SetBranchStatus("match_found_asInt",1); 
apps/merge_xf.cxx:  T_eval->SetBranchStatus("stm_eventtype",1);
apps/merge_xf.cxx:  T_eval->SetBranchStatus("stm_lowenergy",1);
apps/merge_xf.cxx:  T_eval->SetBranchStatus("stm_LM",1);
apps/merge_xf.cxx:  T_eval->SetBranchStatus("stm_TGM",1);
apps/merge_xf.cxx:  T_eval->SetBranchStatus("stm_STM",1);
apps/merge_xf.cxx:  T_eval->SetBranchStatus("stm_FullDead",1);
apps/merge_xf.cxx:  T_eval->SetBranchStatus("stm_clusterlength",1);
apps/merge_xf.cxx:  T_eval->SetBranchStatus("weight_spline",1);
apps/merge_xf.cxx:  T_eval->SetBranchStatus("weight_cv",1);
apps/merge_xf.cxx:  T_eval->SetBranchStatus("weight_lee",1);
apps/merge_xf.cxx:  T_eval->SetBranchStatus("weight_change",1);
apps/merge_xf.cxx:  T_eval->SetBranchStatus("truth_isCC",1);
apps/merge_xf.cxx:  T_eval->SetBranchStatus("truth_nuPdg",1);
apps/merge_xf.cxx:  T_eval->SetBranchStatus("truth_vtxInside",1);
apps/merge_xf.cxx:  T_eval->SetBranchStatus("truth_nuEnergy",1);
apps/merge_xf.cxx:  T_eval->SetBranchStatus("truth_vtxX",1);
apps/merge_xf.cxx:  T_eval->SetBranchStatus("truth_vtxY",1);
apps/merge_xf.cxx:  T_eval->SetBranchStatus("truth_vtxZ",1);
apps/merge_xf.cxx:  T_eval->SetBranchStatus("run",1);
apps/merge_xf.cxx:  T_eval->SetBranchStatus("subrun",1);
apps/merge_xf.cxx:  T_eval->SetBranchStatus("event",1);
apps/merge_xf.cxx:  T_eval->SetBranchStatus("match_completeness_energy",1);
apps/merge_xf.cxx:  T_eval->SetBranchStatus("truth_energyInside",1);
apps/merge_xf.cxx:  for (int i=0;i!=T_eval->GetEntries();i++){
apps/merge_xf.cxx:    T_eval->GetEntry(i);
apps/merge_xf.cxx:  T_eval->SetBranchStatus("*",1);
apps/merge_xf.cxx:      T_eval->GetEntry(it->first);
apps/merge_xf.cxx:  std::cout << "Events: " << t1->GetEntries()<<"/"<<T_eval->GetEntries() << std::endl;
apps/applyNuMIGeomtryWeights.cxx:    T_eval->Fill();
apps/applyNuMIGeomtryWeights.cxx:  T_eval->Write();
apps/numi_filter.cxx:  T_eval->SetBranchStatus("*",1);
apps/numi_filter.cxx:    T_eval->GetEntry(i); tagger.match_isFC = eval.match_isFC;
apps/time_dep.cxx:    T_eval->SetBranchStatus("*",0);
apps/time_dep.cxx:    T_eval->SetBranchStatus("match_isFC",1); T_eval->SetBranchAddress("match_isFC",&match_isFC);
apps/time_dep.cxx:    T_eval->SetBranchStatus("run",1); T_eval->SetBranchAddress("run",&run);
apps/time_dep.cxx:    T_eval->SetBranchStatus("match_energy",1); T_eval->SetBranchAddress("match_energy", &match_energy);
apps/time_dep.cxx:    for (Int_t i=0;i!= T_eval->GetEntries();i++){
apps/time_dep.cxx:      T_eval->GetEntry(i);
apps/time_dep.cxx:    T_eval->SetBranchStatus("*",0);
apps/time_dep.cxx:    T_eval->SetBranchStatus("match_isFC",1); T_eval->SetBranchAddress("match_isFC",&match_isFC);
apps/time_dep.cxx:    T_eval->SetBranchStatus("run",1); T_eval->SetBranchAddress("run",&run);
apps/time_dep.cxx:    T_eval->SetBranchStatus("match_energy",1); T_eval->SetBranchAddress("match_energy", &match_energy);
apps/time_dep.cxx:    for (Int_t i=0;i!= T_eval->GetEntries();i++){
apps/time_dep.cxx:      T_eval->GetEntry(i);
